                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _InitGame
                             13 	.globl _ResetData
                             14 	.globl _InitValues
                             15 	.globl _StartMenu
                             16 	.globl _PrintStartMenu
                             17 	.globl _EnemyLoop
                             18 	.globl _ExplosionSecuence
                             19 	.globl _SetEnemyParams
                             20 	.globl _MoveEnemy
                             21 	.globl _RunStatus
                             22 	.globl _Climbing
                             23 	.globl _Walking
                             24 	.globl _WalkAnim
                             25 	.globl _PreJump
                             26 	.globl _Jumping
                             27 	.globl _JumpIn
                             28 	.globl _Stopped
                             29 	.globl _StopIn
                             30 	.globl _Falling
                             31 	.globl _LandIn
                             32 	.globl _FallIn
                             33 	.globl _PreJumpIn
                             34 	.globl _ClimbIn
                             35 	.globl _WalkIn
                             36 	.globl _MoveRight
                             37 	.globl _MoveLeft
                             38 	.globl _MoveDown
                             39 	.globl _MoveUp
                             40 	.globl _SelectFrame
                             41 	.globl _AssignFrame
                             42 	.globl _CheckEnemyCollision
                             43 	.globl _EnemyWalkAnim
                             44 	.globl _SelectSpriteFrame
                             45 	.globl _PrintExplosion
                             46 	.globl _DeleteSprite
                             47 	.globl _PrintSprite
                             48 	.globl _InitObjects
                             49 	.globl _CheckObjects
                             50 	.globl _ReprintObjects
                             51 	.globl _DeleteObjectScoreboard
                             52 	.globl _DeleteObject
                             53 	.globl _PrintObject
                             54 	.globl _RedefineKey
                             55 	.globl _Wait4Key
                             56 	.globl _ReturnKeyPressed
                             57 	.globl _FacingWall
                             58 	.globl _OverMines
                             59 	.globl _OnStairs
                             60 	.globl _OnPlatform
                             61 	.globl _GetTilePtr
                             62 	.globl _MoveLeftMap
                             63 	.globl _MoveRightMap
                             64 	.globl _InitMap
                             65 	.globl _PrintMap
                             66 	.globl _RefreshScoreboard
                             67 	.globl _InitScoreboard
                             68 	.globl _PrintText
                             69 	.globl _PrintNumber
                             70 	.globl _ClearScreen
                             71 	.globl _Interrupt
                             72 	.globl _PlayMusic
                             73 	.globl _Pause
                             74 	.globl _Itoa
                             75 	.globl _Strlen
                             76 	.globl _cpct_zx7b_decrunch_s
                             77 	.globl _cpct_etm_setTileset2x4
                             78 	.globl _cpct_etm_drawTileBox2x4
                             79 	.globl _cpct_akp_SFXPlay
                             80 	.globl _cpct_akp_SFXInit
                             81 	.globl _cpct_akp_musicInit
                             82 	.globl _cpct_getScreenPtr
                             83 	.globl _cpct_setPALColour
                             84 	.globl _cpct_setPalette
                             85 	.globl _cpct_waitVSYNC
                             86 	.globl _cpct_setVideoMode
                             87 	.globl _cpct_drawSpriteMaskedAlignedTable
                             88 	.globl _cpct_drawSprite
                             89 	.globl _cpct_drawSolidBox
                             90 	.globl _cpct_px2byteM0
                             91 	.globl _cpct_hflipSpriteM0
                             92 	.globl _cpct_get2Bits
                             93 	.globl _cpct_isAnyKeyPressed
                             94 	.globl _cpct_isKeyPressed
                             95 	.globl _cpct_scanKeyboard_if
                             96 	.globl _cpct_scanKeyboard_f
                             97 	.globl _cpct_scanKeyboard
                             98 	.globl _cpct_memset
                             99 	.globl _cpct_setInterruptHandler
                            100 	.globl _cpct_disableFirmware
                            101 	.globl _mapNumber
                            102 	.globl _enum_mov
                            103 	.globl _enum_sta
                            104 	.globl _enum_dir
                            105 	.globl _obj
                            106 	.globl _spr
                            107 	.globl _ctlPause
                            108 	.globl _ctlAbort
                            109 	.globl _ctlMusic
                            110 	.globl _ctlFire
                            111 	.globl _ctlRight
                            112 	.globl _ctlLeft
                            113 	.globl _ctlDown
                            114 	.globl _ctlUp
                            115 	.globl _ct
                            116 	.globl _ctMainLoop
                            117 	.globl _music
                            118 	.globl _highScore
                            119 	.globl _score
                            120 	.globl _g_jumpTable
                            121 	.globl _anim_infected
                            122 	.globl _anim_aracnovirus
                            123 	.globl _anim_pelusoid
                            124 	.globl _frm_infected
                            125 	.globl _frm_aracnovirus
                            126 	.globl _frm_pelusoid
                            127 	.globl _animClimb
                            128 	.globl _animWalk
                            129 	.globl _frm_player
                            130 	.globl _ExplodePlayer
                            131 	.globl _SetEnemies
                            132 	.globl _ExplodeEnemies
                            133 	.globl _GameOver
                            134 ;--------------------------------------------------------
                            135 ; special function registers
                            136 ;--------------------------------------------------------
                            137 ;--------------------------------------------------------
                            138 ; ram data
                            139 ;--------------------------------------------------------
                            140 	.area _DATA
   0000                     141 _score::
   0000                     142 	.ds 2
   0002                     143 _highScore::
   0002                     144 	.ds 2
   0004                     145 _music::
   0004                     146 	.ds 1
   0005                     147 _ctMainLoop::
   0005                     148 	.ds 1
   0006                     149 _ct::
   0006                     150 	.ds 1
   0007                     151 _ctlUp::
   0007                     152 	.ds 2
   0009                     153 _ctlDown::
   0009                     154 	.ds 2
   000B                     155 _ctlLeft::
   000B                     156 	.ds 2
   000D                     157 _ctlRight::
   000D                     158 	.ds 2
   000F                     159 _ctlFire::
   000F                     160 	.ds 2
   0011                     161 _ctlMusic::
   0011                     162 	.ds 2
   0013                     163 _ctlAbort::
   0013                     164 	.ds 2
   0015                     165 _ctlPause::
   0015                     166 	.ds 2
   0017                     167 _spr::
   0017                     168 	.ds 76
   0063                     169 _obj::
   0063                     170 	.ds 32
   0083                     171 _enum_dir::
   0083                     172 	.ds 1
   0084                     173 _enum_sta::
   0084                     174 	.ds 1
   0085                     175 _enum_mov::
   0085                     176 	.ds 1
   0086                     177 _Interrupt_nInt_1_142:
   0086                     178 	.ds 1
                            179 ;--------------------------------------------------------
                            180 ; ram data
                            181 ;--------------------------------------------------------
                            182 	.area _INITIALIZED
   0000                     183 _mapNumber::
   0000                     184 	.ds 1
                            185 ;--------------------------------------------------------
                            186 ; absolute external ram data
                            187 ;--------------------------------------------------------
                            188 	.area _DABS (ABS)
                            189 ;--------------------------------------------------------
                            190 ; global & static initialisations
                            191 ;--------------------------------------------------------
                            192 	.area _HOME
                            193 	.area _GSINIT
                            194 	.area _GSFINAL
                            195 	.area _GSINIT
                            196 ;--------------------------------------------------------
                            197 ; Home
                            198 ;--------------------------------------------------------
                            199 	.area _HOME
                            200 	.area _HOME
                            201 ;--------------------------------------------------------
                            202 ; code
                            203 ;--------------------------------------------------------
                            204 	.area _CODE
                            205 ;src/main.c:229: cpctm_createTransparentMaskTable(g_maskTable, 0x100, M0, 0);
                            206 ;	---------------------------------
                            207 ; Function dummy_cpct_transparentMaskTable0M0_container
                            208 ; ---------------------------------
   0000                     209 _dummy_cpct_transparentMaskTable0M0_container::
                            210 	.area _g_maskTable_ (ABS) 
   0100                     211 	.org 0x100 
   0100                     212 	 _g_maskTable::
   0100 FF AA 55 00 AA AA   213 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0108 55 00 55 00 00 00   214 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0110 AA AA 00 00 AA AA   215 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0118 00 00 00 00 00 00   216 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0120 55 00 55 00 00 00   217 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0128 55 00 55 00 00 00   218 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0130 00 00 00 00 00 00   219 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0138 00 00 00 00 00 00   220 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0140 AA AA 00 00 AA AA   221 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0148 00 00 00 00 00 00   222 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0150 AA AA 00 00 AA AA   223 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0158 00 00 00 00 00 00   224 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0160 00 00 00 00 00 00   225 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0168 00 00 00 00 00 00   226 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0170 00 00 00 00 00 00   227 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0178 00 00 00 00 00 00   228 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0180 55 00 55 00 00 00   229 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0188 55 00 55 00 00 00   230 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0190 00 00 00 00 00 00   231 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0198 00 00 00 00 00 00   232 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01A0 55 00 55 00 00 00   233 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01A8 55 00 55 00 00 00   234 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01B0 00 00 00 00 00 00   235 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01B8 00 00 00 00 00 00   236 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01C0 00 00 00 00 00 00   237 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01C8 00 00 00 00 00 00   238 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01D0 00 00 00 00 00 00   239 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01D8 00 00 00 00 00 00   240 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01E0 00 00 00 00 00 00   241 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01E8 00 00 00 00 00 00   242 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01F0 00 00 00 00 00 00   243 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01F8 00 00 00 00 00 00   244 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            245 	.area _CSEG (REL, CON) 
                            246 ;src/main.c:262: u8 Strlen(const u8 *str) __z88dk_fastcall {
                            247 ;	---------------------------------
                            248 ; Function Strlen
                            249 ; ---------------------------------
   0000                     250 _Strlen::
                            251 ;src/main.c:264: for (s = str; *s; ++s);
   0000 4D            [ 4]  252 	ld	c,l
   0001 44            [ 4]  253 	ld	b,h
   0002                     254 00103$:
   0002 7E            [ 7]  255 	ld	a, (hl)
   0003 B7            [ 4]  256 	or	a, a
   0004 28 03         [12]  257 	jr	Z,00101$
   0006 23            [ 6]  258 	inc	hl
   0007 18 F9         [12]  259 	jr	00103$
   0009                     260 00101$:
                            261 ;src/main.c:265: return (s - str);
   0009 BF            [ 4]  262 	cp	a, a
   000A ED 42         [15]  263 	sbc	hl, bc
   000C C9            [10]  264 	ret
   000D                     265 _frm_player:
   000D 03                  266 	.db #0x03	; 3
   000Er00r00               267 	.dw _g_player_0
   0010 03                  268 	.db #0x03	; 3
   0011r00r00               269 	.dw _g_player_1
   0013 03                  270 	.db #0x03	; 3
   0014r00r00               271 	.dw _g_player_2
   0016 03                  272 	.db #0x03	; 3
   0017r00r00               273 	.dw _g_player_3
   0019 03                  274 	.db #0x03	; 3
   001Ar00r00               275 	.dw _g_player_4
   001C 03                  276 	.db #0x03	; 3
   001Dr00r00               277 	.dw _g_player_5
   001F 03                  278 	.db #0x03	; 3
   0020r00r00               279 	.dw _g_player_6
   0022 03                  280 	.db #0x03	; 3
   0023r00r00               281 	.dw _g_player_7
   0025 03                  282 	.db #0x03	; 3
   0026r00r00               283 	.dw _g_player_8
   0028                     284 _animWalk:
   0028r0Dr00               285 	.dw (_frm_player + 0)
   002Ar10r00               286 	.dw (_frm_player + 3)
   002Cr0Dr00               287 	.dw (_frm_player + 0)
   002Er13r00               288 	.dw (_frm_player + 6)
   0030                     289 _animClimb:
   0030r1Fr00               290 	.dw (_frm_player + 18)
   0032r22r00               291 	.dw (_frm_player + 21)
   0034r1Fr00               292 	.dw (_frm_player + 18)
   0036r25r00               293 	.dw (_frm_player + 24)
   0038                     294 _frm_pelusoid:
   0038 00                  295 	.db #0x00	; 0
   0039r00r00               296 	.dw _g_pelusoid_0
   003B 00                  297 	.db #0x00	; 0
   003Cr00r00               298 	.dw _g_pelusoid_1
   003E                     299 _frm_aracnovirus:
   003E 00                  300 	.db #0x00	; 0
   003Fr00r00               301 	.dw _g_aracnovirus_0
   0041 00                  302 	.db #0x00	; 0
   0042r00r00               303 	.dw _g_aracnovirus_1
   0044                     304 _frm_infected:
   0044 00                  305 	.db #0x00	; 0
   0045r00r00               306 	.dw _g_infected_0
   0047 00                  307 	.db #0x00	; 0
   0048r00r00               308 	.dw _g_infected_1
   004A                     309 _anim_pelusoid:
   004Ar38r00               310 	.dw (_frm_pelusoid + 0)
   004Cr3Br00               311 	.dw (_frm_pelusoid + 3)
   004E                     312 _anim_aracnovirus:
   004Er3Er00               313 	.dw (_frm_aracnovirus + 0)
   0050r41r00               314 	.dw (_frm_aracnovirus + 3)
   0052                     315 _anim_infected:
   0052r44r00               316 	.dw (_frm_infected + 0)
   0054r47r00               317 	.dw (_frm_infected + 3)
   0056                     318 _g_jumpTable:
   0056 FF                  319 	.db #0xff	; 255
   0057 A5                  320 	.db #0xa5	; 165
   0058 40                  321 	.db #0x40	; 64
                            322 ;src/main.c:270: char* Itoa(u16 value, char* result, int base) {    
                            323 ;	---------------------------------
                            324 ; Function Itoa
                            325 ; ---------------------------------
   0059                     326 _Itoa::
   0059 DD E5         [15]  327 	push	ix
   005B DD 21 00 00   [14]  328 	ld	ix,#0
   005F DD 39         [15]  329 	add	ix,sp
   0061 21 F9 FF      [10]  330 	ld	hl, #-7
   0064 39            [11]  331 	add	hl, sp
   0065 F9            [ 6]  332 	ld	sp, hl
                            333 ;src/main.c:272: char* ptr = result, *ptr1 = result, tmp_char;
   0066 DD 5E 06      [19]  334 	ld	e,6 (ix)
   0069 DD 56 07      [19]  335 	ld	d,7 (ix)
   006C 33            [ 6]  336 	inc	sp
   006D 33            [ 6]  337 	inc	sp
   006E D5            [11]  338 	push	de
                            339 ;src/main.c:274: if (base < 2 || base > 36) { 
   006F DD 7E 08      [19]  340 	ld	a, 8 (ix)
   0072 D6 02         [ 7]  341 	sub	a, #0x02
   0074 DD 7E 09      [19]  342 	ld	a, 9 (ix)
   0077 17            [ 4]  343 	rla
   0078 3F            [ 4]  344 	ccf
   0079 1F            [ 4]  345 	rra
   007A DE 80         [ 7]  346 	sbc	a, #0x80
   007C 38 12         [12]  347 	jr	C,00101$
   007E 3E 24         [ 7]  348 	ld	a, #0x24
   0080 DD BE 08      [19]  349 	cp	a, 8 (ix)
   0083 3E 00         [ 7]  350 	ld	a, #0x00
   0085 DD 9E 09      [19]  351 	sbc	a, 9 (ix)
   0088 E2r8Dr00      [10]  352 	jp	PO, 00140$
   008B EE 80         [ 7]  353 	xor	a, #0x80
   008D                     354 00140$:
   008D F2r96r00      [10]  355 	jp	P, 00115$
   0090                     356 00101$:
                            357 ;src/main.c:275: *result = '\0'; 
   0090 AF            [ 4]  358 	xor	a, a
   0091 12            [ 7]  359 	ld	(de), a
                            360 ;src/main.c:276: return result; 
   0092 EB            [ 4]  361 	ex	de,hl
   0093 C3r33r01      [10]  362 	jp	00112$
                            363 ;src/main.c:279: do {
   0096                     364 00115$:
   0096 DD 73 FE      [19]  365 	ld	-2 (ix), e
   0099 DD 72 FF      [19]  366 	ld	-1 (ix), d
   009C                     367 00104$:
                            368 ;src/main.c:280: tmp_value = value;
   009C DD 7E 04      [19]  369 	ld	a, 4 (ix)
   009F DD 77 FB      [19]  370 	ld	-5 (ix), a
   00A2 DD 7E 05      [19]  371 	ld	a, 5 (ix)
   00A5 DD 77 FC      [19]  372 	ld	-4 (ix), a
                            373 ;src/main.c:281: value /= base;
   00A8 DD 4E 08      [19]  374 	ld	c,8 (ix)
   00AB DD 46 09      [19]  375 	ld	b,9 (ix)
   00AE C5            [11]  376 	push	bc
   00AF DD 6E 04      [19]  377 	ld	l,4 (ix)
   00B2 DD 66 05      [19]  378 	ld	h,5 (ix)
   00B5 E5            [11]  379 	push	hl
   00B6 CDr00r00      [17]  380 	call	__divuint
   00B9 F1            [10]  381 	pop	af
   00BA F1            [10]  382 	pop	af
   00BB DD 75 04      [19]  383 	ld	4 (ix), l
   00BE DD 74 05      [19]  384 	ld	5 (ix), h
                            385 ;src/main.c:282: *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
   00C1 DD 4E FB      [19]  386 	ld	c, -5 (ix)
   00C4 DD 5E 04      [19]  387 	ld	e, 4 (ix)
   00C7 DD 66 08      [19]  388 	ld	h, 8 (ix)
   00CA 2E 00         [ 7]  389 	ld	l, #0x00
   00CC 55            [ 4]  390 	ld	d, l
   00CD 06 08         [ 7]  391 	ld	b, #0x08
   00CF                     392 00141$:
   00CF 29            [11]  393 	add	hl, hl
   00D0 30 01         [12]  394 	jr	NC,00142$
   00D2 19            [11]  395 	add	hl, de
   00D3                     396 00142$:
   00D3 10 FA         [13]  397 	djnz	00141$
   00D5 79            [ 4]  398 	ld	a, c
   00D6 95            [ 4]  399 	sub	a, l
   00D7 C6 23         [ 7]  400 	add	a, #0x23
   00D9 4F            [ 4]  401 	ld	c, a
   00DA 17            [ 4]  402 	rla
   00DB 9F            [ 4]  403 	sbc	a, a
   00DC 47            [ 4]  404 	ld	b, a
   00DD 21r38r01      [10]  405 	ld	hl, #___str_0
   00E0 09            [11]  406 	add	hl, bc
   00E1 4E            [ 7]  407 	ld	c, (hl)
   00E2 DD 6E FE      [19]  408 	ld	l,-2 (ix)
   00E5 DD 66 FF      [19]  409 	ld	h,-1 (ix)
   00E8 71            [ 7]  410 	ld	(hl), c
   00E9 DD 34 FE      [23]  411 	inc	-2 (ix)
   00EC 20 03         [12]  412 	jr	NZ,00143$
   00EE DD 34 FF      [23]  413 	inc	-1 (ix)
   00F1                     414 00143$:
                            415 ;src/main.c:283: } while (value);
   00F1 DD 7E 05      [19]  416 	ld	a, 5 (ix)
   00F4 DD B6 04      [19]  417 	or	a,4 (ix)
   00F7 20 A3         [12]  418 	jr	NZ,00104$
                            419 ;src/main.c:285: if (tmp_value < 0) 
   00F9 DD 4E FE      [19]  420 	ld	c,-2 (ix)
   00FC DD 46 FF      [19]  421 	ld	b,-1 (ix)
   00FF DD CB FC 7E   [20]  422 	bit	7, -4 (ix)
   0103 28 0F         [12]  423 	jr	Z,00108$
                            424 ;src/main.c:286: *ptr++ = '-';
   0105 DD 6E FE      [19]  425 	ld	l,-2 (ix)
   0108 DD 66 FF      [19]  426 	ld	h,-1 (ix)
   010B 36 2D         [10]  427 	ld	(hl), #0x2d
   010D DD 4E FE      [19]  428 	ld	c,-2 (ix)
   0110 DD 46 FF      [19]  429 	ld	b,-1 (ix)
   0113 03            [ 6]  430 	inc	bc
   0114                     431 00108$:
                            432 ;src/main.c:287: *ptr-- = '\0';
   0114 AF            [ 4]  433 	xor	a, a
   0115 02            [ 7]  434 	ld	(bc), a
   0116 0B            [ 6]  435 	dec	bc
                            436 ;src/main.c:289: while(ptr1 < ptr) {
   0117 D1            [10]  437 	pop	de
   0118 D5            [11]  438 	push	de
   0119                     439 00109$:
   0119 7B            [ 4]  440 	ld	a, e
   011A 91            [ 4]  441 	sub	a, c
   011B 7A            [ 4]  442 	ld	a, d
   011C 98            [ 4]  443 	sbc	a, b
   011D 30 0E         [12]  444 	jr	NC,00111$
                            445 ;src/main.c:290: tmp_char = *ptr;
   011F 0A            [ 7]  446 	ld	a, (bc)
   0120 DD 77 FD      [19]  447 	ld	-3 (ix), a
                            448 ;src/main.c:291: *ptr--= *ptr1;
   0123 1A            [ 7]  449 	ld	a, (de)
   0124 02            [ 7]  450 	ld	(bc), a
   0125 0B            [ 6]  451 	dec	bc
                            452 ;src/main.c:292: *ptr1++ = tmp_char;
   0126 DD 7E FD      [19]  453 	ld	a, -3 (ix)
   0129 12            [ 7]  454 	ld	(de), a
   012A 13            [ 6]  455 	inc	de
   012B 18 EC         [12]  456 	jr	00109$
   012D                     457 00111$:
                            458 ;src/main.c:295: return result;
   012D DD 6E 06      [19]  459 	ld	l,6 (ix)
   0130 DD 66 07      [19]  460 	ld	h,7 (ix)
   0133                     461 00112$:
   0133 DD F9         [10]  462 	ld	sp, ix
   0135 DD E1         [14]  463 	pop	ix
   0137 C9            [10]  464 	ret
   0138                     465 ___str_0:
   0138 7A 79 78 77 76 75   466 	.ascii "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmno"
        74 73 72 71 70 6F
        6E 6D 6C 6B 6A 69
        68 67 66 65 64 63
        62 61 39 38 37 36
        35 34 33 32 31 30
        31 32 33 34 35 36
        37 38 39 61 62 63
        64 65 66 67 68 69
        6A 6B 6C 6D 6E 6F
   0174 70 71 72 73 74 75   467 	.ascii "pqrstuvwxyz"
        76 77 78 79 7A
   017F 00                  468 	.db 0x00
                            469 ;src/main.c:300: void Pause(u16 value) __z88dk_fastcall {
                            470 ;	---------------------------------
                            471 ; Function Pause
                            472 ; ---------------------------------
   0180                     473 _Pause::
                            474 ;src/main.c:302: for(i = 0; i < value; i++) {
   0180 01 00 00      [10]  475 	ld	bc, #0x0000
   0183                     476 00103$:
   0183 79            [ 4]  477 	ld	a, c
   0184 95            [ 4]  478 	sub	a, l
   0185 78            [ 4]  479 	ld	a, b
   0186 9C            [ 4]  480 	sbc	a, h
   0187 D0            [11]  481 	ret	NC
                            482 ;src/main.c:305: __endasm;
   0188 76            [ 4]  483 	halt
                            484 ;src/main.c:302: for(i = 0; i < value; i++) {
   0189 03            [ 6]  485 	inc	bc
   018A 18 F7         [12]  486 	jr	00103$
                            487 ;src/main.c:311: void PlayMusic() {
                            488 ;	---------------------------------
                            489 ; Function PlayMusic
                            490 ; ---------------------------------
   018C                     491 _PlayMusic::
                            492 ;src/main.c:326: __endasm;
   018C D9            [ 4]  493 	exx
   018D 08                  494 	.db	#0x08
   018E F5            [11]  495 	push	af
   018F C5            [11]  496 	push	bc
   0190 D5            [11]  497 	push	de
   0191 E5            [11]  498 	push	hl
   0192 CDr00r00      [17]  499 	call	_cpct_akp_musicPlay
   0195 E1            [10]  500 	pop	hl
   0196 D1            [10]  501 	pop	de
   0197 C1            [10]  502 	pop	bc
   0198 F1            [10]  503 	pop	af
   0199 08                  504 	.db	#0x08
   019A D9            [ 4]  505 	exx
   019B C9            [10]  506 	ret
                            507 ;src/main.c:331: void Interrupt() {
                            508 ;	---------------------------------
                            509 ; Function Interrupt
                            510 ; ---------------------------------
   019C                     511 _Interrupt::
                            512 ;src/main.c:334: if (++nInt == 5) {
   019C FD 21r86r00   [14]  513 	ld	iy, #_Interrupt_nInt_1_142
   01A0 FD 34 00      [23]  514 	inc	0 (iy)
   01A3 FD 7E 00      [19]  515 	ld	a, 0 (iy)
   01A6 D6 05         [ 7]  516 	sub	a, #0x05
   01A8 C0            [11]  517 	ret	NZ
                            518 ;src/main.c:335: PlayMusic();
   01A9 CDr8Cr01      [17]  519 	call	_PlayMusic
                            520 ;src/main.c:336: cpct_scanKeyboard_if();
   01AC CDr00r00      [17]  521 	call	_cpct_scanKeyboard_if
                            522 ;src/main.c:337: nInt = 0;
   01AF 21r86r00      [10]  523 	ld	hl,#_Interrupt_nInt_1_142 + 0
   01B2 36 00         [10]  524 	ld	(hl), #0x00
   01B4 C9            [10]  525 	ret
                            526 ;src/main.c:355: void ClearScreen() {
                            527 ;	---------------------------------
                            528 ; Function ClearScreen
                            529 ; ---------------------------------
   01B5                     530 _ClearScreen::
                            531 ;src/main.c:356: cpct_memset(CPCT_VMEM_START, cpct_px2byteM0(1, 1), 16384);
   01B5 21 01 01      [10]  532 	ld	hl, #0x0101
   01B8 E5            [11]  533 	push	hl
   01B9 CDr00r00      [17]  534 	call	_cpct_px2byteM0
   01BC 45            [ 4]  535 	ld	b, l
   01BD 21 00 40      [10]  536 	ld	hl, #0x4000
   01C0 E5            [11]  537 	push	hl
   01C1 C5            [11]  538 	push	bc
   01C2 33            [ 6]  539 	inc	sp
   01C3 26 C0         [ 7]  540 	ld	h, #0xc0
   01C5 E5            [11]  541 	push	hl
   01C6 CDr00r00      [17]  542 	call	_cpct_memset
   01C9 C9            [10]  543 	ret
                            544 ;src/main.c:361: void PrintNumber(u16 num, u8 len, u8 x, u8 y) { 
                            545 ;	---------------------------------
                            546 ; Function PrintNumber
                            547 ; ---------------------------------
   01CA                     548 _PrintNumber::
   01CA DD E5         [15]  549 	push	ix
   01CC DD 21 00 00   [14]  550 	ld	ix,#0
   01D0 DD 39         [15]  551 	add	ix,sp
   01D2 21 F8 FF      [10]  552 	ld	hl, #-8
   01D5 39            [11]  553 	add	hl, sp
                            554 ;src/main.c:367: Itoa(num, txt, 10);    
   01D6 F9            [ 6]  555 	ld	sp, hl
   01D7 23            [ 6]  556 	inc	hl
   01D8 23            [ 6]  557 	inc	hl
   01D9 4D            [ 4]  558 	ld	c, l
   01DA 44            [ 4]  559 	ld	b, h
   01DB 59            [ 4]  560 	ld	e, c
   01DC 50            [ 4]  561 	ld	d, b
   01DD C5            [11]  562 	push	bc
   01DE 21 0A 00      [10]  563 	ld	hl, #0x000a
   01E1 E5            [11]  564 	push	hl
   01E2 D5            [11]  565 	push	de
   01E3 DD 6E 04      [19]  566 	ld	l,4 (ix)
   01E6 DD 66 05      [19]  567 	ld	h,5 (ix)
   01E9 E5            [11]  568 	push	hl
   01EA CDr59r00      [17]  569 	call	_Itoa
   01ED 21 06 00      [10]  570 	ld	hl, #6
   01F0 39            [11]  571 	add	hl, sp
   01F1 F9            [ 6]  572 	ld	sp, hl
   01F2 C1            [10]  573 	pop	bc
                            574 ;src/main.c:368: zeros = len - Strlen(txt);
   01F3 69            [ 4]  575 	ld	l, c
   01F4 60            [ 4]  576 	ld	h, b
   01F5 C5            [11]  577 	push	bc
   01F6 CDr00r00      [17]  578 	call	_Strlen
   01F9 C1            [10]  579 	pop	bc
   01FA DD 7E 06      [19]  580 	ld	a, 6 (ix)
   01FD 95            [ 4]  581 	sub	a, l
   01FE DD 77 F9      [19]  582 	ld	-7 (ix), a
                            583 ;src/main.c:369: nAux = txt[pos];
   0201 0A            [ 7]  584 	ld	a, (bc)
   0202 5F            [ 4]  585 	ld	e, a
                            586 ;src/main.c:371: while(nAux != '\0')	{	
   0203 DD 36 F8 00   [19]  587 	ld	-8 (ix), #0x00
   0207                     588 00101$:
   0207 7B            [ 4]  589 	ld	a, e
   0208 B7            [ 4]  590 	or	a, a
   0209 28 4C         [12]  591 	jr	Z,00104$
                            592 ;src/main.c:372: u8* ptr = cpct_getScreenPtr(CPCT_VMEM_START, (zeros + pos) * FNT_W + x, y);
   020B DD 7E F9      [19]  593 	ld	a, -7 (ix)
   020E DD 86 F8      [19]  594 	add	a, -8 (ix)
   0211 87            [ 4]  595 	add	a, a
   0212 87            [ 4]  596 	add	a, a
   0213 DD 86 07      [19]  597 	add	a, 7 (ix)
   0216 57            [ 4]  598 	ld	d, a
   0217 C5            [11]  599 	push	bc
   0218 D5            [11]  600 	push	de
   0219 DD 7E 08      [19]  601 	ld	a, 8 (ix)
   021C F5            [11]  602 	push	af
   021D 33            [ 6]  603 	inc	sp
   021E D5            [11]  604 	push	de
   021F 33            [ 6]  605 	inc	sp
   0220 21 00 C0      [10]  606 	ld	hl, #0xc000
   0223 E5            [11]  607 	push	hl
   0224 CDr00r00      [17]  608 	call	_cpct_getScreenPtr
   0227 D1            [10]  609 	pop	de
   0228 C1            [10]  610 	pop	bc
                            611 ;src/main.c:373: cpct_drawSprite(g_font[nAux - 48], ptr, FNT_W, FNT_H);
   0229 E5            [11]  612 	push	hl
   022A FD E1         [14]  613 	pop	iy
   022C 16 00         [ 7]  614 	ld	d, #0x00
   022E 7B            [ 4]  615 	ld	a, e
   022F C6 D0         [ 7]  616 	add	a, #0xd0
   0231 6F            [ 4]  617 	ld	l, a
   0232 7A            [ 4]  618 	ld	a, d
   0233 CE FF         [ 7]  619 	adc	a, #0xff
   0235 67            [ 4]  620 	ld	h, a
   0236 29            [11]  621 	add	hl, hl
   0237 29            [11]  622 	add	hl, hl
   0238 29            [11]  623 	add	hl, hl
   0239 29            [11]  624 	add	hl, hl
   023A 29            [11]  625 	add	hl, hl
   023B 11r00r00      [10]  626 	ld	de, #_g_font
   023E 19            [11]  627 	add	hl, de
   023F C5            [11]  628 	push	bc
   0240 11 04 08      [10]  629 	ld	de, #0x0804
   0243 D5            [11]  630 	push	de
   0244 FD E5         [15]  631 	push	iy
   0246 E5            [11]  632 	push	hl
   0247 CDr00r00      [17]  633 	call	_cpct_drawSprite
   024A C1            [10]  634 	pop	bc
                            635 ;src/main.c:374: nAux = txt[++pos];
   024B DD 34 F8      [23]  636 	inc	-8 (ix)
   024E DD 6E F8      [19]  637 	ld	l,-8 (ix)
   0251 26 00         [ 7]  638 	ld	h,#0x00
   0253 09            [11]  639 	add	hl, bc
   0254 5E            [ 7]  640 	ld	e, (hl)
   0255 18 B0         [12]  641 	jr	00101$
   0257                     642 00104$:
   0257 DD F9         [10]  643 	ld	sp, ix
   0259 DD E1         [14]  644 	pop	ix
   025B C9            [10]  645 	ret
                            646 ;src/main.c:380: void PrintText(u8 txt[], u8 x, u8 y) {
                            647 ;	---------------------------------
                            648 ; Function PrintText
                            649 ; ---------------------------------
   025C                     650 _PrintText::
   025C DD E5         [15]  651 	push	ix
   025E DD 21 00 00   [14]  652 	ld	ix,#0
   0262 DD 39         [15]  653 	add	ix,sp
   0264 3B            [ 6]  654 	dec	sp
                            655 ;src/main.c:382: u8 car = txt[pos];
   0265 DD 4E 04      [19]  656 	ld	c,4 (ix)
   0268 DD 46 05      [19]  657 	ld	b,5 (ix)
   026B 0A            [ 7]  658 	ld	a, (bc)
   026C 5F            [ 4]  659 	ld	e, a
                            660 ;src/main.c:384: while(car != '\0') { // "@" = space    ";" = -   "?" = !!
   026D DD 36 FF 00   [19]  661 	ld	-1 (ix), #0x00
   0271                     662 00101$:
   0271 7B            [ 4]  663 	ld	a, e
   0272 B7            [ 4]  664 	or	a, a
   0273 28 49         [12]  665 	jr	Z,00104$
                            666 ;src/main.c:385: u8* ptr = cpct_getScreenPtr(CPCT_VMEM_START, (pos * FNT_W) + x, y);
   0275 DD 7E FF      [19]  667 	ld	a, -1 (ix)
   0278 87            [ 4]  668 	add	a, a
   0279 87            [ 4]  669 	add	a, a
   027A DD 86 06      [19]  670 	add	a, 6 (ix)
   027D 57            [ 4]  671 	ld	d, a
   027E C5            [11]  672 	push	bc
   027F D5            [11]  673 	push	de
   0280 DD 7E 07      [19]  674 	ld	a, 7 (ix)
   0283 F5            [11]  675 	push	af
   0284 33            [ 6]  676 	inc	sp
   0285 D5            [11]  677 	push	de
   0286 33            [ 6]  678 	inc	sp
   0287 21 00 C0      [10]  679 	ld	hl, #0xc000
   028A E5            [11]  680 	push	hl
   028B CDr00r00      [17]  681 	call	_cpct_getScreenPtr
   028E D1            [10]  682 	pop	de
   028F C1            [10]  683 	pop	bc
                            684 ;src/main.c:386: cpct_drawSprite(g_font[car - 48], ptr, FNT_W, FNT_H);
   0290 E5            [11]  685 	push	hl
   0291 FD E1         [14]  686 	pop	iy
   0293 16 00         [ 7]  687 	ld	d, #0x00
   0295 7B            [ 4]  688 	ld	a, e
   0296 C6 D0         [ 7]  689 	add	a, #0xd0
   0298 6F            [ 4]  690 	ld	l, a
   0299 7A            [ 4]  691 	ld	a, d
   029A CE FF         [ 7]  692 	adc	a, #0xff
   029C 67            [ 4]  693 	ld	h, a
   029D 29            [11]  694 	add	hl, hl
   029E 29            [11]  695 	add	hl, hl
   029F 29            [11]  696 	add	hl, hl
   02A0 29            [11]  697 	add	hl, hl
   02A1 29            [11]  698 	add	hl, hl
   02A2 11r00r00      [10]  699 	ld	de, #_g_font
   02A5 19            [11]  700 	add	hl, de
   02A6 C5            [11]  701 	push	bc
   02A7 11 04 08      [10]  702 	ld	de, #0x0804
   02AA D5            [11]  703 	push	de
   02AB FD E5         [15]  704 	push	iy
   02AD E5            [11]  705 	push	hl
   02AE CDr00r00      [17]  706 	call	_cpct_drawSprite
   02B1 C1            [10]  707 	pop	bc
                            708 ;src/main.c:387: car = txt[++pos];
   02B2 DD 34 FF      [23]  709 	inc	-1 (ix)
   02B5 DD 6E FF      [19]  710 	ld	l,-1 (ix)
   02B8 26 00         [ 7]  711 	ld	h,#0x00
   02BA 09            [11]  712 	add	hl, bc
   02BB 5E            [ 7]  713 	ld	e, (hl)
   02BC 18 B3         [12]  714 	jr	00101$
   02BE                     715 00104$:
   02BE 33            [ 6]  716 	inc	sp
   02BF DD E1         [14]  717 	pop	ix
   02C1 C9            [10]  718 	ret
                            719 ;src/main.c:393: void InitScoreboard()
                            720 ;	---------------------------------
                            721 ; Function InitScoreboard
                            722 ; ---------------------------------
   02C2                     723 _InitScoreboard::
                            724 ;src/main.c:395: cpct_drawSprite(g_hud_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 0), G_HUD_0_W, G_HUD_0_H);
   02C2 21 28 28      [10]  725 	ld	hl, #0x2828
   02C5 E5            [11]  726 	push	hl
   02C6 21 00 C0      [10]  727 	ld	hl, #0xc000
   02C9 E5            [11]  728 	push	hl
   02CA 21r00r00      [10]  729 	ld	hl, #_g_hud_0
   02CD E5            [11]  730 	push	hl
   02CE CDr00r00      [17]  731 	call	_cpct_drawSprite
                            732 ;src/main.c:396: cpct_drawSprite(g_hud_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 0), G_HUD_1_W, G_HUD_1_H);
   02D1 21 28 28      [10]  733 	ld	hl, #0x2828
   02D4 E5            [11]  734 	push	hl
   02D5 26 C0         [ 7]  735 	ld	h, #0xc0
   02D7 E5            [11]  736 	push	hl
   02D8 21r00r00      [10]  737 	ld	hl, #_g_hud_1
   02DB E5            [11]  738 	push	hl
   02DC CDr00r00      [17]  739 	call	_cpct_drawSprite
   02DF C9            [10]  740 	ret
                            741 ;src/main.c:401: void RefreshScoreboard() {
                            742 ;	---------------------------------
                            743 ; Function RefreshScoreboard
                            744 ; ---------------------------------
   02E0                     745 _RefreshScoreboard::
                            746 ;src/main.c:402: PrintNumber(score, 5, 21, 0); // current score
   02E0 21 15 00      [10]  747 	ld	hl, #0x0015
   02E3 E5            [11]  748 	push	hl
   02E4 3E 05         [ 7]  749 	ld	a, #0x05
   02E6 F5            [11]  750 	push	af
   02E7 33            [ 6]  751 	inc	sp
   02E8 2Ar00r00      [16]  752 	ld	hl, (_score)
   02EB E5            [11]  753 	push	hl
   02EC CDrCAr01      [17]  754 	call	_PrintNumber
   02EF F1            [10]  755 	pop	af
                            756 ;src/main.c:403: PrintNumber(highScore, 5, 60, 0); // session high score
   02F0 33            [ 6]  757 	inc	sp
   02F1 21 3C 00      [10]  758 	ld	hl,#0x003c
   02F4 E3            [19]  759 	ex	(sp),hl
   02F5 3E 05         [ 7]  760 	ld	a, #0x05
   02F7 F5            [11]  761 	push	af
   02F8 33            [ 6]  762 	inc	sp
   02F9 2Ar02r00      [16]  763 	ld	hl, (_highScore)
   02FC E5            [11]  764 	push	hl
   02FD CDrCAr01      [17]  765 	call	_PrintNumber
   0300 F1            [10]  766 	pop	af
   0301 F1            [10]  767 	pop	af
   0302 33            [ 6]  768 	inc	sp
                            769 ;src/main.c:404: PrintNumber(spr[0].lives, 1, 8, 17); // lives left 
   0303 21r20r00      [10]  770 	ld	hl, #_spr+9
   0306 4E            [ 7]  771 	ld	c, (hl)
   0307 06 00         [ 7]  772 	ld	b, #0x00
   0309 21 08 11      [10]  773 	ld	hl, #0x1108
   030C E5            [11]  774 	push	hl
   030D 3E 01         [ 7]  775 	ld	a, #0x01
   030F F5            [11]  776 	push	af
   0310 33            [ 6]  777 	inc	sp
   0311 C5            [11]  778 	push	bc
   0312 CDrCAr01      [17]  779 	call	_PrintNumber
   0315 F1            [10]  780 	pop	af
   0316 F1            [10]  781 	pop	af
   0317 33            [ 6]  782 	inc	sp
   0318 C9            [10]  783 	ret
                            784 ;src/main.c:409: void PrintMap() {
                            785 ;	---------------------------------
                            786 ; Function PrintMap
                            787 ; ---------------------------------
   0319                     788 _PrintMap::
                            789 ;src/main.c:410: cpct_etm_drawTilemap2x4(MAP_W, MAP_H, cpctm_screenPtr(CPCT_VMEM_START, 0, ORIG_MAP_Y), UNPACKED_MAP_INI);
   0319 21 31 10      [10]  790 	ld	hl, #0x1031
   031C E5            [11]  791 	push	hl
   031D 21 90 C1      [10]  792 	ld	hl, #0xc190
   0320 E5            [11]  793 	push	hl
   0321 21 26 28      [10]  794 	ld	hl, #0x2826
   0324 E5            [11]  795 	push	hl
   0325 2E 00         [ 7]  796 	ld	l, #0x00
   0327 E5            [11]  797 	push	hl
   0328 AF            [ 4]  798 	xor	a, a
   0329 F5            [11]  799 	push	af
   032A 33            [ 6]  800 	inc	sp
   032B CDr00r00      [17]  801 	call	_cpct_etm_drawTileBox2x4
   032E C9            [10]  802 	ret
                            803 ;src/main.c:415: void InitMap() {
                            804 ;	---------------------------------
                            805 ; Function InitMap
                            806 ; ---------------------------------
   032F                     807 _InitMap::
                            808 ;src/main.c:416: SetEnemies();
   032F CDr6Er11      [17]  809 	call	_SetEnemies
                            810 ;src/main.c:417: PrintMap();
   0332 C3r19r03      [10]  811 	jp  _PrintMap
                            812 ;src/main.c:422: void MoveRightMap() {
                            813 ;	---------------------------------
                            814 ; Function MoveRightMap
                            815 ; ---------------------------------
   0335                     816 _MoveRightMap::
                            817 ;src/main.c:423: if (mapNumber < TOTAL_MAPS-1) {
   0335 FD 21r00r00   [14]  818 	ld	iy, #_mapNumber
   0339 FD 7E 00      [19]  819 	ld	a, 0 (iy)
   033C D6 02         [ 7]  820 	sub	a, #0x02
   033E D0            [11]  821 	ret	NC
                            822 ;src/main.c:424: mapNumber++;
   033F FD 34 00      [23]  823 	inc	0 (iy)
                            824 ;src/main.c:425: spr[0].x = spr[0].px = 0;
   0342 21r19r00      [10]  825 	ld	hl, #(_spr + 0x0002)
   0345 36 00         [10]  826 	ld	(hl), #0x00
   0347 21r17r00      [10]  827 	ld	hl, #_spr
   034A 36 00         [10]  828 	ld	(hl), #0x00
                            829 ;src/main.c:426: InitMap();
   034C C3r2Fr03      [10]  830 	jp  _InitMap
                            831 ;src/main.c:432: void MoveLeftMap() {
                            832 ;	---------------------------------
                            833 ; Function MoveLeftMap
                            834 ; ---------------------------------
   034F                     835 _MoveLeftMap::
                            836 ;src/main.c:433: if (mapNumber > 0) {
   034F FD 21r00r00   [14]  837 	ld	iy, #_mapNumber
   0353 FD 7E 00      [19]  838 	ld	a, 0 (iy)
   0356 B7            [ 4]  839 	or	a, a
   0357 C8            [11]  840 	ret	Z
                            841 ;src/main.c:434: mapNumber--;
   0358 FD 35 00      [23]  842 	dec	0 (iy)
                            843 ;src/main.c:435: spr[0].x = spr[0].px = GLOBAL_MAX_X - SPR_W;
   035B 21r19r00      [10]  844 	ld	hl, #(_spr + 0x0002)
   035E 36 48         [10]  845 	ld	(hl), #0x48
   0360 21r17r00      [10]  846 	ld	hl, #_spr
   0363 36 48         [10]  847 	ld	(hl), #0x48
                            848 ;src/main.c:436: InitMap();
   0365 C3r2Fr03      [10]  849 	jp  _InitMap
                            850 ;src/main.c:442: u8* GetTilePtr(u8 x, u8 y) {
                            851 ;	---------------------------------
                            852 ; Function GetTilePtr
                            853 ; ---------------------------------
   0368                     854 _GetTilePtr::
   0368 DD E5         [15]  855 	push	ix
   036A DD 21 00 00   [14]  856 	ld	ix,#0
   036E DD 39         [15]  857 	add	ix,sp
                            858 ;src/main.c:443: return UNPACKED_MAP_INI + (y - ORIG_MAP_Y) / 4 * MAP_W + x / 2;	
   0370 DD 4E 05      [19]  859 	ld	c, 5 (ix)
   0373 06 00         [ 7]  860 	ld	b, #0x00
   0375 79            [ 4]  861 	ld	a, c
   0376 C6 D8         [ 7]  862 	add	a, #0xd8
   0378 5F            [ 4]  863 	ld	e, a
   0379 78            [ 4]  864 	ld	a, b
   037A CE FF         [ 7]  865 	adc	a, #0xff
   037C 57            [ 4]  866 	ld	d, a
   037D 6B            [ 4]  867 	ld	l, e
   037E 62            [ 4]  868 	ld	h, d
   037F CB 7A         [ 8]  869 	bit	7, d
   0381 28 04         [12]  870 	jr	Z,00103$
   0383 21 DB FF      [10]  871 	ld	hl, #0xffdb
   0386 09            [11]  872 	add	hl, bc
   0387                     873 00103$:
   0387 CB 2C         [ 8]  874 	sra	h
   0389 CB 1D         [ 8]  875 	rr	l
   038B CB 2C         [ 8]  876 	sra	h
   038D CB 1D         [ 8]  877 	rr	l
   038F 4D            [ 4]  878 	ld	c, l
   0390 44            [ 4]  879 	ld	b, h
   0391 29            [11]  880 	add	hl, hl
   0392 29            [11]  881 	add	hl, hl
   0393 09            [11]  882 	add	hl, bc
   0394 29            [11]  883 	add	hl, hl
   0395 29            [11]  884 	add	hl, hl
   0396 29            [11]  885 	add	hl, hl
   0397 01 31 10      [10]  886 	ld	bc, #0x1031
   039A 09            [11]  887 	add	hl, bc
   039B DD 4E 04      [19]  888 	ld	c, 4 (ix)
   039E CB 39         [ 8]  889 	srl	c
   03A0 59            [ 4]  890 	ld	e,c
   03A1 16 00         [ 7]  891 	ld	d,#0x00
   03A3 19            [11]  892 	add	hl, de
   03A4 DD E1         [14]  893 	pop	ix
   03A6 C9            [10]  894 	ret
                            895 ;src/main.c:448: u8 OnPlatform(TSpr *pSpr) __z88dk_fastcall {
                            896 ;	---------------------------------
                            897 ; Function OnPlatform
                            898 ; ---------------------------------
   03A7                     899 _OnPlatform::
                            900 ;src/main.c:449: u8* tile = GetTilePtr(pSpr->x + 4, pSpr->y + SPR_H + 1);
   03A7 4D            [ 4]  901 	ld	c,l
   03A8 44            [ 4]  902 	ld	b,h
   03A9 23            [ 6]  903 	inc	hl
   03AA 7E            [ 7]  904 	ld	a, (hl)
   03AB C6 11         [ 7]  905 	add	a, #0x11
   03AD 57            [ 4]  906 	ld	d, a
   03AE 0A            [ 7]  907 	ld	a, (bc)
   03AF C6 04         [ 7]  908 	add	a, #0x04
   03B1 5F            [ 4]  909 	ld	e, a
   03B2 D5            [11]  910 	push	de
   03B3 CDr68r03      [17]  911 	call	_GetTilePtr
   03B6 F1            [10]  912 	pop	af
                            913 ;src/main.c:450: if (*tile == 0)
   03B7 7E            [ 7]  914 	ld	a, (hl)
   03B8 B7            [ 4]  915 	or	a, a
   03B9 20 03         [12]  916 	jr	NZ,00102$
                            917 ;src/main.c:451: return TRUE;	
   03BB 2E 01         [ 7]  918 	ld	l, #0x01
   03BD C9            [10]  919 	ret
   03BE                     920 00102$:
                            921 ;src/main.c:452: return FALSE;
   03BE 2E 00         [ 7]  922 	ld	l, #0x00
   03C0 C9            [10]  923 	ret
                            924 ;src/main.c:457: u8 OnStairs() {
                            925 ;	---------------------------------
                            926 ; Function OnStairs
                            927 ; ---------------------------------
   03C1                     928 _OnStairs::
                            929 ;src/main.c:458: u8* tile = GetTilePtr(spr[0].x + 4, spr[0].y + SPR_H + 1);
   03C1 3Ar18r00      [13]  930 	ld	a, (#_spr + 1)
   03C4 C6 11         [ 7]  931 	add	a, #0x11
   03C6 47            [ 4]  932 	ld	b, a
   03C7 3Ar17r00      [13]  933 	ld	a, (#_spr + 0)
   03CA C6 04         [ 7]  934 	add	a, #0x04
   03CC C5            [11]  935 	push	bc
   03CD 33            [ 6]  936 	inc	sp
   03CE F5            [11]  937 	push	af
   03CF 33            [ 6]  938 	inc	sp
   03D0 CDr68r03      [17]  939 	call	_GetTilePtr
   03D3 F1            [10]  940 	pop	af
                            941 ;src/main.c:459: if (*tile >  47 && *tile <  56)
   03D4 4E            [ 7]  942 	ld	c, (hl)
   03D5 3E 2F         [ 7]  943 	ld	a, #0x2f
   03D7 91            [ 4]  944 	sub	a, c
   03D8 30 08         [12]  945 	jr	NC,00102$
   03DA 79            [ 4]  946 	ld	a, c
   03DB D6 38         [ 7]  947 	sub	a, #0x38
   03DD 30 03         [12]  948 	jr	NC,00102$
                            949 ;src/main.c:460: return TRUE;
   03DF 2E 01         [ 7]  950 	ld	l, #0x01
   03E1 C9            [10]  951 	ret
   03E2                     952 00102$:
                            953 ;src/main.c:461: return FALSE;
   03E2 2E 00         [ 7]  954 	ld	l, #0x00
   03E4 C9            [10]  955 	ret
                            956 ;src/main.c:466: u8 OverMines() {
                            957 ;	---------------------------------
                            958 ; Function OverMines
                            959 ; ---------------------------------
   03E5                     960 _OverMines::
                            961 ;src/main.c:467: u8* tile = GetTilePtr(spr[0].x + 4, spr[0].y + SPR_H);
   03E5 3Ar18r00      [13]  962 	ld	a, (#_spr + 1)
   03E8 C6 10         [ 7]  963 	add	a, #0x10
   03EA 47            [ 4]  964 	ld	b, a
   03EB 3Ar17r00      [13]  965 	ld	a, (#_spr + 0)
   03EE C6 04         [ 7]  966 	add	a, #0x04
   03F0 C5            [11]  967 	push	bc
   03F1 33            [ 6]  968 	inc	sp
   03F2 F5            [11]  969 	push	af
   03F3 33            [ 6]  970 	inc	sp
   03F4 CDr68r03      [17]  971 	call	_GetTilePtr
   03F7 F1            [10]  972 	pop	af
                            973 ;src/main.c:468: if (*tile > 55 && *tile < 58) 
   03F8 4E            [ 7]  974 	ld	c, (hl)
   03F9 3E 37         [ 7]  975 	ld	a, #0x37
   03FB 91            [ 4]  976 	sub	a, c
   03FC 30 08         [12]  977 	jr	NC,00102$
   03FE 79            [ 4]  978 	ld	a, c
   03FF D6 3A         [ 7]  979 	sub	a, #0x3a
   0401 30 03         [12]  980 	jr	NC,00102$
                            981 ;src/main.c:469: return TRUE;	
   0403 2E 01         [ 7]  982 	ld	l, #0x01
   0405 C9            [10]  983 	ret
   0406                     984 00102$:
                            985 ;src/main.c:470: return FALSE;
   0406 2E 00         [ 7]  986 	ld	l, #0x00
   0408 C9            [10]  987 	ret
                            988 ;src/main.c:475: u8 FacingWall(u8 dir) __z88dk_fastcall {
                            989 ;	---------------------------------
                            990 ; Function FacingWall
                            991 ; ---------------------------------
   0409                     992 _FacingWall::
   0409 4D            [ 4]  993 	ld	c, l
                            994 ;src/main.c:477: if (dir == D_right)	{
   040A 79            [ 4]  995 	ld	a, c
   040B D6 03         [ 7]  996 	sub	a, #0x03
   040D 20 19         [12]  997 	jr	NZ,00108$
                            998 ;src/main.c:478: tile = GetTilePtr(spr[0].x + 7, spr[0].y + SPR_H);
   040F 3Ar18r00      [13]  999 	ld	a, (#_spr + 1)
   0412 C6 10         [ 7] 1000 	add	a, #0x10
   0414 57            [ 4] 1001 	ld	d, a
   0415 3Ar17r00      [13] 1002 	ld	a, (#_spr + 0)
   0418 C6 07         [ 7] 1003 	add	a, #0x07
   041A 5F            [ 4] 1004 	ld	e,a
   041B D5            [11] 1005 	push	de
   041C CDr68r03      [17] 1006 	call	_GetTilePtr
   041F F1            [10] 1007 	pop	af
                           1008 ;src/main.c:479: if (*tile == 58) return TRUE;
   0420 7E            [ 7] 1009 	ld	a, (hl)
   0421 D6 3A         [ 7] 1010 	sub	a, #0x3a
   0423 20 1F         [12] 1011 	jr	NZ,00109$
   0425 2E 01         [ 7] 1012 	ld	l, #0x01
   0427 C9            [10] 1013 	ret
   0428                    1014 00108$:
                           1015 ;src/main.c:481: else if (dir == D_left)	{
   0428 79            [ 4] 1016 	ld	a, c
   0429 D6 02         [ 7] 1017 	sub	a, #0x02
   042B 20 17         [12] 1018 	jr	NZ,00109$
                           1019 ;src/main.c:482: tile = GetTilePtr(spr[0].x, spr[0].y + SPR_H);
   042D 3Ar18r00      [13] 1020 	ld	a, (#_spr + 1)
   0430 C6 10         [ 7] 1021 	add	a, #0x10
   0432 57            [ 4] 1022 	ld	d, a
   0433 21r17r00      [10] 1023 	ld	hl, #_spr + 0
   0436 5E            [ 7] 1024 	ld	e, (hl)
   0437 D5            [11] 1025 	push	de
   0438 CDr68r03      [17] 1026 	call	_GetTilePtr
   043B F1            [10] 1027 	pop	af
                           1028 ;src/main.c:483: if (*tile == 59) return TRUE;
   043C 7E            [ 7] 1029 	ld	a, (hl)
   043D D6 3B         [ 7] 1030 	sub	a, #0x3b
   043F 20 03         [12] 1031 	jr	NZ,00109$
   0441 2E 01         [ 7] 1032 	ld	l, #0x01
   0443 C9            [10] 1033 	ret
   0444                    1034 00109$:
                           1035 ;src/main.c:485: return FALSE;
   0444 2E 00         [ 7] 1036 	ld	l, #0x00
   0446 C9            [10] 1037 	ret
                           1038 ;src/main.c:502: cpct_keyID ReturnKeyPressed() {
                           1039 ;	---------------------------------
                           1040 ; Function ReturnKeyPressed
                           1041 ; ---------------------------------
   0447                    1042 _ReturnKeyPressed::
   0447 DD E5         [15] 1043 	push	ix
   0449 DD 21 00 00   [14] 1044 	ld	ix,#0
   044D DD 39         [15] 1045 	add	ix,sp
   044F F5            [11] 1046 	push	af
   0450 3B            [ 6] 1047 	dec	sp
                           1048 ;src/main.c:503: u8 i = 10, *keys = cpct_keyboardStatusBuffer + 9;
   0451 0E 0A         [ 7] 1049 	ld	c, #0x0a
                           1050 ;src/main.c:506: do { cpct_scanKeyboard(); } while ( ! cpct_isAnyKeyPressed() );
   0453                    1051 00101$:
   0453 C5            [11] 1052 	push	bc
   0454 CDr00r00      [17] 1053 	call	_cpct_scanKeyboard
   0457 CDr00r00      [17] 1054 	call	_cpct_isAnyKeyPressed
   045A C1            [10] 1055 	pop	bc
   045B 7D            [ 4] 1056 	ld	a, l
   045C B7            [ 4] 1057 	or	a, a
   045D 28 F4         [12] 1058 	jr	Z,00101$
                           1059 ;src/main.c:508: do {
   045F DD 36 FEr09   [19] 1060 	ld	-2 (ix), #<((_cpct_keyboardStatusBuffer + 0x0009))
   0463 DD 36 FFs00   [19] 1061 	ld	-1 (ix), #>((_cpct_keyboardStatusBuffer + 0x0009))
   0467 DD 36 FD 0A   [19] 1062 	ld	-3 (ix), #0x0a
   046B                    1063 00106$:
                           1064 ;src/main.c:509: keypressed = *keys ^ 0xFF;
   046B DD 6E FE      [19] 1065 	ld	l,-2 (ix)
   046E DD 66 FF      [19] 1066 	ld	h,-1 (ix)
   0471 7E            [ 7] 1067 	ld	a, (hl)
   0472 EE FF         [ 7] 1068 	xor	a, #0xff
   0474 6F            [ 4] 1069 	ld	l, a
   0475 26 00         [ 7] 1070 	ld	h, #0x00
                           1071 ;src/main.c:510: if (keypressed)
   0477 7C            [ 4] 1072 	ld	a, h
   0478 B5            [ 4] 1073 	or	a,l
   0479 28 09         [12] 1074 	jr	Z,00105$
                           1075 ;src/main.c:511: return (keypressed << 8) + (i - 1); 
   047B 65            [ 4] 1076 	ld	h, l
   047C 2E 00         [ 7] 1077 	ld	l, #0x00
   047E 06 00         [ 7] 1078 	ld	b, #0x00
   0480 0B            [ 6] 1079 	dec	bc
   0481 09            [11] 1080 	add	hl, bc
   0482 18 1C         [12] 1081 	jr	00109$
   0484                    1082 00105$:
                           1083 ;src/main.c:512: keys--;
   0484 DD 7E FE      [19] 1084 	ld	a, -2 (ix)
   0487 C6 FF         [ 7] 1085 	add	a, #0xff
   0489 DD 77 FE      [19] 1086 	ld	-2 (ix), a
   048C DD 7E FF      [19] 1087 	ld	a, -1 (ix)
   048F CE FF         [ 7] 1088 	adc	a, #0xff
   0491 DD 77 FF      [19] 1089 	ld	-1 (ix), a
                           1090 ;src/main.c:513: } while(--i);
   0494 DD 35 FD      [23] 1091 	dec	-3 (ix)
   0497 DD 4E FD      [19] 1092 	ld	c, -3 (ix)
   049A DD 7E FD      [19] 1093 	ld	a, -3 (ix)
   049D B7            [ 4] 1094 	or	a, a
   049E 20 CB         [12] 1095 	jr	NZ,00106$
                           1096 ;src/main.c:514: return keypressed;    
   04A0                    1097 00109$:
   04A0 DD F9         [10] 1098 	ld	sp, ix
   04A2 DD E1         [14] 1099 	pop	ix
   04A4 C9            [10] 1100 	ret
                           1101 ;src/main.c:520: void Wait4Key(cpct_keyID key) __z88dk_fastcall {
                           1102 ;	---------------------------------
                           1103 ; Function Wait4Key
                           1104 ; ---------------------------------
   04A5                    1105 _Wait4Key::
                           1106 ;src/main.c:521: do cpct_scanKeyboard_f();
   04A5                    1107 00101$:
   04A5 E5            [11] 1108 	push	hl
   04A6 CDr00r00      [17] 1109 	call	_cpct_scanKeyboard_f
   04A9 E1            [10] 1110 	pop	hl
                           1111 ;src/main.c:522: while(!cpct_isKeyPressed(key));
   04AA E5            [11] 1112 	push	hl
   04AB CDr00r00      [17] 1113 	call	_cpct_isKeyPressed
   04AE 7D            [ 4] 1114 	ld	a, l
   04AF E1            [10] 1115 	pop	hl
   04B0 B7            [ 4] 1116 	or	a, a
   04B1 28 F2         [12] 1117 	jr	Z,00101$
                           1118 ;src/main.c:523: do cpct_scanKeyboard_f();
   04B3                    1119 00104$:
   04B3 E5            [11] 1120 	push	hl
   04B4 CDr00r00      [17] 1121 	call	_cpct_scanKeyboard_f
   04B7 E1            [10] 1122 	pop	hl
                           1123 ;src/main.c:524: while(cpct_isKeyPressed(key));
   04B8 E5            [11] 1124 	push	hl
   04B9 CDr00r00      [17] 1125 	call	_cpct_isKeyPressed
   04BC 7D            [ 4] 1126 	ld	a, l
   04BD E1            [10] 1127 	pop	hl
   04BE B7            [ 4] 1128 	or	a, a
   04BF 20 F2         [12] 1129 	jr	NZ,00104$
   04C1 C9            [10] 1130 	ret
                           1131 ;src/main.c:529: cpct_keyID RedefineKey(u8 *info) __z88dk_fastcall {
                           1132 ;	---------------------------------
                           1133 ; Function RedefineKey
                           1134 ; ---------------------------------
   04C2                    1135 _RedefineKey::
                           1136 ;src/main.c:531: PrintText(info, 29, 100);  
   04C2 01 1D 64      [10] 1137 	ld	bc, #0x641d
   04C5 C5            [11] 1138 	push	bc
   04C6 E5            [11] 1139 	push	hl
   04C7 CDr5Cr02      [17] 1140 	call	_PrintText
   04CA F1            [10] 1141 	pop	af
   04CB F1            [10] 1142 	pop	af
                           1143 ;src/main.c:532: key = ReturnKeyPressed();
   04CC CDr47r04      [17] 1144 	call	_ReturnKeyPressed
                           1145 ;src/main.c:533: Wait4Key(key);
   04CF E5            [11] 1146 	push	hl
   04D0 CDrA5r04      [17] 1147 	call	_Wait4Key
   04D3 3E 02         [ 7] 1148 	ld	a, #0x02
   04D5 F5            [11] 1149 	push	af
   04D6 33            [ 6] 1150 	inc	sp
   04D7 01 00 00      [10] 1151 	ld	bc, #0x0000
   04DA C5            [11] 1152 	push	bc
   04DB 01 29 00      [10] 1153 	ld	bc, #0x0029
   04DE C5            [11] 1154 	push	bc
   04DF 01 02 0F      [10] 1155 	ld	bc, #0x0f02
   04E2 C5            [11] 1156 	push	bc
   04E3 CDr00r00      [17] 1157 	call	_cpct_akp_SFXPlay
   04E6 21 07 00      [10] 1158 	ld	hl, #7
   04E9 39            [11] 1159 	add	hl, sp
   04EA F9            [ 6] 1160 	ld	sp, hl
   04EB E1            [10] 1161 	pop	hl
                           1162 ;src/main.c:535: return key;    
   04EC C9            [10] 1163 	ret
                           1164 ;src/main.c:552: void PrintObject(u8 ident, u8 x, u8 y) {
                           1165 ;	---------------------------------
                           1166 ; Function PrintObject
                           1167 ; ---------------------------------
   04ED                    1168 _PrintObject::
   04ED DD E5         [15] 1169 	push	ix
   04EF DD 21 00 00   [14] 1170 	ld	ix,#0
   04F3 DD 39         [15] 1171 	add	ix,sp
                           1172 ;src/main.c:554: OBJ_W, OBJ_H, g_maskTable);
                           1173 ;src/main.c:553: cpct_drawSpriteMaskedAlignedTable(g_objects[ident], cpct_getScreenPtr(CPCT_VMEM_START, x, y),
   04F5 DD 66 06      [19] 1174 	ld	h, 6 (ix)
   04F8 DD 6E 05      [19] 1175 	ld	l, 5 (ix)
   04FB E5            [11] 1176 	push	hl
   04FC 21 00 C0      [10] 1177 	ld	hl, #0xc000
   04FF E5            [11] 1178 	push	hl
   0500 CDr00r00      [17] 1179 	call	_cpct_getScreenPtr
   0503 4D            [ 4] 1180 	ld	c, l
   0504 44            [ 4] 1181 	ld	b, h
   0505 DD 5E 04      [19] 1182 	ld	e,4 (ix)
   0508 16 00         [ 7] 1183 	ld	d,#0x00
   050A 6B            [ 4] 1184 	ld	l, e
   050B 62            [ 4] 1185 	ld	h, d
   050C 29            [11] 1186 	add	hl, hl
   050D 19            [11] 1187 	add	hl, de
   050E 29            [11] 1188 	add	hl, hl
   050F 29            [11] 1189 	add	hl, hl
   0510 29            [11] 1190 	add	hl, hl
   0511 29            [11] 1191 	add	hl, hl
   0512 29            [11] 1192 	add	hl, hl
   0513 11r00r00      [10] 1193 	ld	de, #_g_objects
   0516 19            [11] 1194 	add	hl, de
   0517 11r00r01      [10] 1195 	ld	de, #_g_maskTable
   051A D5            [11] 1196 	push	de
   051B 11 06 10      [10] 1197 	ld	de, #0x1006
   051E D5            [11] 1198 	push	de
   051F C5            [11] 1199 	push	bc
   0520 E5            [11] 1200 	push	hl
   0521 CDr00r00      [17] 1201 	call	_cpct_drawSpriteMaskedAlignedTable
   0524 DD E1         [14] 1202 	pop	ix
   0526 C9            [10] 1203 	ret
                           1204 ;src/main.c:559: void DeleteObject(TObj *pObj) __z88dk_fastcall {
                           1205 ;	---------------------------------
                           1206 ; Function DeleteObject
                           1207 ; ---------------------------------
   0527                    1208 _DeleteObject::
   0527 DD E5         [15] 1209 	push	ix
   0529 DD 21 00 00   [14] 1210 	ld	ix,#0
   052D DD 39         [15] 1211 	add	ix,sp
   052F F5            [11] 1212 	push	af
   0530 3B            [ 6] 1213 	dec	sp
                           1214 ;src/main.c:561: 4 + (pObj->x & 1),	4 + (pObj->y & 3 ? 1 : 0),	
   0531 4D            [ 4] 1215 	ld	c,l
   0532 44            [ 4] 1216 	ld	b,h
   0533 23            [ 6] 1217 	inc	hl
   0534 5E            [ 7] 1218 	ld	e, (hl)
   0535 7B            [ 4] 1219 	ld	a, e
   0536 E6 03         [ 7] 1220 	and	a, #0x03
   0538 28 04         [12] 1221 	jr	Z,00103$
   053A 3E 01         [ 7] 1222 	ld	a, #0x01
   053C 18 02         [12] 1223 	jr	00104$
   053E                    1224 00103$:
   053E 3E 00         [ 7] 1225 	ld	a, #0x00
   0540                    1226 00104$:
   0540 C6 04         [ 7] 1227 	add	a, #0x04
   0542 DD 77 FF      [19] 1228 	ld	-1 (ix), a
   0545 0A            [ 7] 1229 	ld	a, (bc)
   0546 4F            [ 4] 1230 	ld	c,a
   0547 E6 01         [ 7] 1231 	and	a, #0x01
   0549 47            [ 4] 1232 	ld	b, a
   054A 04            [ 4] 1233 	inc	b
   054B 04            [ 4] 1234 	inc	b
   054C 04            [ 4] 1235 	inc	b
   054D 04            [ 4] 1236 	inc	b
                           1237 ;src/main.c:560: cpct_etm_drawTileBox2x4(pObj->x / 2, (pObj->y - ORIG_MAP_Y) / 4, 
   054E 16 00         [ 7] 1238 	ld	d, #0x00
   0550 7B            [ 4] 1239 	ld	a, e
   0551 C6 D8         [ 7] 1240 	add	a, #0xd8
   0553 DD 77 FD      [19] 1241 	ld	-3 (ix), a
   0556 7A            [ 4] 1242 	ld	a, d
   0557 CE FF         [ 7] 1243 	adc	a, #0xff
   0559 DD 77 FE      [19] 1244 	ld	-2 (ix), a
   055C E1            [10] 1245 	pop	hl
   055D E5            [11] 1246 	push	hl
   055E DD CB FE 7E   [20] 1247 	bit	7, -2 (ix)
   0562 28 04         [12] 1248 	jr	Z,00105$
   0564 21 DB FF      [10] 1249 	ld	hl, #0xffdb
   0567 19            [11] 1250 	add	hl, de
   0568                    1251 00105$:
   0568 CB 2C         [ 8] 1252 	sra	h
   056A CB 1D         [ 8] 1253 	rr	l
   056C CB 2C         [ 8] 1254 	sra	h
   056E CB 1D         [ 8] 1255 	rr	l
   0570 5D            [ 4] 1256 	ld	e, l
   0571 CB 39         [ 8] 1257 	srl	c
   0573 21 31 10      [10] 1258 	ld	hl, #0x1031
   0576 E5            [11] 1259 	push	hl
   0577 21 90 C1      [10] 1260 	ld	hl, #0xc190
   057A E5            [11] 1261 	push	hl
   057B 3E 28         [ 7] 1262 	ld	a, #0x28
   057D F5            [11] 1263 	push	af
   057E 33            [ 6] 1264 	inc	sp
   057F DD 7E FF      [19] 1265 	ld	a, -1 (ix)
   0582 F5            [11] 1266 	push	af
   0583 33            [ 6] 1267 	inc	sp
   0584 C5            [11] 1268 	push	bc
   0585 33            [ 6] 1269 	inc	sp
   0586 43            [ 4] 1270 	ld	b, e
   0587 C5            [11] 1271 	push	bc
   0588 CDr00r00      [17] 1272 	call	_cpct_etm_drawTileBox2x4
   058B DD F9         [10] 1273 	ld	sp, ix
   058D DD E1         [14] 1274 	pop	ix
   058F C9            [10] 1275 	ret
                           1276 ;src/main.c:567: void DeleteObjectScoreboard() {
                           1277 ;	---------------------------------
                           1278 ; Function DeleteObjectScoreboard
                           1279 ; ---------------------------------
   0590                    1280 _DeleteObjectScoreboard::
                           1281 ;src/main.c:568: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 68, 12), cpct_px2byteM0(1,1), 6, 16);
   0590 21 01 01      [10] 1282 	ld	hl, #0x0101
   0593 E5            [11] 1283 	push	hl
   0594 CDr00r00      [17] 1284 	call	_cpct_px2byteM0
   0597 26 00         [ 7] 1285 	ld	h, #0x00
   0599 01 06 10      [10] 1286 	ld	bc, #0x1006
   059C C5            [11] 1287 	push	bc
   059D E5            [11] 1288 	push	hl
   059E 21 94 E0      [10] 1289 	ld	hl, #0xe094
   05A1 E5            [11] 1290 	push	hl
   05A2 CDr00r00      [17] 1291 	call	_cpct_drawSolidBox
   05A5 C9            [10] 1292 	ret
                           1293 ;src/main.c:573: void ReprintObjects() {
                           1294 ;	---------------------------------
                           1295 ; Function ReprintObjects
                           1296 ; ---------------------------------
   05A6                    1297 _ReprintObjects::
   05A6 DD E5         [15] 1298 	push	ix
   05A8 DD 21 00 00   [14] 1299 	ld	ix,#0
   05AC DD 39         [15] 1300 	add	ix,sp
   05AE F5            [11] 1301 	push	af
                           1302 ;src/main.c:574: ct = 0;
   05AF 21r06r00      [10] 1303 	ld	hl,#_ct + 0
   05B2 36 00         [10] 1304 	ld	(hl), #0x00
                           1305 ;src/main.c:575: while (ct < N_MAX_OBJ) {
   05B4                    1306 00104$:
   05B4 FD 21r06r00   [14] 1307 	ld	iy, #_ct
   05B8 FD 7E 00      [19] 1308 	ld	a, 0 (iy)
   05BB D6 08         [ 7] 1309 	sub	a, #0x08
   05BD 30 38         [12] 1310 	jr	NC,00107$
                           1311 ;src/main.c:576: if (obj[ct].mapNumber == mapNumber && obj[ct].taken == FALSE)
   05BF FD 6E 00      [19] 1312 	ld	l, 0 (iy)
   05C2 26 00         [ 7] 1313 	ld	h, #0x00
   05C4 29            [11] 1314 	add	hl, hl
   05C5 29            [11] 1315 	add	hl, hl
   05C6 01r63r00      [10] 1316 	ld	bc,#_obj
   05C9 09            [11] 1317 	add	hl,bc
   05CA E3            [19] 1318 	ex	(sp), hl
   05CB E1            [10] 1319 	pop	hl
   05CC E5            [11] 1320 	push	hl
   05CD 23            [ 6] 1321 	inc	hl
   05CE 23            [ 6] 1322 	inc	hl
   05CF 4E            [ 7] 1323 	ld	c, (hl)
   05D0 3Ar00r00      [13] 1324 	ld	a,(#_mapNumber + 0)
   05D3 91            [ 4] 1325 	sub	a, c
   05D4 20 1B         [12] 1326 	jr	NZ,00102$
   05D6 E1            [10] 1327 	pop	hl
   05D7 E5            [11] 1328 	push	hl
   05D8 23            [ 6] 1329 	inc	hl
   05D9 23            [ 6] 1330 	inc	hl
   05DA 23            [ 6] 1331 	inc	hl
   05DB 7E            [ 7] 1332 	ld	a, (hl)
   05DC B7            [ 4] 1333 	or	a, a
   05DD 20 12         [12] 1334 	jr	NZ,00102$
                           1335 ;src/main.c:577: PrintObject(ct, obj[ct].x, obj[ct].y);
   05DF E1            [10] 1336 	pop	hl
   05E0 E5            [11] 1337 	push	hl
   05E1 23            [ 6] 1338 	inc	hl
   05E2 46            [ 7] 1339 	ld	b, (hl)
   05E3 E1            [10] 1340 	pop	hl
   05E4 E5            [11] 1341 	push	hl
   05E5 4E            [ 7] 1342 	ld	c, (hl)
   05E6 C5            [11] 1343 	push	bc
   05E7 3Ar06r00      [13] 1344 	ld	a, (_ct)
   05EA F5            [11] 1345 	push	af
   05EB 33            [ 6] 1346 	inc	sp
   05EC CDrEDr04      [17] 1347 	call	_PrintObject
   05EF F1            [10] 1348 	pop	af
   05F0 33            [ 6] 1349 	inc	sp
   05F1                    1350 00102$:
                           1351 ;src/main.c:578: ct++;
   05F1 21r06r00      [10] 1352 	ld	hl, #_ct+0
   05F4 34            [11] 1353 	inc	(hl)
   05F5 18 BD         [12] 1354 	jr	00104$
   05F7                    1355 00107$:
   05F7 DD F9         [10] 1356 	ld	sp, ix
   05F9 DD E1         [14] 1357 	pop	ix
   05FB C9            [10] 1358 	ret
                           1359 ;src/main.c:584: void CheckObjects() {
                           1360 ;	---------------------------------
                           1361 ; Function CheckObjects
                           1362 ; ---------------------------------
   05FC                    1363 _CheckObjects::
   05FC DD E5         [15] 1364 	push	ix
   05FE DD 21 00 00   [14] 1365 	ld	ix,#0
   0602 DD 39         [15] 1366 	add	ix,sp
   0604 F5            [11] 1367 	push	af
                           1368 ;src/main.c:585: ct = 0;
   0605 21r06r00      [10] 1369 	ld	hl,#_ct + 0
   0608 36 00         [10] 1370 	ld	(hl), #0x00
                           1371 ;src/main.c:586: Wait4Key(ctlDown);
   060A 2Ar09r00      [16] 1372 	ld	hl, (_ctlDown)
   060D CDrA5r04      [17] 1373 	call	_Wait4Key
                           1374 ;src/main.c:587: while (ct < N_MAX_OBJ) {
   0610                    1375 00120$:
   0610 FD 21r06r00   [14] 1376 	ld	iy, #_ct
   0614 FD 7E 00      [19] 1377 	ld	a, 0 (iy)
   0617 D6 08         [ 7] 1378 	sub	a, #0x08
   0619 D2rB4r07      [10] 1379 	jp	NC, 00123$
                           1380 ;src/main.c:588: if (obj[ct].mapNumber == mapNumber) { // if the object is on the screen ...
   061C FD 6E 00      [19] 1381 	ld	l, 0 (iy)
   061F 26 00         [ 7] 1382 	ld	h, #0x00
   0621 29            [11] 1383 	add	hl, hl
   0622 29            [11] 1384 	add	hl, hl
   0623 01r63r00      [10] 1385 	ld	bc,#_obj
   0626 09            [11] 1386 	add	hl,bc
   0627 E3            [19] 1387 	ex	(sp), hl
   0628 E1            [10] 1388 	pop	hl
   0629 E5            [11] 1389 	push	hl
   062A 23            [ 6] 1390 	inc	hl
   062B 23            [ 6] 1391 	inc	hl
   062C 4E            [ 7] 1392 	ld	c, (hl)
   062D 3Ar00r00      [13] 1393 	ld	a,(#_mapNumber + 0)
   0630 91            [ 4] 1394 	sub	a, c
   0631 C2rADr07      [10] 1395 	jp	NZ,00119$
                           1396 ;src/main.c:590: if (spr[0].x >= obj[ct].x - 3 && spr[0].x <= obj[ct].x + 3 &&	
   0634 21r17r00      [10] 1397 	ld	hl, #_spr + 0
   0637 4E            [ 7] 1398 	ld	c, (hl)
   0638 E1            [10] 1399 	pop	hl
   0639 E5            [11] 1400 	push	hl
   063A 5E            [ 7] 1401 	ld	e, (hl)
   063B 16 00         [ 7] 1402 	ld	d, #0x00
   063D 7B            [ 4] 1403 	ld	a, e
   063E C6 FD         [ 7] 1404 	add	a, #0xfd
   0640 6F            [ 4] 1405 	ld	l, a
   0641 7A            [ 4] 1406 	ld	a, d
   0642 CE FF         [ 7] 1407 	adc	a, #0xff
   0644 67            [ 4] 1408 	ld	h, a
   0645 06 00         [ 7] 1409 	ld	b, #0x00
   0647 79            [ 4] 1410 	ld	a, c
   0648 95            [ 4] 1411 	sub	a, l
   0649 78            [ 4] 1412 	ld	a, b
   064A 9C            [ 4] 1413 	sbc	a, h
   064B E2r50r06      [10] 1414 	jp	PO, 00175$
   064E EE 80         [ 7] 1415 	xor	a, #0x80
   0650                    1416 00175$:
   0650 FArADr07      [10] 1417 	jp	M, 00119$
   0653 13            [ 6] 1418 	inc	de
   0654 13            [ 6] 1419 	inc	de
   0655 13            [ 6] 1420 	inc	de
   0656 6A            [ 4] 1421 	ld	l, d
   0657 7B            [ 4] 1422 	ld	a, e
   0658 91            [ 4] 1423 	sub	a, c
   0659 7D            [ 4] 1424 	ld	a, l
   065A 98            [ 4] 1425 	sbc	a, b
   065B E2r60r06      [10] 1426 	jp	PO, 00176$
   065E EE 80         [ 7] 1427 	xor	a, #0x80
   0660                    1428 00176$:
   0660 FArADr07      [10] 1429 	jp	M, 00119$
                           1430 ;src/main.c:591: spr[0].y >= obj[ct].y - 4 && spr[0].y <= obj[ct].y + 4) {
   0663 21r18r00      [10] 1431 	ld	hl, #_spr + 1
   0666 4E            [ 7] 1432 	ld	c, (hl)
   0667 E1            [10] 1433 	pop	hl
   0668 E5            [11] 1434 	push	hl
   0669 23            [ 6] 1435 	inc	hl
   066A 5E            [ 7] 1436 	ld	e, (hl)
   066B 16 00         [ 7] 1437 	ld	d, #0x00
   066D 7B            [ 4] 1438 	ld	a, e
   066E C6 FC         [ 7] 1439 	add	a, #0xfc
   0670 6F            [ 4] 1440 	ld	l, a
   0671 7A            [ 4] 1441 	ld	a, d
   0672 CE FF         [ 7] 1442 	adc	a, #0xff
   0674 47            [ 4] 1443 	ld	b, a
   0675 26 00         [ 7] 1444 	ld	h, #0x00
   0677 79            [ 4] 1445 	ld	a, c
   0678 95            [ 4] 1446 	sub	a, l
   0679 7C            [ 4] 1447 	ld	a, h
   067A 98            [ 4] 1448 	sbc	a, b
   067B E2r80r06      [10] 1449 	jp	PO, 00177$
   067E EE 80         [ 7] 1450 	xor	a, #0x80
   0680                    1451 00177$:
   0680 FArADr07      [10] 1452 	jp	M, 00119$
   0683 13            [ 6] 1453 	inc	de
   0684 13            [ 6] 1454 	inc	de
   0685 13            [ 6] 1455 	inc	de
   0686 13            [ 6] 1456 	inc	de
   0687 7B            [ 4] 1457 	ld	a, e
   0688 91            [ 4] 1458 	sub	a, c
   0689 7A            [ 4] 1459 	ld	a, d
   068A 9C            [ 4] 1460 	sbc	a, h
   068B E2r90r06      [10] 1461 	jp	PO, 00178$
   068E EE 80         [ 7] 1462 	xor	a, #0x80
   0690                    1463 00178$:
   0690 FArADr07      [10] 1464 	jp	M, 00119$
                           1465 ;src/main.c:592: if (ct > 5) { // first aid kit					
   0693 3E 05         [ 7] 1466 	ld	a, #0x05
   0695 FD 21r06r00   [14] 1467 	ld	iy, #_ct
   0699 FD 96 00      [19] 1468 	sub	a, 0 (iy)
   069C 30 56         [12] 1469 	jr	NC,00111$
                           1470 ;src/main.c:593: if (obj[ct].taken == FALSE) {
   069E E1            [10] 1471 	pop	hl
   069F E5            [11] 1472 	push	hl
   06A0 23            [ 6] 1473 	inc	hl
   06A1 23            [ 6] 1474 	inc	hl
   06A2 23            [ 6] 1475 	inc	hl
   06A3 7E            [ 7] 1476 	ld	a, (hl)
   06A4 B7            [ 4] 1477 	or	a, a
   06A5 C2rA8r07      [10] 1478 	jp	NZ, 00112$
                           1479 ;src/main.c:594: cpct_akp_SFXPlay (6, 12, 41, 0, 0, AY_CHANNEL_A);
   06A8 3E 01         [ 7] 1480 	ld	a, #0x01
   06AA F5            [11] 1481 	push	af
   06AB 33            [ 6] 1482 	inc	sp
   06AC 21 00 00      [10] 1483 	ld	hl, #0x0000
   06AF E5            [11] 1484 	push	hl
   06B0 2E 29         [ 7] 1485 	ld	l, #0x29
   06B2 E5            [11] 1486 	push	hl
   06B3 21 06 0C      [10] 1487 	ld	hl, #0x0c06
   06B6 E5            [11] 1488 	push	hl
   06B7 CDr00r00      [17] 1489 	call	_cpct_akp_SFXPlay
   06BA 21 07 00      [10] 1490 	ld	hl, #7
   06BD 39            [11] 1491 	add	hl, sp
   06BE F9            [ 6] 1492 	ld	sp, hl
                           1493 ;src/main.c:595: if (ct == 6) spr[0].lives = 9; // first aid kit
   06BF 3Ar06r00      [13] 1494 	ld	a,(#_ct + 0)
   06C2 D6 06         [ 7] 1495 	sub	a, #0x06
   06C4 20 05         [12] 1496 	jr	NZ,00102$
   06C6 21r20r00      [10] 1497 	ld	hl, #(_spr + 0x0009)
   06C9 36 09         [10] 1498 	ld	(hl), #0x09
   06CB                    1499 00102$:
                           1500 ;src/main.c:596: DeleteObject(&obj[ct]); 
   06CB FD 21r06r00   [14] 1501 	ld	iy, #_ct
   06CF FD 6E 00      [19] 1502 	ld	l, 0 (iy)
   06D2 26 00         [ 7] 1503 	ld	h, #0x00
   06D4 29            [11] 1504 	add	hl, hl
   06D5 29            [11] 1505 	add	hl, hl
   06D6 11r63r00      [10] 1506 	ld	de, #_obj
   06D9 19            [11] 1507 	add	hl, de
   06DA CDr27r05      [17] 1508 	call	_DeleteObject
                           1509 ;src/main.c:598: obj[ct].taken = TRUE;
   06DD FD 21r06r00   [14] 1510 	ld	iy, #_ct
   06E1 FD 6E 00      [19] 1511 	ld	l, 0 (iy)
   06E4 26 00         [ 7] 1512 	ld	h, #0x00
   06E6 29            [11] 1513 	add	hl, hl
   06E7 29            [11] 1514 	add	hl, hl
   06E8 11r63r00      [10] 1515 	ld	de, #_obj
   06EB 19            [11] 1516 	add	hl, de
   06EC 23            [ 6] 1517 	inc	hl
   06ED 23            [ 6] 1518 	inc	hl
   06EE 23            [ 6] 1519 	inc	hl
   06EF 36 01         [10] 1520 	ld	(hl), #0x01
   06F1 C3rA8r07      [10] 1521 	jp	00112$
   06F4                    1522 00111$:
                           1523 ;src/main.c:602: else if (spr[0].object != ct) {
   06F4 21r23r00      [10] 1524 	ld	hl, #(_spr + 0x000c) + 0
   06F7 4E            [ 7] 1525 	ld	c, (hl)
   06F8 3Ar06r00      [13] 1526 	ld	a,(#_ct + 0)
   06FB 91            [ 4] 1527 	sub	a, c
   06FC 28 57         [12] 1528 	jr	Z,00108$
                           1529 ;src/main.c:604: if (spr[0].object == 255) {	
   06FE 0C            [ 4] 1530 	inc	c
   06FF C2rA8r07      [10] 1531 	jp	NZ,00112$
                           1532 ;src/main.c:605: cpct_akp_SFXPlay(8, 15, 45, 0, 0, AY_CHANNEL_A);
   0702 3E 01         [ 7] 1533 	ld	a, #0x01
   0704 F5            [11] 1534 	push	af
   0705 33            [ 6] 1535 	inc	sp
   0706 21 00 00      [10] 1536 	ld	hl, #0x0000
   0709 E5            [11] 1537 	push	hl
   070A 2E 2D         [ 7] 1538 	ld	l, #0x2d
   070C E5            [11] 1539 	push	hl
   070D 21 08 0F      [10] 1540 	ld	hl, #0x0f08
   0710 E5            [11] 1541 	push	hl
   0711 CDr00r00      [17] 1542 	call	_cpct_akp_SFXPlay
   0714 21 07 00      [10] 1543 	ld	hl, #7
   0717 39            [11] 1544 	add	hl, sp
   0718 F9            [ 6] 1545 	ld	sp, hl
                           1546 ;src/main.c:606: spr[0].object = ct;
   0719 21r23r00      [10] 1547 	ld	hl, #(_spr + 0x000c)
   071C FD 21r06r00   [14] 1548 	ld	iy, #_ct
   0720 FD 7E 00      [19] 1549 	ld	a, 0 (iy)
   0723 77            [ 7] 1550 	ld	(hl), a
                           1551 ;src/main.c:607: obj[ct].taken = TRUE;
   0724 FD 6E 00      [19] 1552 	ld	l, 0 (iy)
   0727 26 00         [ 7] 1553 	ld	h, #0x00
   0729 29            [11] 1554 	add	hl, hl
   072A 29            [11] 1555 	add	hl, hl
   072B 11r63r00      [10] 1556 	ld	de, #_obj
   072E 19            [11] 1557 	add	hl, de
   072F 23            [ 6] 1558 	inc	hl
   0730 23            [ 6] 1559 	inc	hl
   0731 23            [ 6] 1560 	inc	hl
   0732 36 01         [10] 1561 	ld	(hl), #0x01
                           1562 ;src/main.c:608: DeleteObject(&obj[ct]); 
   0734 FD 6E 00      [19] 1563 	ld	l, 0 (iy)
   0737 26 00         [ 7] 1564 	ld	h, #0x00
   0739 29            [11] 1565 	add	hl, hl
   073A 29            [11] 1566 	add	hl, hl
   073B 11r63r00      [10] 1567 	ld	de, #_obj
   073E 19            [11] 1568 	add	hl, de
   073F CDr27r05      [17] 1569 	call	_DeleteObject
                           1570 ;src/main.c:610: DeleteObjectScoreboard(); PrintObject(ct, 68, 12); 
   0742 CDr90r05      [17] 1571 	call	_DeleteObjectScoreboard
   0745 21 44 0C      [10] 1572 	ld	hl, #0x0c44
   0748 E5            [11] 1573 	push	hl
   0749 3Ar06r00      [13] 1574 	ld	a, (_ct)
   074C F5            [11] 1575 	push	af
   074D 33            [ 6] 1576 	inc	sp
   074E CDrEDr04      [17] 1577 	call	_PrintObject
   0751 F1            [10] 1578 	pop	af
   0752 33            [ 6] 1579 	inc	sp
   0753 18 53         [12] 1580 	jr	00112$
   0755                    1581 00108$:
                           1582 ;src/main.c:614: cpct_akp_SFXPlay(7, 15, 45, 0, 0, AY_CHANNEL_A);
   0755 3E 01         [ 7] 1583 	ld	a, #0x01
   0757 F5            [11] 1584 	push	af
   0758 33            [ 6] 1585 	inc	sp
   0759 21 00 00      [10] 1586 	ld	hl, #0x0000
   075C E5            [11] 1587 	push	hl
   075D 2E 2D         [ 7] 1588 	ld	l, #0x2d
   075F E5            [11] 1589 	push	hl
   0760 21 07 0F      [10] 1590 	ld	hl, #0x0f07
   0763 E5            [11] 1591 	push	hl
   0764 CDr00r00      [17] 1592 	call	_cpct_akp_SFXPlay
   0767 21 07 00      [10] 1593 	ld	hl, #7
   076A 39            [11] 1594 	add	hl, sp
   076B F9            [ 6] 1595 	ld	sp, hl
                           1596 ;src/main.c:616: PrintObject(ct, obj[ct].x, obj[ct].y);	
   076C FD 21r06r00   [14] 1597 	ld	iy, #_ct
   0770 FD 6E 00      [19] 1598 	ld	l, 0 (iy)
   0773 26 00         [ 7] 1599 	ld	h, #0x00
   0775 29            [11] 1600 	add	hl, hl
   0776 29            [11] 1601 	add	hl, hl
   0777 01r63r00      [10] 1602 	ld	bc,#_obj
   077A 09            [11] 1603 	add	hl,bc
   077B 4D            [ 4] 1604 	ld	c,l
   077C 44            [ 4] 1605 	ld	b,h
   077D 23            [ 6] 1606 	inc	hl
   077E 56            [ 7] 1607 	ld	d, (hl)
   077F 0A            [ 7] 1608 	ld	a, (bc)
   0780 5F            [ 4] 1609 	ld	e,a
   0781 D5            [11] 1610 	push	de
   0782 3Ar06r00      [13] 1611 	ld	a, (_ct)
   0785 F5            [11] 1612 	push	af
   0786 33            [ 6] 1613 	inc	sp
   0787 CDrEDr04      [17] 1614 	call	_PrintObject
   078A F1            [10] 1615 	pop	af
   078B 33            [ 6] 1616 	inc	sp
                           1617 ;src/main.c:617: DeleteObjectScoreboard();
   078C CDr90r05      [17] 1618 	call	_DeleteObjectScoreboard
                           1619 ;src/main.c:618: spr[0].object = 255;
   078F 21r23r00      [10] 1620 	ld	hl, #(_spr + 0x000c)
   0792 36 FF         [10] 1621 	ld	(hl), #0xff
                           1622 ;src/main.c:619: obj[ct].taken = FALSE;
   0794 FD 21r06r00   [14] 1623 	ld	iy, #_ct
   0798 FD 6E 00      [19] 1624 	ld	l, 0 (iy)
   079B 26 00         [ 7] 1625 	ld	h, #0x00
   079D 29            [11] 1626 	add	hl, hl
   079E 29            [11] 1627 	add	hl, hl
   079F 11r63r00      [10] 1628 	ld	de, #_obj
   07A2 19            [11] 1629 	add	hl, de
   07A3 23            [ 6] 1630 	inc	hl
   07A4 23            [ 6] 1631 	inc	hl
   07A5 23            [ 6] 1632 	inc	hl
   07A6 36 00         [10] 1633 	ld	(hl), #0x00
   07A8                    1634 00112$:
                           1635 ;src/main.c:622: ct = N_MAX_OBJ;
   07A8 21r06r00      [10] 1636 	ld	hl,#_ct + 0
   07AB 36 08         [10] 1637 	ld	(hl), #0x08
   07AD                    1638 00119$:
                           1639 ;src/main.c:625: ct++;
   07AD 21r06r00      [10] 1640 	ld	hl, #_ct+0
   07B0 34            [11] 1641 	inc	(hl)
   07B1 C3r10r06      [10] 1642 	jp	00120$
   07B4                    1643 00123$:
   07B4 DD F9         [10] 1644 	ld	sp, ix
   07B6 DD E1         [14] 1645 	pop	ix
   07B8 C9            [10] 1646 	ret
                           1647 ;src/main.c:640: void InitObjects() {
                           1648 ;	---------------------------------
                           1649 ; Function InitObjects
                           1650 ; ---------------------------------
   07B9                    1651 _InitObjects::
                           1652 ;src/main.c:632: obj[objNum].x = x; 
   07B9 21r63r00      [10] 1653 	ld	hl, #_obj
   07BC 36 18         [10] 1654 	ld	(hl), #0x18
                           1655 ;src/main.c:633: obj[objNum].y = y;
   07BE 21r64r00      [10] 1656 	ld	hl, #(_obj + 0x0001)
   07C1 36 60         [10] 1657 	ld	(hl), #0x60
                           1658 ;src/main.c:634: obj[objNum].mapNumber = mapNum;
   07C3 21r65r00      [10] 1659 	ld	hl, #(_obj + 0x0002)
   07C6 36 00         [10] 1660 	ld	(hl), #0x00
                           1661 ;src/main.c:632: obj[objNum].x = x; 
   07C8 21r67r00      [10] 1662 	ld	hl, #(_obj + 0x0004)
   07CB 36 00         [10] 1663 	ld	(hl), #0x00
                           1664 ;src/main.c:633: obj[objNum].y = y;
   07CD 21r68r00      [10] 1665 	ld	hl, #(_obj + 0x0005)
   07D0 36 00         [10] 1666 	ld	(hl), #0x00
                           1667 ;src/main.c:634: obj[objNum].mapNumber = mapNum;
   07D2 21r69r00      [10] 1668 	ld	hl, #(_obj + 0x0006)
   07D5 36 FF         [10] 1669 	ld	(hl), #0xff
                           1670 ;src/main.c:632: obj[objNum].x = x; 
   07D7 21r6Br00      [10] 1671 	ld	hl, #(_obj + 0x0008)
   07DA 36 2C         [10] 1672 	ld	(hl), #0x2c
                           1673 ;src/main.c:633: obj[objNum].y = y;
   07DC 21r6Cr00      [10] 1674 	ld	hl, #(_obj + 0x0009)
   07DF 36 40         [10] 1675 	ld	(hl), #0x40
                           1676 ;src/main.c:634: obj[objNum].mapNumber = mapNum;
   07E1 21r6Dr00      [10] 1677 	ld	hl, #(_obj + 0x000a)
   07E4 36 02         [10] 1678 	ld	(hl), #0x02
                           1679 ;src/main.c:632: obj[objNum].x = x; 
   07E6 21r6Fr00      [10] 1680 	ld	hl, #(_obj + 0x000c)
   07E9 36 08         [10] 1681 	ld	(hl), #0x08
                           1682 ;src/main.c:633: obj[objNum].y = y;
   07EB 21r70r00      [10] 1683 	ld	hl, #(_obj + 0x000d)
   07EE 36 3C         [10] 1684 	ld	(hl), #0x3c
                           1685 ;src/main.c:634: obj[objNum].mapNumber = mapNum;
   07F0 21r71r00      [10] 1686 	ld	hl, #(_obj + 0x000e)
   07F3 36 01         [10] 1687 	ld	(hl), #0x01
                           1688 ;src/main.c:632: obj[objNum].x = x; 
   07F5 21r73r00      [10] 1689 	ld	hl, #(_obj + 0x0010)
   07F8 36 00         [10] 1690 	ld	(hl), #0x00
                           1691 ;src/main.c:633: obj[objNum].y = y;
   07FA 21r74r00      [10] 1692 	ld	hl, #(_obj + 0x0011)
   07FD 36 00         [10] 1693 	ld	(hl), #0x00
                           1694 ;src/main.c:634: obj[objNum].mapNumber = mapNum;
   07FF 21r75r00      [10] 1695 	ld	hl, #(_obj + 0x0012)
   0802 36 FF         [10] 1696 	ld	(hl), #0xff
                           1697 ;src/main.c:632: obj[objNum].x = x; 
   0804 21r77r00      [10] 1698 	ld	hl, #(_obj + 0x0014)
   0807 36 00         [10] 1699 	ld	(hl), #0x00
                           1700 ;src/main.c:633: obj[objNum].y = y;
   0809 21r78r00      [10] 1701 	ld	hl, #(_obj + 0x0015)
   080C 36 00         [10] 1702 	ld	(hl), #0x00
                           1703 ;src/main.c:634: obj[objNum].mapNumber = mapNum;
   080E 21r79r00      [10] 1704 	ld	hl, #(_obj + 0x0016)
   0811 36 FF         [10] 1705 	ld	(hl), #0xff
                           1706 ;src/main.c:632: obj[objNum].x = x; 
   0813 21r7Br00      [10] 1707 	ld	hl, #(_obj + 0x0018)
   0816 36 42         [10] 1708 	ld	(hl), #0x42
                           1709 ;src/main.c:633: obj[objNum].y = y;
   0818 21r7Cr00      [10] 1710 	ld	hl, #(_obj + 0x0019)
   081B 36 80         [10] 1711 	ld	(hl), #0x80
                           1712 ;src/main.c:634: obj[objNum].mapNumber = mapNum;
   081D 21r7Dr00      [10] 1713 	ld	hl, #(_obj + 0x001a)
   0820 36 01         [10] 1714 	ld	(hl), #0x01
                           1715 ;src/main.c:632: obj[objNum].x = x; 
   0822 21r7Fr00      [10] 1716 	ld	hl, #(_obj + 0x001c)
   0825 36 44         [10] 1717 	ld	(hl), #0x44
                           1718 ;src/main.c:633: obj[objNum].y = y;
   0827 21r80r00      [10] 1719 	ld	hl, #(_obj + 0x001d)
   082A 36 40         [10] 1720 	ld	(hl), #0x40
                           1721 ;src/main.c:634: obj[objNum].mapNumber = mapNum;
   082C 21r81r00      [10] 1722 	ld	hl, #(_obj + 0x001e)
   082F 36 02         [10] 1723 	ld	(hl), #0x02
                           1724 ;src/main.c:649: SetObjectParams(7, 68,  64,   2); // Ammunition
   0831 C9            [10] 1725 	ret
                           1726 ;src/main.c:664: void PrintSprite(TSpr *pSpr) __z88dk_fastcall {
                           1727 ;	---------------------------------
                           1728 ; Function PrintSprite
                           1729 ; ---------------------------------
   0832                    1730 _PrintSprite::
                           1731 ;src/main.c:667: SPR_W, SPR_H, g_maskTable);
                           1732 ;src/main.c:666: cpct_getScreenPtr(CPCT_VMEM_START, pSpr->x, pSpr->y), 
   0832 4D            [ 4] 1733 	ld	c,l
   0833 44            [ 4] 1734 	ld	b,h
   0834 23            [ 6] 1735 	inc	hl
   0835 56            [ 7] 1736 	ld	d, (hl)
   0836 0A            [ 7] 1737 	ld	a, (bc)
   0837 C5            [11] 1738 	push	bc
   0838 5F            [ 4] 1739 	ld	e, a
   0839 D5            [11] 1740 	push	de
   083A 21 00 C0      [10] 1741 	ld	hl, #0xc000
   083D E5            [11] 1742 	push	hl
   083E CDr00r00      [17] 1743 	call	_cpct_getScreenPtr
   0841 EB            [ 4] 1744 	ex	de,hl
   0842 FD E1         [14] 1745 	pop	iy
   0844 FD 6E 05      [19] 1746 	ld	l, 5 (iy)
   0847 FD 66 06      [19] 1747 	ld	h, 6 (iy)
   084A 23            [ 6] 1748 	inc	hl
   084B 4E            [ 7] 1749 	ld	c, (hl)
   084C 23            [ 6] 1750 	inc	hl
   084D 46            [ 7] 1751 	ld	b, (hl)
   084E 21r00r01      [10] 1752 	ld	hl, #_g_maskTable
   0851 E5            [11] 1753 	push	hl
   0852 21 08 10      [10] 1754 	ld	hl, #0x1008
   0855 E5            [11] 1755 	push	hl
   0856 D5            [11] 1756 	push	de
   0857 C5            [11] 1757 	push	bc
   0858 CDr00r00      [17] 1758 	call	_cpct_drawSpriteMaskedAlignedTable
   085B C9            [10] 1759 	ret
                           1760 ;src/main.c:672: void DeleteSprite(TSpr *pSpr) __z88dk_fastcall {
                           1761 ;	---------------------------------
                           1762 ; Function DeleteSprite
                           1763 ; ---------------------------------
   085C                    1764 _DeleteSprite::
   085C DD E5         [15] 1765 	push	ix
   085E DD 21 00 00   [14] 1766 	ld	ix,#0
   0862 DD 39         [15] 1767 	add	ix,sp
   0864 F5            [11] 1768 	push	af
   0865 3B            [ 6] 1769 	dec	sp
                           1770 ;src/main.c:674: 4 + (pSpr->px & 1), 4 + (pSpr->py & 3 ? 1 : 0),	
   0866 4D            [ 4] 1771 	ld	c,l
   0867 54            [ 4] 1772 	ld	d,h
   0868 23            [ 6] 1773 	inc	hl
   0869 23            [ 6] 1774 	inc	hl
   086A 23            [ 6] 1775 	inc	hl
   086B 5E            [ 7] 1776 	ld	e, (hl)
   086C 7B            [ 4] 1777 	ld	a, e
   086D E6 03         [ 7] 1778 	and	a, #0x03
   086F 28 04         [12] 1779 	jr	Z,00103$
   0871 06 01         [ 7] 1780 	ld	b, #0x01
   0873 18 02         [12] 1781 	jr	00104$
   0875                    1782 00103$:
   0875 06 00         [ 7] 1783 	ld	b, #0x00
   0877                    1784 00104$:
   0877 04            [ 4] 1785 	inc	b
   0878 04            [ 4] 1786 	inc	b
   0879 04            [ 4] 1787 	inc	b
   087A 04            [ 4] 1788 	inc	b
   087B 69            [ 4] 1789 	ld	l, c
   087C 62            [ 4] 1790 	ld	h, d
   087D 23            [ 6] 1791 	inc	hl
   087E 23            [ 6] 1792 	inc	hl
   087F 4E            [ 7] 1793 	ld	c, (hl)
   0880 79            [ 4] 1794 	ld	a, c
   0881 E6 01         [ 7] 1795 	and	a, #0x01
   0883 C6 04         [ 7] 1796 	add	a, #0x04
   0885 DD 77 FF      [19] 1797 	ld	-1 (ix), a
                           1798 ;src/main.c:673: cpct_etm_drawTileBox2x4(pSpr->px / 2, (pSpr->py - ORIG_MAP_Y) / 4, 
   0888 16 00         [ 7] 1799 	ld	d, #0x00
   088A 7B            [ 4] 1800 	ld	a, e
   088B C6 D8         [ 7] 1801 	add	a, #0xd8
   088D DD 77 FD      [19] 1802 	ld	-3 (ix), a
   0890 7A            [ 4] 1803 	ld	a, d
   0891 CE FF         [ 7] 1804 	adc	a, #0xff
   0893 DD 77 FE      [19] 1805 	ld	-2 (ix), a
   0896 E1            [10] 1806 	pop	hl
   0897 E5            [11] 1807 	push	hl
   0898 DD CB FE 7E   [20] 1808 	bit	7, -2 (ix)
   089C 28 04         [12] 1809 	jr	Z,00105$
   089E 21 DB FF      [10] 1810 	ld	hl, #0xffdb
   08A1 19            [11] 1811 	add	hl, de
   08A2                    1812 00105$:
   08A2 CB 2C         [ 8] 1813 	sra	h
   08A4 CB 1D         [ 8] 1814 	rr	l
   08A6 CB 2C         [ 8] 1815 	sra	h
   08A8 CB 1D         [ 8] 1816 	rr	l
   08AA 5D            [ 4] 1817 	ld	e, l
   08AB CB 39         [ 8] 1818 	srl	c
   08AD 21 31 10      [10] 1819 	ld	hl, #0x1031
   08B0 E5            [11] 1820 	push	hl
   08B1 21 90 C1      [10] 1821 	ld	hl, #0xc190
   08B4 E5            [11] 1822 	push	hl
   08B5 3E 28         [ 7] 1823 	ld	a, #0x28
   08B7 F5            [11] 1824 	push	af
   08B8 33            [ 6] 1825 	inc	sp
   08B9 C5            [11] 1826 	push	bc
   08BA 33            [ 6] 1827 	inc	sp
   08BB DD 56 FF      [19] 1828 	ld	d, -1 (ix)
   08BE D5            [11] 1829 	push	de
   08BF 79            [ 4] 1830 	ld	a, c
   08C0 F5            [11] 1831 	push	af
   08C1 33            [ 6] 1832 	inc	sp
   08C2 CDr00r00      [17] 1833 	call	_cpct_etm_drawTileBox2x4
   08C5 DD F9         [10] 1834 	ld	sp, ix
   08C7 DD E1         [14] 1835 	pop	ix
   08C9 C9            [10] 1836 	ret
                           1837 ;src/main.c:680: void PrintExplosion(TSpr *pSpr, u8 frame) {
                           1838 ;	---------------------------------
                           1839 ; Function PrintExplosion
                           1840 ; ---------------------------------
   08CA                    1841 _PrintExplosion::
   08CA DD E5         [15] 1842 	push	ix
   08CC DD 21 00 00   [14] 1843 	ld	ix,#0
   08D0 DD 39         [15] 1844 	add	ix,sp
                           1845 ;src/main.c:683: SPR_W, SPR_H, g_maskTable);
                           1846 ;src/main.c:682: cpct_getScreenPtr(CPCT_VMEM_START, pSpr->x, pSpr->y), 
   08D2 DD 4E 04      [19] 1847 	ld	c,4 (ix)
   08D5 DD 46 05      [19] 1848 	ld	b,5 (ix)
   08D8 69            [ 4] 1849 	ld	l, c
   08D9 60            [ 4] 1850 	ld	h, b
   08DA 23            [ 6] 1851 	inc	hl
   08DB 56            [ 7] 1852 	ld	d, (hl)
   08DC 0A            [ 7] 1853 	ld	a, (bc)
   08DD 5F            [ 4] 1854 	ld	e,a
   08DE D5            [11] 1855 	push	de
   08DF 21 00 C0      [10] 1856 	ld	hl, #0xc000
   08E2 E5            [11] 1857 	push	hl
   08E3 CDr00r00      [17] 1858 	call	_cpct_getScreenPtr
   08E6 4D            [ 4] 1859 	ld	c, l
   08E7 44            [ 4] 1860 	ld	b, h
                           1861 ;src/main.c:681: cpct_drawSpriteMaskedAlignedTable(g_explosion[frame], 
   08E8 11r00r00      [10] 1862 	ld	de, #_g_explosion+0
   08EB DD 6E 06      [19] 1863 	ld	l, 6 (ix)
   08EE 26 00         [ 7] 1864 	ld	h, #0x00
   08F0 29            [11] 1865 	add	hl, hl
   08F1 29            [11] 1866 	add	hl, hl
   08F2 29            [11] 1867 	add	hl, hl
   08F3 29            [11] 1868 	add	hl, hl
   08F4 29            [11] 1869 	add	hl, hl
   08F5 29            [11] 1870 	add	hl, hl
   08F6 29            [11] 1871 	add	hl, hl
   08F7 19            [11] 1872 	add	hl, de
   08F8 11r00r01      [10] 1873 	ld	de, #_g_maskTable
   08FB D5            [11] 1874 	push	de
   08FC 11 08 10      [10] 1875 	ld	de, #0x1008
   08FF D5            [11] 1876 	push	de
   0900 C5            [11] 1877 	push	bc
   0901 E5            [11] 1878 	push	hl
   0902 CDr00r00      [17] 1879 	call	_cpct_drawSpriteMaskedAlignedTable
   0905 DD E1         [14] 1880 	pop	ix
   0907 C9            [10] 1881 	ret
                           1882 ;src/main.c:688: void SelectSpriteFrame(TSpr *pSpr) __z88dk_fastcall {
                           1883 ;	---------------------------------
                           1884 ; Function SelectSpriteFrame
                           1885 ; ---------------------------------
   0908                    1886 _SelectSpriteFrame::
   0908 DD E5         [15] 1887 	push	ix
   090A DD 21 00 00   [14] 1888 	ld	ix,#0
   090E DD 39         [15] 1889 	add	ix,sp
   0910 3B            [ 6] 1890 	dec	sp
                           1891 ;src/main.c:689: if (ctMainLoop % ANIM_PAUSE == 0) {
   0911 E5            [11] 1892 	push	hl
   0912 3E 03         [ 7] 1893 	ld	a, #0x03
   0914 F5            [11] 1894 	push	af
   0915 33            [ 6] 1895 	inc	sp
   0916 3Ar05r00      [13] 1896 	ld	a, (_ctMainLoop)
   0919 F5            [11] 1897 	push	af
   091A 33            [ 6] 1898 	inc	sp
   091B CDr00r00      [17] 1899 	call	__moduchar
   091E F1            [10] 1900 	pop	af
   091F C1            [10] 1901 	pop	bc
   0920 7D            [ 4] 1902 	ld	a, l
   0921 B7            [ 4] 1903 	or	a, a
   0922 20 59         [12] 1904 	jr	NZ,00109$
                           1905 ;src/main.c:690: if (pSpr->ident == PELUSOID)
   0924 69            [ 4] 1906 	ld	l, c
   0925 60            [ 4] 1907 	ld	h, b
   0926 11 12 00      [10] 1908 	ld	de, #0x0012
   0929 19            [11] 1909 	add	hl, de
   092A 7E            [ 7] 1910 	ld	a, (hl)
   092B DD 77 FF      [19] 1911 	ld	-1 (ix), a
                           1912 ;src/main.c:691: pSpr->frm = anim_pelusoid[pSpr->nFrm / ANIM_PAUSE];
   092E 21 05 00      [10] 1913 	ld	hl, #0x0005
   0931 09            [11] 1914 	add	hl,bc
   0932 EB            [ 4] 1915 	ex	de,hl
   0933 C5            [11] 1916 	push	bc
   0934 FD E1         [14] 1917 	pop	iy
   0936 FD 46 07      [19] 1918 	ld	b, 7 (iy)
   0939 D5            [11] 1919 	push	de
   093A 3E 03         [ 7] 1920 	ld	a, #0x03
   093C F5            [11] 1921 	push	af
   093D 33            [ 6] 1922 	inc	sp
   093E C5            [11] 1923 	push	bc
   093F 33            [ 6] 1924 	inc	sp
   0940 CDr00r00      [17] 1925 	call	__divuchar
   0943 F1            [10] 1926 	pop	af
   0944 D1            [10] 1927 	pop	de
   0945 26 00         [ 7] 1928 	ld	h, #0x00
   0947 29            [11] 1929 	add	hl, hl
                           1930 ;src/main.c:690: if (pSpr->ident == PELUSOID)
   0948 DD 7E FF      [19] 1931 	ld	a, -1 (ix)
   094B 3D            [ 4] 1932 	dec	a
   094C 20 0E         [12] 1933 	jr	NZ,00105$
                           1934 ;src/main.c:691: pSpr->frm = anim_pelusoid[pSpr->nFrm / ANIM_PAUSE];
   094E 01r4Ar00      [10] 1935 	ld	bc, #_anim_pelusoid+0
   0951 09            [11] 1936 	add	hl, bc
   0952 4E            [ 7] 1937 	ld	c, (hl)
   0953 23            [ 6] 1938 	inc	hl
   0954 46            [ 7] 1939 	ld	b, (hl)
   0955 79            [ 4] 1940 	ld	a, c
   0956 12            [ 7] 1941 	ld	(de), a
   0957 13            [ 6] 1942 	inc	de
   0958 78            [ 4] 1943 	ld	a, b
   0959 12            [ 7] 1944 	ld	(de), a
   095A 18 21         [12] 1945 	jr	00109$
   095C                    1946 00105$:
                           1947 ;src/main.c:692: else if (pSpr->ident == ARACNOVIRUS)
   095C DD 7E FF      [19] 1948 	ld	a, -1 (ix)
   095F D6 02         [ 7] 1949 	sub	a, #0x02
   0961 20 0E         [12] 1950 	jr	NZ,00102$
                           1951 ;src/main.c:693: pSpr->frm = anim_aracnovirus[pSpr->nFrm / ANIM_PAUSE];
   0963 01r4Er00      [10] 1952 	ld	bc, #_anim_aracnovirus+0
   0966 09            [11] 1953 	add	hl, bc
   0967 4E            [ 7] 1954 	ld	c, (hl)
   0968 23            [ 6] 1955 	inc	hl
   0969 46            [ 7] 1956 	ld	b, (hl)
   096A 79            [ 4] 1957 	ld	a, c
   096B 12            [ 7] 1958 	ld	(de), a
   096C 13            [ 6] 1959 	inc	de
   096D 78            [ 4] 1960 	ld	a, b
   096E 12            [ 7] 1961 	ld	(de), a
   096F 18 0C         [12] 1962 	jr	00109$
   0971                    1963 00102$:
                           1964 ;src/main.c:695: pSpr->frm = anim_infected[pSpr->nFrm / ANIM_PAUSE];
   0971 01r52r00      [10] 1965 	ld	bc, #_anim_infected+0
   0974 09            [11] 1966 	add	hl, bc
   0975 4E            [ 7] 1967 	ld	c, (hl)
   0976 23            [ 6] 1968 	inc	hl
   0977 46            [ 7] 1969 	ld	b, (hl)
   0978 79            [ 4] 1970 	ld	a, c
   0979 12            [ 7] 1971 	ld	(de), a
   097A 13            [ 6] 1972 	inc	de
   097B 78            [ 4] 1973 	ld	a, b
   097C 12            [ 7] 1974 	ld	(de), a
   097D                    1975 00109$:
   097D 33            [ 6] 1976 	inc	sp
   097E DD E1         [14] 1977 	pop	ix
   0980 C9            [10] 1978 	ret
                           1979 ;src/main.c:701: void EnemyWalkAnim(TSpr *pSpr) __z88dk_fastcall {
                           1980 ;	---------------------------------
                           1981 ; Function EnemyWalkAnim
                           1982 ; ---------------------------------
   0981                    1983 _EnemyWalkAnim::
                           1984 ;src/main.c:702: if(++pSpr->nFrm == 2 * ANIM_PAUSE) pSpr->nFrm = 0;
   0981 01 07 00      [10] 1985 	ld	bc, #0x0007
   0984 09            [11] 1986 	add	hl, bc
   0985 7E            [ 7] 1987 	ld	a, (hl)
   0986 3C            [ 4] 1988 	inc	a
   0987 77            [ 7] 1989 	ld	(hl), a
   0988 D6 06         [ 7] 1990 	sub	a,#0x06
   098A C0            [11] 1991 	ret	NZ
   098B 77            [ 7] 1992 	ld	(hl),a
   098C C9            [10] 1993 	ret
                           1994 ;src/main.c:707: void CheckEnemyCollision(TSpr *pSpr) { // __z88dk_fastcall
                           1995 ;	---------------------------------
                           1996 ; Function CheckEnemyCollision
                           1997 ; ---------------------------------
   098D                    1998 _CheckEnemyCollision::
   098D DD E5         [15] 1999 	push	ix
   098F DD 21 00 00   [14] 2000 	ld	ix,#0
   0993 DD 39         [15] 2001 	add	ix,sp
   0995 F5            [11] 2002 	push	af
   0996 F5            [11] 2003 	push	af
                           2004 ;src/main.c:709: if ((spr[0].x + SPR_W) > (pSpr->x + 2) && (spr[0].x + 2) < (pSpr->x + SPR_W))
   0997 21r17r00      [10] 2005 	ld	hl, #_spr+0
   099A 4E            [ 7] 2006 	ld	c, (hl)
   099B 06 00         [ 7] 2007 	ld	b, #0x00
   099D 21 08 00      [10] 2008 	ld	hl, #0x0008
   09A0 09            [11] 2009 	add	hl,bc
   09A1 DD 75 FE      [19] 2010 	ld	-2 (ix), l
   09A4 DD 74 FF      [19] 2011 	ld	-1 (ix), h
   09A7 DD 5E 04      [19] 2012 	ld	e,4 (ix)
   09AA DD 56 05      [19] 2013 	ld	d,5 (ix)
   09AD 1A            [ 7] 2014 	ld	a, (de)
   09AE 6F            [ 4] 2015 	ld	l, a
   09AF 26 00         [ 7] 2016 	ld	h, #0x00
   09B1 7D            [ 4] 2017 	ld	a, l
   09B2 C6 02         [ 7] 2018 	add	a, #0x02
   09B4 DD 77 FC      [19] 2019 	ld	-4 (ix), a
   09B7 7C            [ 4] 2020 	ld	a, h
   09B8 CE 00         [ 7] 2021 	adc	a, #0x00
   09BA DD 77 FD      [19] 2022 	ld	-3 (ix), a
   09BD DD 7E FC      [19] 2023 	ld	a, -4 (ix)
   09C0 DD 96 FE      [19] 2024 	sub	a, -2 (ix)
   09C3 DD 7E FD      [19] 2025 	ld	a, -3 (ix)
   09C6 DD 9E FF      [19] 2026 	sbc	a, -1 (ix)
   09C9 E2rCEr09      [10] 2027 	jp	PO, 00125$
   09CC EE 80         [ 7] 2028 	xor	a, #0x80
   09CE                    2029 00125$:
   09CE F2r2Ar0A      [10] 2030 	jp	P, 00107$
   09D1 03            [ 6] 2031 	inc	bc
   09D2 03            [ 6] 2032 	inc	bc
   09D3 D5            [11] 2033 	push	de
   09D4 11 08 00      [10] 2034 	ld	de, #0x0008
   09D7 19            [11] 2035 	add	hl, de
   09D8 D1            [10] 2036 	pop	de
   09D9 79            [ 4] 2037 	ld	a, c
   09DA 95            [ 4] 2038 	sub	a, l
   09DB 78            [ 4] 2039 	ld	a, b
   09DC 9C            [ 4] 2040 	sbc	a, h
   09DD E2rE2r09      [10] 2041 	jp	PO, 00126$
   09E0 EE 80         [ 7] 2042 	xor	a, #0x80
   09E2                    2043 00126$:
   09E2 F2r2Ar0A      [10] 2044 	jp	P, 00107$
                           2045 ;src/main.c:710: if ((spr[0].y + SPR_H) > (pSpr->y + 2) && (spr[0].y + 2) < (pSpr->y + SPR_H)) {
   09E5 3Ar18r00      [13] 2046 	ld	a, (#_spr + 1)
   09E8 4F            [ 4] 2047 	ld	c, a
   09E9 06 00         [ 7] 2048 	ld	b, #0x00
   09EB 21 10 00      [10] 2049 	ld	hl, #0x0010
   09EE 09            [11] 2050 	add	hl,bc
   09EF E3            [19] 2051 	ex	(sp), hl
   09F0 EB            [ 4] 2052 	ex	de,hl
   09F1 23            [ 6] 2053 	inc	hl
   09F2 5E            [ 7] 2054 	ld	e, (hl)
   09F3 16 00         [ 7] 2055 	ld	d, #0x00
   09F5 6B            [ 4] 2056 	ld	l, e
   09F6 62            [ 4] 2057 	ld	h, d
   09F7 23            [ 6] 2058 	inc	hl
   09F8 23            [ 6] 2059 	inc	hl
   09F9 7D            [ 4] 2060 	ld	a, l
   09FA DD 96 FC      [19] 2061 	sub	a, -4 (ix)
   09FD 7C            [ 4] 2062 	ld	a, h
   09FE DD 9E FD      [19] 2063 	sbc	a, -3 (ix)
   0A01 E2r06r0A      [10] 2064 	jp	PO, 00127$
   0A04 EE 80         [ 7] 2065 	xor	a, #0x80
   0A06                    2066 00127$:
   0A06 F2r2Ar0A      [10] 2067 	jp	P, 00107$
   0A09 03            [ 6] 2068 	inc	bc
   0A0A 03            [ 6] 2069 	inc	bc
   0A0B 21 10 00      [10] 2070 	ld	hl, #0x0010
   0A0E 19            [11] 2071 	add	hl, de
   0A0F 79            [ 4] 2072 	ld	a, c
   0A10 95            [ 4] 2073 	sub	a, l
   0A11 78            [ 4] 2074 	ld	a, b
   0A12 9C            [ 4] 2075 	sbc	a, h
   0A13 E2r18r0A      [10] 2076 	jp	PO, 00128$
   0A16 EE 80         [ 7] 2077 	xor	a, #0x80
   0A18                    2078 00128$:
   0A18 F2r2Ar0A      [10] 2079 	jp	P, 00107$
                           2080 ;src/main.c:712: spr[0].lives--;
   0A1B 21r20r00      [10] 2081 	ld	hl, #_spr + 9
   0A1E 4E            [ 7] 2082 	ld	c, (hl)
   0A1F 0D            [ 4] 2083 	dec	c
   0A20 71            [ 7] 2084 	ld	(hl), c
                           2085 ;src/main.c:713: ExplodePlayer();
   0A21 CDrA8r0E      [17] 2086 	call	_ExplodePlayer
                           2087 ;src/main.c:714: ExplodeEnemies();
   0A24 CDr9Dr13      [17] 2088 	call	_ExplodeEnemies
                           2089 ;src/main.c:715: GameOver();
   0A27 CDr94r16      [17] 2090 	call	_GameOver
   0A2A                    2091 00107$:
   0A2A DD F9         [10] 2092 	ld	sp, ix
   0A2C DD E1         [14] 2093 	pop	ix
   0A2E C9            [10] 2094 	ret
                           2095 ;src/main.c:732: void AssignFrame(TFrm **anim) __z88dk_fastcall {
                           2096 ;	---------------------------------
                           2097 ; Function AssignFrame
                           2098 ; ---------------------------------
   0A2F                    2099 _AssignFrame::
   0A2F 4D            [ 4] 2100 	ld	c, l
   0A30 44            [ 4] 2101 	ld	b, h
                           2102 ;src/main.c:733: spr[0].frm = anim[spr[0].nFrm / ANIM_PAUSE];
   0A31 21r1Er00      [10] 2103 	ld	hl, #_spr + 7
   0A34 56            [ 7] 2104 	ld	d, (hl)
   0A35 C5            [11] 2105 	push	bc
   0A36 3E 03         [ 7] 2106 	ld	a, #0x03
   0A38 F5            [11] 2107 	push	af
   0A39 33            [ 6] 2108 	inc	sp
   0A3A D5            [11] 2109 	push	de
   0A3B 33            [ 6] 2110 	inc	sp
   0A3C CDr00r00      [17] 2111 	call	__divuchar
   0A3F F1            [10] 2112 	pop	af
   0A40 C1            [10] 2113 	pop	bc
   0A41 26 00         [ 7] 2114 	ld	h, #0x00
   0A43 29            [11] 2115 	add	hl, hl
   0A44 09            [11] 2116 	add	hl, bc
   0A45 4E            [ 7] 2117 	ld	c, (hl)
   0A46 23            [ 6] 2118 	inc	hl
   0A47 46            [ 7] 2119 	ld	b, (hl)
   0A48 ED 43r1Cr00   [20] 2120 	ld	((_spr + 0x0005)), bc
   0A4C C9            [10] 2121 	ret
                           2122 ;src/main.c:738: void SelectFrame() {
                           2123 ;	---------------------------------
                           2124 ; Function SelectFrame
                           2125 ; ---------------------------------
   0A4D                    2126 _SelectFrame::
                           2127 ;src/main.c:740: switch(spr[0].status) {
   0A4D 21r1Br00      [10] 2128 	ld	hl, #(_spr + 0x0004) + 0
   0A50 4E            [ 7] 2129 	ld	c, (hl)
                           2130 ;src/main.c:741: case S_stopped:			{spr[0].frm = &frm_player[0]; break;}
                           2131 ;src/main.c:740: switch(spr[0].status) {
   0A51 3E 06         [ 7] 2132 	ld	a, #0x06
   0A53 91            [ 4] 2133 	sub	a, c
   0A54 38 54         [12] 2134 	jr	C,00108$
   0A56 06 00         [ 7] 2135 	ld	b, #0x00
   0A58 21r5Fr0A      [10] 2136 	ld	hl, #00126$
   0A5B 09            [11] 2137 	add	hl, bc
   0A5C 09            [11] 2138 	add	hl, bc
   0A5D 09            [11] 2139 	add	hl, bc
   0A5E E9            [ 4] 2140 	jp	(hl)
   0A5F                    2141 00126$:
   0A5F C3r74r0A      [10] 2142 	jp	00101$
   0A62 C3r7Cr0A      [10] 2143 	jp	00102$
   0A65 C3r8Cr0A      [10] 2144 	jp	00104$
   0A68 C3r94r0A      [10] 2145 	jp	00105$
   0A6B C3r84r0A      [10] 2146 	jp	00103$
   0A6E C3r9Cr0A      [10] 2147 	jp	00106$
   0A71 C3rA4r0A      [10] 2148 	jp	00107$
                           2149 ;src/main.c:741: case S_stopped:			{spr[0].frm = &frm_player[0]; break;}
   0A74                    2150 00101$:
   0A74 21r0Dr00      [10] 2151 	ld	hl, #_frm_player
   0A77 22r1Cr00      [16] 2152 	ld	((_spr + 0x0005)), hl
   0A7A 18 2E         [12] 2153 	jr	00108$
                           2154 ;src/main.c:742: case S_walking:			{AssignFrame(animWalk); break;}	// 0,1,0,2
   0A7C                    2155 00102$:
   0A7C 21r28r00      [10] 2156 	ld	hl, #_animWalk
   0A7F CDr2Fr0A      [17] 2157 	call	_AssignFrame
   0A82 18 26         [12] 2158 	jr	00108$
                           2159 ;src/main.c:743: case S_climbing:		{AssignFrame(animClimb); break;} // 6,7,6,8
   0A84                    2160 00103$:
   0A84 21r30r00      [10] 2161 	ld	hl, #_animClimb
   0A87 CDr2Fr0A      [17] 2162 	call	_AssignFrame
   0A8A 18 1E         [12] 2163 	jr	00108$
                           2164 ;src/main.c:744: case S_preJump:			{spr[0].frm = &frm_player[1]; break;}
   0A8C                    2165 00104$:
   0A8C 21r10r00      [10] 2166 	ld	hl, #(_frm_player + 0x0003)
   0A8F 22r1Cr00      [16] 2167 	ld	((_spr + 0x0005)), hl
   0A92 18 16         [12] 2168 	jr	00108$
                           2169 ;src/main.c:745: case S_jumping:			{spr[0].frm = &frm_player[3]; break;}
   0A94                    2170 00105$:
   0A94 21r16r00      [10] 2171 	ld	hl, #(_frm_player + 0x0009)
   0A97 22r1Cr00      [16] 2172 	ld	((_spr + 0x0005)), hl
   0A9A 18 0E         [12] 2173 	jr	00108$
                           2174 ;src/main.c:746: case S_falling:			{spr[0].frm = &frm_player[4]; break;}
   0A9C                    2175 00106$:
   0A9C 21r19r00      [10] 2176 	ld	hl, #(_frm_player + 0x000c)
   0A9F 22r1Cr00      [16] 2177 	ld	((_spr + 0x0005)), hl
   0AA2 18 06         [12] 2178 	jr	00108$
                           2179 ;src/main.c:747: case S_landing:			{spr[0].frm = &frm_player[1]; break;}
   0AA4                    2180 00107$:
   0AA4 21r10r00      [10] 2181 	ld	hl, #(_frm_player + 0x0003)
   0AA7 22r1Cr00      [16] 2182 	ld	((_spr + 0x0005)), hl
                           2183 ;src/main.c:748: }
   0AAA                    2184 00108$:
                           2185 ;src/main.c:750: f = spr[0].frm;
   0AAA ED 4Br1Cr00   [20] 2186 	ld	bc, (#(_spr + 0x0005) + 0)
                           2187 ;src/main.c:752: if (f->dir != spr[0].dir && spr[0].status != S_climbing) {
   0AAE 0A            [ 7] 2188 	ld	a, (bc)
   0AAF 5F            [ 4] 2189 	ld	e, a
   0AB0 3Ar1Fr00      [13] 2190 	ld	a, (#(_spr + 0x0008) + 0)
   0AB3 93            [ 4] 2191 	sub	a, e
   0AB4 C8            [11] 2192 	ret	Z
   0AB5 3Ar1Br00      [13] 2193 	ld	a, (#(_spr + 0x0004) + 0)
   0AB8 D6 04         [ 7] 2194 	sub	a, #0x04
   0ABA C8            [11] 2195 	ret	Z
                           2196 ;src/main.c:753: cpct_hflipSpriteM0(SPR_W, SPR_H, f->spr);         
   0ABB 69            [ 4] 2197 	ld	l, c
   0ABC 60            [ 4] 2198 	ld	h, b
   0ABD 23            [ 6] 2199 	inc	hl
   0ABE 5E            [ 7] 2200 	ld	e, (hl)
   0ABF 23            [ 6] 2201 	inc	hl
   0AC0 56            [ 7] 2202 	ld	d, (hl)
   0AC1 C5            [11] 2203 	push	bc
   0AC2 D5            [11] 2204 	push	de
   0AC3 21 08 10      [10] 2205 	ld	hl, #0x1008
   0AC6 E5            [11] 2206 	push	hl
   0AC7 CDr00r00      [17] 2207 	call	_cpct_hflipSpriteM0
   0ACA C1            [10] 2208 	pop	bc
                           2209 ;src/main.c:754: f->dir = spr[0].dir; // save position to compare with next call
   0ACB 3Ar1Fr00      [13] 2210 	ld	a, (#(_spr + 0x0008) + 0)
   0ACE 02            [ 7] 2211 	ld	(bc), a
   0ACF C9            [10] 2212 	ret
                           2213 ;src/main.c:759: void MoveUp() { 
                           2214 ;	---------------------------------
                           2215 ; Function MoveUp
                           2216 ; ---------------------------------
   0AD0                    2217 _MoveUp::
                           2218 ;src/main.c:760: if (spr[0].y > ORIG_MAP_Y) spr[0].y--;
   0AD0 01r18r00      [10] 2219 	ld	bc, #_spr+1
   0AD3 0A            [ 7] 2220 	ld	a, (bc)
   0AD4 5F            [ 4] 2221 	ld	e, a
   0AD5 3E 28         [ 7] 2222 	ld	a, #0x28
   0AD7 93            [ 4] 2223 	sub	a, e
   0AD8 D0            [11] 2224 	ret	NC
   0AD9 1D            [ 4] 2225 	dec	e
   0ADA 7B            [ 4] 2226 	ld	a, e
   0ADB 02            [ 7] 2227 	ld	(bc), a
   0ADC C9            [10] 2228 	ret
                           2229 ;src/main.c:764: void MoveDown() {
                           2230 ;	---------------------------------
                           2231 ; Function MoveDown
                           2232 ; ---------------------------------
   0ADD                    2233 _MoveDown::
                           2234 ;src/main.c:765: if (spr[0].y + SPR_H < GLOBAL_MAX_Y) spr[0].y++;
   0ADD 21r18r00      [10] 2235 	ld	hl, #(_spr + 0x0001) + 0
   0AE0 4E            [ 7] 2236 	ld	c, (hl)
   0AE1 59            [ 4] 2237 	ld	e, c
   0AE2 16 00         [ 7] 2238 	ld	d, #0x00
   0AE4 21 10 00      [10] 2239 	ld	hl, #0x0010
   0AE7 19            [11] 2240 	add	hl, de
   0AE8 11 C0 80      [10] 2241 	ld	de, #0x80c0
   0AEB 29            [11] 2242 	add	hl, hl
   0AEC 3F            [ 4] 2243 	ccf
   0AED CB 1C         [ 8] 2244 	rr	h
   0AEF CB 1D         [ 8] 2245 	rr	l
   0AF1 ED 52         [15] 2246 	sbc	hl, de
   0AF3 D0            [11] 2247 	ret	NC
   0AF4 0C            [ 4] 2248 	inc	c
   0AF5 21r18r00      [10] 2249 	ld	hl, #(_spr + 0x0001)
   0AF8 71            [ 7] 2250 	ld	(hl), c
   0AF9 C9            [10] 2251 	ret
                           2252 ;src/main.c:769: void MoveLeft() {
                           2253 ;	---------------------------------
                           2254 ; Function MoveLeft
                           2255 ; ---------------------------------
   0AFA                    2256 _MoveLeft::
                           2257 ;src/main.c:770: if (spr[0].x > 0) {
   0AFA 3Ar17r00      [13] 2258 	ld	a, (#_spr + 0)
   0AFD B7            [ 4] 2259 	or	a, a
   0AFE CAr4Fr03      [10] 2260 	jp	Z,_MoveLeftMap
                           2261 ;src/main.c:771: if (!FacingWall(spr[0].dir)) {
   0B01 21r1Fr00      [10] 2262 	ld	hl, #(_spr + 0x0008) + 0
   0B04 6E            [ 7] 2263 	ld	l, (hl)
   0B05 CDr09r04      [17] 2264 	call	_FacingWall
   0B08 7D            [ 4] 2265 	ld	a, l
   0B09 B7            [ 4] 2266 	or	a, a
   0B0A C0            [11] 2267 	ret	NZ
                           2268 ;src/main.c:772: spr[0].x--;
   0B0B 21r17r00      [10] 2269 	ld	hl, #_spr + 0
   0B0E 4E            [ 7] 2270 	ld	c, (hl)
   0B0F 0D            [ 4] 2271 	dec	c
   0B10 21r17r00      [10] 2272 	ld	hl, #_spr
   0B13 71            [ 7] 2273 	ld	(hl), c
                           2274 ;src/main.c:773: spr[0].dir = D_left;
   0B14 21r1Fr00      [10] 2275 	ld	hl, #(_spr + 0x0008)
   0B17 36 02         [10] 2276 	ld	(hl), #0x02
   0B19 C9            [10] 2277 	ret
                           2278 ;src/main.c:777: MoveLeftMap(); 
   0B1A C3r4Fr03      [10] 2279 	jp  _MoveLeftMap
                           2280 ;src/main.c:781: void MoveRight() { 
                           2281 ;	---------------------------------
                           2282 ; Function MoveRight
                           2283 ; ---------------------------------
   0B1D                    2284 _MoveRight::
                           2285 ;src/main.c:782: if (spr[0].x + SPR_W < GLOBAL_MAX_X) {
   0B1D 21r17r00      [10] 2286 	ld	hl, #_spr + 0
   0B20 4E            [ 7] 2287 	ld	c, (hl)
   0B21 06 00         [ 7] 2288 	ld	b, #0x00
   0B23 21 08 00      [10] 2289 	ld	hl, #0x0008
   0B26 09            [11] 2290 	add	hl, bc
   0B27 11 50 80      [10] 2291 	ld	de, #0x8050
   0B2A 29            [11] 2292 	add	hl, hl
   0B2B 3F            [ 4] 2293 	ccf
   0B2C CB 1C         [ 8] 2294 	rr	h
   0B2E CB 1D         [ 8] 2295 	rr	l
   0B30 ED 52         [15] 2296 	sbc	hl, de
   0B32 D2r35r03      [10] 2297 	jp	NC,_MoveRightMap
                           2298 ;src/main.c:783: if (!FacingWall(spr[0].dir)) {
   0B35 21r1Fr00      [10] 2299 	ld	hl, #(_spr + 0x0008) + 0
   0B38 6E            [ 7] 2300 	ld	l, (hl)
   0B39 CDr09r04      [17] 2301 	call	_FacingWall
   0B3C 7D            [ 4] 2302 	ld	a, l
   0B3D B7            [ 4] 2303 	or	a, a
   0B3E C0            [11] 2304 	ret	NZ
                           2305 ;src/main.c:784: spr[0].x++;
   0B3F 3Ar17r00      [13] 2306 	ld	a, (#_spr + 0)
   0B42 3C            [ 4] 2307 	inc	a
   0B43 32r17r00      [13] 2308 	ld	(#_spr),a
                           2309 ;src/main.c:785: spr[0].dir = D_right;
   0B46 21r1Fr00      [10] 2310 	ld	hl, #(_spr + 0x0008)
   0B49 36 03         [10] 2311 	ld	(hl), #0x03
   0B4B C9            [10] 2312 	ret
                           2313 ;src/main.c:789: MoveRightMap();
   0B4C C3r35r03      [10] 2314 	jp  _MoveRightMap
                           2315 ;src/main.c:794: void WalkIn(u8 dir) __z88dk_fastcall {
                           2316 ;	---------------------------------
                           2317 ; Function WalkIn
                           2318 ; ---------------------------------
   0B4F                    2319 _WalkIn::
   0B4F 4D            [ 4] 2320 	ld	c, l
                           2321 ;src/main.c:795: spr[0].nFrm = 0;
   0B50 21r1Er00      [10] 2322 	ld	hl, #(_spr + 0x0007)
   0B53 36 00         [10] 2323 	ld	(hl), #0x00
                           2324 ;src/main.c:796: spr[0].status = S_walking;
   0B55 21r1Br00      [10] 2325 	ld	hl, #(_spr + 0x0004)
   0B58 36 01         [10] 2326 	ld	(hl), #0x01
                           2327 ;src/main.c:797: spr[0].dir = dir;
   0B5A 21r1Fr00      [10] 2328 	ld	hl, #(_spr + 0x0008)
   0B5D 71            [ 7] 2329 	ld	(hl), c
   0B5E C9            [10] 2330 	ret
                           2331 ;src/main.c:802: void ClimbIn() {
                           2332 ;	---------------------------------
                           2333 ; Function ClimbIn
                           2334 ; ---------------------------------
   0B5F                    2335 _ClimbIn::
                           2336 ;src/main.c:803: spr[0].nFrm = 0;
   0B5F 21r1Er00      [10] 2337 	ld	hl, #(_spr + 0x0007)
   0B62 36 00         [10] 2338 	ld	(hl), #0x00
                           2339 ;src/main.c:804: spr[0].status = S_climbing;
   0B64 21r1Br00      [10] 2340 	ld	hl, #(_spr + 0x0004)
   0B67 36 04         [10] 2341 	ld	(hl), #0x04
   0B69 C9            [10] 2342 	ret
                           2343 ;src/main.c:809: void PreJumpIn() {
                           2344 ;	---------------------------------
                           2345 ; Function PreJumpIn
                           2346 ; ---------------------------------
   0B6A                    2347 _PreJumpIn::
                           2348 ;src/main.c:810: spr[0].nFrm = 0;
   0B6A 21r1Er00      [10] 2349 	ld	hl, #(_spr + 0x0007)
   0B6D 36 00         [10] 2350 	ld	(hl), #0x00
                           2351 ;src/main.c:811: spr[0].status = S_preJump;
   0B6F 21r1Br00      [10] 2352 	ld	hl, #(_spr + 0x0004)
   0B72 36 02         [10] 2353 	ld	(hl), #0x02
   0B74 C9            [10] 2354 	ret
                           2355 ;src/main.c:816: void FallIn() {
                           2356 ;	---------------------------------
                           2357 ; Function FallIn
                           2358 ; ---------------------------------
   0B75                    2359 _FallIn::
                           2360 ;src/main.c:817: spr[0].status = S_falling;
   0B75 21r1Br00      [10] 2361 	ld	hl, #(_spr + 0x0004)
   0B78 36 05         [10] 2362 	ld	(hl), #0x05
                           2363 ;src/main.c:818: spr[0].jump  = JUMP_STEPS - 3;
   0B7A 21r22r00      [10] 2364 	ld	hl, #(_spr + 0x000b)
   0B7D 36 09         [10] 2365 	ld	(hl), #0x09
   0B7F C9            [10] 2366 	ret
                           2367 ;src/main.c:823: void LandIn() {
                           2368 ;	---------------------------------
                           2369 ; Function LandIn
                           2370 ; ---------------------------------
   0B80                    2371 _LandIn::
                           2372 ;src/main.c:824: spr[0].nFrm = 0;
   0B80 21r1Er00      [10] 2373 	ld	hl, #(_spr + 0x0007)
   0B83 36 00         [10] 2374 	ld	(hl), #0x00
                           2375 ;src/main.c:825: spr[0].status = S_landing;
   0B85 21r1Br00      [10] 2376 	ld	hl, #(_spr + 0x0004)
   0B88 36 06         [10] 2377 	ld	(hl), #0x06
   0B8A C9            [10] 2378 	ret
                           2379 ;src/main.c:830: void Falling() {
                           2380 ;	---------------------------------
                           2381 ; Function Falling
                           2382 ; ---------------------------------
   0B8B                    2383 _Falling::
                           2384 ;src/main.c:831: cpct_scanKeyboard_f(); // check the pressed keys
   0B8B CDr00r00      [17] 2385 	call	_cpct_scanKeyboard_f
                           2386 ;src/main.c:833: if(cpct_isKeyPressed(ctlDown)) CheckObjects();
   0B8E 2Ar09r00      [16] 2387 	ld	hl, (_ctlDown)
   0B91 CDr00r00      [17] 2388 	call	_cpct_isKeyPressed
   0B94 7D            [ 4] 2389 	ld	a, l
   0B95 B7            [ 4] 2390 	or	a, a
   0B96 28 05         [12] 2391 	jr	Z,00107$
   0B98 CDrFCr05      [17] 2392 	call	_CheckObjects
   0B9B 18 1C         [12] 2393 	jr	00108$
   0B9D                    2394 00107$:
                           2395 ;src/main.c:834: else if (cpct_isKeyPressed(ctlLeft)) MoveLeft();
   0B9D 2Ar0Br00      [16] 2396 	ld	hl, (_ctlLeft)
   0BA0 CDr00r00      [17] 2397 	call	_cpct_isKeyPressed
   0BA3 7D            [ 4] 2398 	ld	a, l
   0BA4 B7            [ 4] 2399 	or	a, a
   0BA5 28 05         [12] 2400 	jr	Z,00104$
   0BA7 CDrFAr0A      [17] 2401 	call	_MoveLeft
   0BAA 18 0D         [12] 2402 	jr	00108$
   0BAC                    2403 00104$:
                           2404 ;src/main.c:835: else if (cpct_isKeyPressed(ctlRight)) MoveRight();
   0BAC 2Ar0Dr00      [16] 2405 	ld	hl, (_ctlRight)
   0BAF CDr00r00      [17] 2406 	call	_cpct_isKeyPressed
   0BB2 7D            [ 4] 2407 	ld	a, l
   0BB3 B7            [ 4] 2408 	or	a, a
   0BB4 28 03         [12] 2409 	jr	Z,00108$
   0BB6 CDr1Dr0B      [17] 2410 	call	_MoveRight
   0BB9                    2411 00108$:
                           2412 ;src/main.c:838: spr[0].y += cpct_get2Bits(g_jumpTable, spr[0].jump);	
   0BB9 21r18r00      [10] 2413 	ld	hl, #(_spr + 0x0001) + 0
   0BBC 4E            [ 7] 2414 	ld	c, (hl)
   0BBD 21r22r00      [10] 2415 	ld	hl, #(_spr + 0x000b) + 0
   0BC0 5E            [ 7] 2416 	ld	e, (hl)
   0BC1 16 00         [ 7] 2417 	ld	d, #0x00
   0BC3 C5            [11] 2418 	push	bc
   0BC4 D5            [11] 2419 	push	de
   0BC5 21r56r00      [10] 2420 	ld	hl, #_g_jumpTable
   0BC8 E5            [11] 2421 	push	hl
   0BC9 CDr00r00      [17] 2422 	call	_cpct_get2Bits
   0BCC C1            [10] 2423 	pop	bc
   0BCD 79            [ 4] 2424 	ld	a, c
   0BCE 85            [ 4] 2425 	add	a, l
   0BCF 32r18r00      [13] 2426 	ld	(#(_spr + 0x0001)),a
                           2427 ;src/main.c:839: if (spr[0].jump > 1) spr[0].jump--;
   0BD2 21r22r00      [10] 2428 	ld	hl, #(_spr + 0x000b) + 0
   0BD5 4E            [ 7] 2429 	ld	c, (hl)
   0BD6 3E 01         [ 7] 2430 	ld	a, #0x01
   0BD8 91            [ 4] 2431 	sub	a, c
   0BD9 30 05         [12] 2432 	jr	NC,00110$
   0BDB 0D            [ 4] 2433 	dec	c
   0BDC 21r22r00      [10] 2434 	ld	hl, #(_spr + 0x000b)
   0BDF 71            [ 7] 2435 	ld	(hl), c
   0BE0                    2436 00110$:
                           2437 ;src/main.c:841: if (OnPlatform(&spr[0]) || OnStairs()) { // if the player is on a platform ...
   0BE0 21r17r00      [10] 2438 	ld	hl, #_spr
   0BE3 CDrA7r03      [17] 2439 	call	_OnPlatform
   0BE6 7D            [ 4] 2440 	ld	a, l
   0BE7 B7            [ 4] 2441 	or	a, a
   0BE8 20 06         [12] 2442 	jr	NZ,00111$
   0BEA CDrC1r03      [17] 2443 	call	_OnStairs
   0BED 7D            [ 4] 2444 	ld	a, l
   0BEE B7            [ 4] 2445 	or	a, a
   0BEF C8            [11] 2446 	ret	Z
                           2447 ;src/main.c:842: while ((spr[0].y + 1) % 4 != 0) spr[0].y--; // adjust to the ground			
   0BF0                    2448 00111$:
                           2449 ;src/main.c:838: spr[0].y += cpct_get2Bits(g_jumpTable, spr[0].jump);	
   0BF0 21r18r00      [10] 2450 	ld	hl, #(_spr + 0x0001) + 0
   0BF3 4E            [ 7] 2451 	ld	c, (hl)
                           2452 ;src/main.c:842: while ((spr[0].y + 1) % 4 != 0) spr[0].y--; // adjust to the ground			
   0BF4 59            [ 4] 2453 	ld	e, c
   0BF5 16 00         [ 7] 2454 	ld	d, #0x00
   0BF7 13            [ 6] 2455 	inc	de
   0BF8 C5            [11] 2456 	push	bc
   0BF9 21 04 00      [10] 2457 	ld	hl, #0x0004
   0BFC E5            [11] 2458 	push	hl
   0BFD D5            [11] 2459 	push	de
   0BFE CDr00r00      [17] 2460 	call	__modsint
   0C01 F1            [10] 2461 	pop	af
   0C02 F1            [10] 2462 	pop	af
   0C03 C1            [10] 2463 	pop	bc
   0C04 7C            [ 4] 2464 	ld	a, h
   0C05 B5            [ 4] 2465 	or	a,l
   0C06 28 07         [12] 2466 	jr	Z,00113$
   0C08 0D            [ 4] 2467 	dec	c
   0C09 21r18r00      [10] 2468 	ld	hl, #(_spr + 0x0001)
   0C0C 71            [ 7] 2469 	ld	(hl), c
   0C0D 18 E1         [12] 2470 	jr	00111$
   0C0F                    2471 00113$:
                           2472 ;src/main.c:843: LandIn(); // prepare the landing
   0C0F CDr80r0B      [17] 2473 	call	_LandIn
   0C12 C9            [10] 2474 	ret
                           2475 ;src/main.c:849: void StopIn() {
                           2476 ;	---------------------------------
                           2477 ; Function StopIn
                           2478 ; ---------------------------------
   0C13                    2479 _StopIn::
                           2480 ;src/main.c:850: spr[0].status = S_stopped;
   0C13 21r1Br00      [10] 2481 	ld	hl, #(_spr + 0x0004)
   0C16 36 00         [10] 2482 	ld	(hl), #0x00
   0C18 C9            [10] 2483 	ret
                           2484 ;src/main.c:855: void Stopped() {
                           2485 ;	---------------------------------
                           2486 ; Function Stopped
                           2487 ; ---------------------------------
   0C19                    2488 _Stopped::
                           2489 ;src/main.c:856: cpct_scanKeyboard_f(); // check the pressed keys
   0C19 CDr00r00      [17] 2490 	call	_cpct_scanKeyboard_f
                           2491 ;src/main.c:857: if(cpct_isKeyPressed(ctlUp)) {
   0C1C 2Ar07r00      [16] 2492 	ld	hl, (_ctlUp)
   0C1F CDr00r00      [17] 2493 	call	_cpct_isKeyPressed
   0C22 7D            [ 4] 2494 	ld	a, l
   0C23 B7            [ 4] 2495 	or	a, a
   0C24 28 0B         [12] 2496 	jr	Z,00131$
                           2497 ;src/main.c:858: if(OnStairs()) ClimbIn(); // going to climb a ladder
   0C26 CDrC1r03      [17] 2498 	call	_OnStairs
   0C29 7D            [ 4] 2499 	ld	a, l
   0C2A B7            [ 4] 2500 	or	a, a
   0C2B C2r5Fr0B      [10] 2501 	jp	NZ,_ClimbIn
                           2502 ;src/main.c:859: else PreJumpIn(); // going to jump
   0C2E C3r6Ar0B      [10] 2503 	jp  _PreJumpIn
   0C31                    2504 00131$:
                           2505 ;src/main.c:861: else if(cpct_isKeyPressed(ctlDown)) {
   0C31 2Ar09r00      [16] 2506 	ld	hl, (_ctlDown)
   0C34 CDr00r00      [17] 2507 	call	_cpct_isKeyPressed
   0C37 7D            [ 4] 2508 	ld	a, l
   0C38 B7            [ 4] 2509 	or	a, a
   0C39 28 0B         [12] 2510 	jr	Z,00128$
                           2511 ;src/main.c:862: if(OnStairs()) ClimbIn(); // going down a ladder
   0C3B CDrC1r03      [17] 2512 	call	_OnStairs
   0C3E 7D            [ 4] 2513 	ld	a, l
   0C3F B7            [ 4] 2514 	or	a, a
   0C40 C2r5Fr0B      [10] 2515 	jp	NZ,_ClimbIn
                           2516 ;src/main.c:863: else CheckObjects(); // going to grab / drop an object (if it is on an object)
   0C43 C3rFCr05      [10] 2517 	jp  _CheckObjects
   0C46                    2518 00128$:
                           2519 ;src/main.c:865: else if(cpct_isKeyPressed(ctlLeft)) WalkIn(D_left);
   0C46 2Ar0Br00      [16] 2520 	ld	hl, (_ctlLeft)
   0C49 CDr00r00      [17] 2521 	call	_cpct_isKeyPressed
   0C4C 7D            [ 4] 2522 	ld	a, l
   0C4D B7            [ 4] 2523 	or	a, a
   0C4E 28 05         [12] 2524 	jr	Z,00125$
   0C50 2E 02         [ 7] 2525 	ld	l, #0x02
   0C52 C3r4Fr0B      [10] 2526 	jp  _WalkIn
   0C55                    2527 00125$:
                           2528 ;src/main.c:866: else if(cpct_isKeyPressed(ctlRight)) WalkIn(D_right);
   0C55 2Ar0Dr00      [16] 2529 	ld	hl, (_ctlRight)
   0C58 CDr00r00      [17] 2530 	call	_cpct_isKeyPressed
   0C5B 7D            [ 4] 2531 	ld	a, l
   0C5C B7            [ 4] 2532 	or	a, a
   0C5D 28 05         [12] 2533 	jr	Z,00122$
   0C5F 2E 03         [ 7] 2534 	ld	l, #0x03
   0C61 C3r4Fr0B      [10] 2535 	jp  _WalkIn
   0C64                    2536 00122$:
                           2537 ;src/main.c:868: else if(cpct_isKeyPressed(ctlAbort)) {
   0C64 2Ar13r00      [16] 2538 	ld	hl, (_ctlAbort)
   0C67 CDr00r00      [17] 2539 	call	_cpct_isKeyPressed
   0C6A 7D            [ 4] 2540 	ld	a, l
   0C6B B7            [ 4] 2541 	or	a, a
   0C6C 28 0E         [12] 2542 	jr	Z,00119$
                           2543 ;src/main.c:869: spr[0].lives = 0; 
   0C6E 21r20r00      [10] 2544 	ld	hl, #(_spr + 0x0009)
   0C71 36 00         [10] 2545 	ld	(hl), #0x00
                           2546 ;src/main.c:870: ExplodePlayer();
   0C73 CDrA8r0E      [17] 2547 	call	_ExplodePlayer
                           2548 ;src/main.c:871: ExplodeEnemies();
   0C76 CDr9Dr13      [17] 2549 	call	_ExplodeEnemies
                           2550 ;src/main.c:872: GameOver();
   0C79 C3r94r16      [10] 2551 	jp  _GameOver
   0C7C                    2552 00119$:
                           2553 ;src/main.c:875: else if(cpct_isKeyPressed(ctlMusic)) {
   0C7C 2Ar11r00      [16] 2554 	ld	hl, (_ctlMusic)
   0C7F CDr00r00      [17] 2555 	call	_cpct_isKeyPressed
   0C82 7D            [ 4] 2556 	ld	a, l
   0C83 B7            [ 4] 2557 	or	a, a
   0C84 28 2B         [12] 2558 	jr	Z,00116$
                           2559 ;src/main.c:876: Wait4Key(ctlMusic);
   0C86 2Ar11r00      [16] 2560 	ld	hl, (_ctlMusic)
   0C89 CDrA5r04      [17] 2561 	call	_Wait4Key
                           2562 ;src/main.c:877: if (music == TRUE) { // if the music is playing ...
   0C8C FD 21r04r00   [14] 2563 	ld	iy, #_music
   0C90 FD 7E 00      [19] 2564 	ld	a, 0 (iy)
   0C93 3D            [ 4] 2565 	dec	a
   0C94 20 0D         [12] 2566 	jr	NZ,00108$
                           2567 ;src/main.c:878: music = FALSE;
   0C96 FD 36 00 00   [19] 2568 	ld	0 (iy), #0x00
                           2569 ;src/main.c:879: cpct_akp_musicInit(FX);
   0C9A 21r00r00      [10] 2570 	ld	hl, #_FX
   0C9D E5            [11] 2571 	push	hl
   0C9E CDr00r00      [17] 2572 	call	_cpct_akp_musicInit
   0CA1 F1            [10] 2573 	pop	af
   0CA2 C9            [10] 2574 	ret
   0CA3                    2575 00108$:
                           2576 ;src/main.c:882: music = TRUE;			
   0CA3 21r04r00      [10] 2577 	ld	hl,#_music + 0
   0CA6 36 01         [10] 2578 	ld	(hl), #0x01
                           2579 ;src/main.c:883: cpct_akp_musicInit(Ingame1);
   0CA8 21r00r00      [10] 2580 	ld	hl, #_Ingame1
   0CAB E5            [11] 2581 	push	hl
   0CAC CDr00r00      [17] 2582 	call	_cpct_akp_musicInit
   0CAF F1            [10] 2583 	pop	af
   0CB0 C9            [10] 2584 	ret
   0CB1                    2585 00116$:
                           2586 ;src/main.c:887: else if(cpct_isKeyPressed(ctlPause)) {
   0CB1 2Ar15r00      [16] 2587 	ld	hl, (_ctlPause)
   0CB4 CDr00r00      [17] 2588 	call	_cpct_isKeyPressed
   0CB7 7D            [ 4] 2589 	ld	a, l
   0CB8 B7            [ 4] 2590 	or	a, a
   0CB9 C8            [11] 2591 	ret	Z
                           2592 ;src/main.c:888: Wait4Key(ctlPause);
   0CBA 2Ar15r00      [16] 2593 	ld	hl, (_ctlPause)
   0CBD CDrA5r04      [17] 2594 	call	_Wait4Key
                           2595 ;src/main.c:889: cpct_akp_musicInit(FX);
   0CC0 21r00r00      [10] 2596 	ld	hl, #_FX
   0CC3 E5            [11] 2597 	push	hl
   0CC4 CDr00r00      [17] 2598 	call	_cpct_akp_musicInit
   0CC7 F1            [10] 2599 	pop	af
                           2600 ;src/main.c:890: while (!cpct_isAnyKeyPressed());
   0CC8                    2601 00110$:
   0CC8 CDr00r00      [17] 2602 	call	_cpct_isAnyKeyPressed
   0CCB 7D            [ 4] 2603 	ld	a, l
   0CCC B7            [ 4] 2604 	or	a, a
   0CCD 28 F9         [12] 2605 	jr	Z,00110$
                           2606 ;src/main.c:891: Wait4Key(ctlPause);
   0CCF 2Ar15r00      [16] 2607 	ld	hl, (_ctlPause)
   0CD2 CDrA5r04      [17] 2608 	call	_Wait4Key
                           2609 ;src/main.c:892: cpct_akp_musicInit(Ingame1);
   0CD5 21r00r00      [10] 2610 	ld	hl, #_Ingame1
   0CD8 E5            [11] 2611 	push	hl
   0CD9 CDr00r00      [17] 2612 	call	_cpct_akp_musicInit
   0CDC F1            [10] 2613 	pop	af
   0CDD C9            [10] 2614 	ret
                           2615 ;src/main.c:898: void JumpIn() {
                           2616 ;	---------------------------------
                           2617 ; Function JumpIn
                           2618 ; ---------------------------------
   0CDE                    2619 _JumpIn::
                           2620 ;src/main.c:899: spr[0].status = S_jumping;
   0CDE 21r1Br00      [10] 2621 	ld	hl, #(_spr + 0x0004)
   0CE1 36 03         [10] 2622 	ld	(hl), #0x03
                           2623 ;src/main.c:900: spr[0].jump  = 0;
   0CE3 21r22r00      [10] 2624 	ld	hl, #(_spr + 0x000b)
   0CE6 36 00         [10] 2625 	ld	(hl), #0x00
                           2626 ;src/main.c:901: cpct_akp_SFXPlay(3, 15, 32, 0, 0, AY_CHANNEL_C);
   0CE8 3E 04         [ 7] 2627 	ld	a, #0x04
   0CEA F5            [11] 2628 	push	af
   0CEB 33            [ 6] 2629 	inc	sp
   0CEC 21 00 00      [10] 2630 	ld	hl, #0x0000
   0CEF E5            [11] 2631 	push	hl
   0CF0 2E 20         [ 7] 2632 	ld	l, #0x20
   0CF2 E5            [11] 2633 	push	hl
   0CF3 21 03 0F      [10] 2634 	ld	hl, #0x0f03
   0CF6 E5            [11] 2635 	push	hl
   0CF7 CDr00r00      [17] 2636 	call	_cpct_akp_SFXPlay
   0CFA 21 07 00      [10] 2637 	ld	hl, #7
   0CFD 39            [11] 2638 	add	hl, sp
   0CFE F9            [ 6] 2639 	ld	sp, hl
   0CFF C9            [10] 2640 	ret
                           2641 ;src/main.c:905: void Jumping() {
                           2642 ;	---------------------------------
                           2643 ; Function Jumping
                           2644 ; ---------------------------------
   0D00                    2645 _Jumping::
                           2646 ;src/main.c:906: cpct_scanKeyboard_f(); // check the pressed keys
   0D00 CDr00r00      [17] 2647 	call	_cpct_scanKeyboard_f
                           2648 ;src/main.c:907: if(!cpct_isKeyPressed(ctlUp)) FallIn();
   0D03 2Ar07r00      [16] 2649 	ld	hl, (_ctlUp)
   0D06 CDr00r00      [17] 2650 	call	_cpct_isKeyPressed
   0D09 7D            [ 4] 2651 	ld	a, l
   0D0A B7            [ 4] 2652 	or	a, a
   0D0B 20 05         [12] 2653 	jr	NZ,00110$
   0D0D CDr75r0B      [17] 2654 	call	_FallIn
   0D10 18 2B         [12] 2655 	jr	00111$
   0D12                    2656 00110$:
                           2657 ;src/main.c:909: if(cpct_isKeyPressed(ctlDown)) CheckObjects();
   0D12 2Ar09r00      [16] 2658 	ld	hl, (_ctlDown)
   0D15 CDr00r00      [17] 2659 	call	_cpct_isKeyPressed
   0D18 7D            [ 4] 2660 	ld	a, l
   0D19 B7            [ 4] 2661 	or	a, a
   0D1A 28 05         [12] 2662 	jr	Z,00107$
   0D1C CDrFCr05      [17] 2663 	call	_CheckObjects
   0D1F 18 1C         [12] 2664 	jr	00111$
   0D21                    2665 00107$:
                           2666 ;src/main.c:910: else if (cpct_isKeyPressed(ctlLeft)) MoveLeft();
   0D21 2Ar0Br00      [16] 2667 	ld	hl, (_ctlLeft)
   0D24 CDr00r00      [17] 2668 	call	_cpct_isKeyPressed
   0D27 7D            [ 4] 2669 	ld	a, l
   0D28 B7            [ 4] 2670 	or	a, a
   0D29 28 05         [12] 2671 	jr	Z,00104$
   0D2B CDrFAr0A      [17] 2672 	call	_MoveLeft
   0D2E 18 0D         [12] 2673 	jr	00111$
   0D30                    2674 00104$:
                           2675 ;src/main.c:911: else if (cpct_isKeyPressed(ctlRight)) MoveRight();
   0D30 2Ar0Dr00      [16] 2676 	ld	hl, (_ctlRight)
   0D33 CDr00r00      [17] 2677 	call	_cpct_isKeyPressed
   0D36 7D            [ 4] 2678 	ld	a, l
   0D37 B7            [ 4] 2679 	or	a, a
   0D38 28 03         [12] 2680 	jr	Z,00111$
   0D3A CDr1Dr0B      [17] 2681 	call	_MoveRight
   0D3D                    2682 00111$:
                           2683 ;src/main.c:914: spr[0].y -= cpct_get2Bits(g_jumpTable, spr[0].jump);
   0D3D 21r18r00      [10] 2684 	ld	hl, #(_spr + 0x0001) + 0
   0D40 4E            [ 7] 2685 	ld	c, (hl)
   0D41 21r22r00      [10] 2686 	ld	hl, #(_spr + 0x000b) + 0
   0D44 5E            [ 7] 2687 	ld	e, (hl)
   0D45 16 00         [ 7] 2688 	ld	d, #0x00
   0D47 C5            [11] 2689 	push	bc
   0D48 D5            [11] 2690 	push	de
   0D49 21r56r00      [10] 2691 	ld	hl, #_g_jumpTable
   0D4C E5            [11] 2692 	push	hl
   0D4D CDr00r00      [17] 2693 	call	_cpct_get2Bits
   0D50 C1            [10] 2694 	pop	bc
   0D51 79            [ 4] 2695 	ld	a, c
   0D52 95            [ 4] 2696 	sub	a, l
   0D53 21r18r00      [10] 2697 	ld	hl, #(_spr + 0x0001)
   0D56 77            [ 7] 2698 	ld	(hl), a
                           2699 ;src/main.c:916: if (spr[0].y < ORIG_MAP_Y) spr[0].y = ORIG_MAP_Y;
   0D57 D6 28         [ 7] 2700 	sub	a, #0x28
   0D59 30 02         [12] 2701 	jr	NC,00113$
   0D5B 36 28         [10] 2702 	ld	(hl), #0x28
   0D5D                    2703 00113$:
                           2704 ;src/main.c:918: if (++spr[0].jump == JUMP_STEPS)	FallIn();
   0D5D 3Ar22r00      [13] 2705 	ld	a, (#(_spr + 0x000b) + 0)
   0D60 3C            [ 4] 2706 	inc	a
   0D61 32r22r00      [13] 2707 	ld	(#(_spr + 0x000b)),a
   0D64 D6 0C         [ 7] 2708 	sub	a, #0x0c
   0D66 C0            [11] 2709 	ret	NZ
   0D67 CDr75r0B      [17] 2710 	call	_FallIn
   0D6A C9            [10] 2711 	ret
                           2712 ;src/main.c:922: void PreJump() {
                           2713 ;	---------------------------------
                           2714 ; Function PreJump
                           2715 ; ---------------------------------
   0D6B                    2716 _PreJump::
                           2717 ;src/main.c:923: cpct_scanKeyboard_f(); // check the pressed keys
   0D6B CDr00r00      [17] 2718 	call	_cpct_scanKeyboard_f
                           2719 ;src/main.c:924: if(cpct_isKeyPressed(ctlUp)) JumpIn();
   0D6E 2Ar07r00      [16] 2720 	ld	hl, (_ctlUp)
   0D71 CDr00r00      [17] 2721 	call	_cpct_isKeyPressed
   0D74 7D            [ 4] 2722 	ld	a, l
   0D75 B7            [ 4] 2723 	or	a, a
   0D76 C2rDEr0C      [10] 2724 	jp	NZ,_JumpIn
                           2725 ;src/main.c:925: else StopIn();	
   0D79 C3r13r0C      [10] 2726 	jp  _StopIn
                           2727 ;src/main.c:930: void WalkAnim(u8 dir) __z88dk_fastcall {
                           2728 ;	---------------------------------
                           2729 ; Function WalkAnim
                           2730 ; ---------------------------------
   0D7C                    2731 _WalkAnim::
   0D7C 4D            [ 4] 2732 	ld	c, l
                           2733 ;src/main.c:931: spr[0].dir  = dir;
   0D7D 21r1Fr00      [10] 2734 	ld	hl, #(_spr + 0x0008)
   0D80 71            [ 7] 2735 	ld	(hl), c
                           2736 ;src/main.c:932: if(++spr[0].nFrm == 4 * ANIM_PAUSE) spr[0].nFrm = 0;
   0D81 01r1Er00      [10] 2737 	ld	bc, #_spr + 7
   0D84 0A            [ 7] 2738 	ld	a, (bc)
   0D85 3C            [ 4] 2739 	inc	a
   0D86 02            [ 7] 2740 	ld	(bc), a
   0D87 D6 0C         [ 7] 2741 	sub	a, #0x0c
   0D89 C0            [11] 2742 	ret	NZ
   0D8A AF            [ 4] 2743 	xor	a, a
   0D8B 02            [ 7] 2744 	ld	(bc), a
   0D8C C9            [10] 2745 	ret
                           2746 ;src/main.c:936: void Walking() {
                           2747 ;	---------------------------------
                           2748 ; Function Walking
                           2749 ; ---------------------------------
   0D8D                    2750 _Walking::
                           2751 ;src/main.c:937: cpct_scanKeyboard_f(); // check the pressed keys
   0D8D CDr00r00      [17] 2752 	call	_cpct_scanKeyboard_f
                           2753 ;src/main.c:938: if (cpct_isKeyPressed(ctlUp)) {
   0D90 2Ar07r00      [16] 2754 	ld	hl, (_ctlUp)
   0D93 CDr00r00      [17] 2755 	call	_cpct_isKeyPressed
   0D96 7D            [ 4] 2756 	ld	a, l
   0D97 B7            [ 4] 2757 	or	a, a
   0D98 28 11         [12] 2758 	jr	Z,00117$
                           2759 ;src/main.c:939: if (OnStairs()) ClimbIn(); // going to climb a ladder
   0D9A CDrC1r03      [17] 2760 	call	_OnStairs
   0D9D 7D            [ 4] 2761 	ld	a, l
   0D9E B7            [ 4] 2762 	or	a, a
   0D9F 28 05         [12] 2763 	jr	Z,00102$
   0DA1 CDr5Fr0B      [17] 2764 	call	_ClimbIn
   0DA4 18 4B         [12] 2765 	jr	00118$
   0DA6                    2766 00102$:
                           2767 ;src/main.c:940: else PreJumpIn(); // going to jump
   0DA6 CDr6Ar0B      [17] 2768 	call	_PreJumpIn
   0DA9 18 46         [12] 2769 	jr	00118$
   0DAB                    2770 00117$:
                           2771 ;src/main.c:942: else if (cpct_isKeyPressed(ctlDown)) {
   0DAB 2Ar09r00      [16] 2772 	ld	hl, (_ctlDown)
   0DAE CDr00r00      [17] 2773 	call	_cpct_isKeyPressed
   0DB1 7D            [ 4] 2774 	ld	a, l
   0DB2 B7            [ 4] 2775 	or	a, a
   0DB3 28 11         [12] 2776 	jr	Z,00114$
                           2777 ;src/main.c:943: if (OnStairs()) ClimbIn(); // going down a ladder
   0DB5 CDrC1r03      [17] 2778 	call	_OnStairs
   0DB8 7D            [ 4] 2779 	ld	a, l
   0DB9 B7            [ 4] 2780 	or	a, a
   0DBA 28 05         [12] 2781 	jr	Z,00105$
   0DBC CDr5Fr0B      [17] 2782 	call	_ClimbIn
   0DBF 18 30         [12] 2783 	jr	00118$
   0DC1                    2784 00105$:
                           2785 ;src/main.c:944: else CheckObjects(); // going to grab / drop an object (if it is on an object)
   0DC1 CDrFCr05      [17] 2786 	call	_CheckObjects
   0DC4 18 2B         [12] 2787 	jr	00118$
   0DC6                    2788 00114$:
                           2789 ;src/main.c:946: else if (cpct_isKeyPressed(ctlLeft)) {MoveLeft(); WalkAnim(D_left);}
   0DC6 2Ar0Br00      [16] 2790 	ld	hl, (_ctlLeft)
   0DC9 CDr00r00      [17] 2791 	call	_cpct_isKeyPressed
   0DCC 7D            [ 4] 2792 	ld	a, l
   0DCD B7            [ 4] 2793 	or	a, a
   0DCE 28 0A         [12] 2794 	jr	Z,00111$
   0DD0 CDrFAr0A      [17] 2795 	call	_MoveLeft
   0DD3 2E 02         [ 7] 2796 	ld	l, #0x02
   0DD5 CDr7Cr0D      [17] 2797 	call	_WalkAnim
   0DD8 18 17         [12] 2798 	jr	00118$
   0DDA                    2799 00111$:
                           2800 ;src/main.c:947: else if (cpct_isKeyPressed(ctlRight)) {MoveRight(); WalkAnim(D_right);}
   0DDA 2Ar0Dr00      [16] 2801 	ld	hl, (_ctlRight)
   0DDD CDr00r00      [17] 2802 	call	_cpct_isKeyPressed
   0DE0 7D            [ 4] 2803 	ld	a, l
   0DE1 B7            [ 4] 2804 	or	a, a
   0DE2 28 0A         [12] 2805 	jr	Z,00108$
   0DE4 CDr1Dr0B      [17] 2806 	call	_MoveRight
   0DE7 2E 03         [ 7] 2807 	ld	l, #0x03
   0DE9 CDr7Cr0D      [17] 2808 	call	_WalkAnim
   0DEC 18 03         [12] 2809 	jr	00118$
   0DEE                    2810 00108$:
                           2811 ;src/main.c:948: else StopIn();
   0DEE CDr13r0C      [17] 2812 	call	_StopIn
   0DF1                    2813 00118$:
                           2814 ;src/main.c:950: if (!OnPlatform(&spr[0])) // if it is not on a platform, it is also falling
   0DF1 21r17r00      [10] 2815 	ld	hl, #_spr
   0DF4 CDrA7r03      [17] 2816 	call	_OnPlatform
   0DF7 7D            [ 4] 2817 	ld	a, l
   0DF8 B7            [ 4] 2818 	or	a, a
   0DF9 C0            [11] 2819 	ret	NZ
                           2820 ;src/main.c:951: FallIn();
   0DFA C3r75r0B      [10] 2821 	jp  _FallIn
                           2822 ;src/main.c:955: void Climbing() {
                           2823 ;	---------------------------------
                           2824 ; Function Climbing
                           2825 ; ---------------------------------
   0DFD                    2826 _Climbing::
                           2827 ;src/main.c:956: cpct_scanKeyboard_f(); // check the pressed keys
   0DFD CDr00r00      [17] 2828 	call	_cpct_scanKeyboard_f
                           2829 ;src/main.c:957: if(cpct_isKeyPressed(ctlUp)) {
   0E00 2Ar07r00      [16] 2830 	ld	hl, (_ctlUp)
   0E03 CDr00r00      [17] 2831 	call	_cpct_isKeyPressed
   0E06 7D            [ 4] 2832 	ld	a, l
   0E07 B7            [ 4] 2833 	or	a, a
   0E08 28 0E         [12] 2834 	jr	Z,00120$
                           2835 ;src/main.c:958: if(OnStairs()) {MoveUp(); WalkAnim(D_right);} 
   0E0A CDrC1r03      [17] 2836 	call	_OnStairs
   0E0D 7D            [ 4] 2837 	ld	a, l
   0E0E B7            [ 4] 2838 	or	a, a
   0E0F C8            [11] 2839 	ret	Z
   0E10 CDrD0r0A      [17] 2840 	call	_MoveUp
   0E13 2E 03         [ 7] 2841 	ld	l, #0x03
   0E15 C3r7Cr0D      [10] 2842 	jp  _WalkAnim
   0E18                    2843 00120$:
                           2844 ;src/main.c:960: else if(cpct_isKeyPressed(ctlDown))	{
   0E18 2Ar09r00      [16] 2845 	ld	hl, (_ctlDown)
   0E1B CDr00r00      [17] 2846 	call	_cpct_isKeyPressed
   0E1E 7D            [ 4] 2847 	ld	a, l
   0E1F B7            [ 4] 2848 	or	a, a
   0E20 28 0E         [12] 2849 	jr	Z,00117$
                           2850 ;src/main.c:961: if(OnStairs()) {MoveDown(); WalkAnim(D_right);}
   0E22 CDrC1r03      [17] 2851 	call	_OnStairs
   0E25 7D            [ 4] 2852 	ld	a, l
   0E26 B7            [ 4] 2853 	or	a, a
   0E27 C8            [11] 2854 	ret	Z
   0E28 CDrDDr0A      [17] 2855 	call	_MoveDown
   0E2B 2E 03         [ 7] 2856 	ld	l, #0x03
   0E2D C3r7Cr0D      [10] 2857 	jp  _WalkAnim
   0E30                    2858 00117$:
                           2859 ;src/main.c:963: else if(cpct_isKeyPressed(ctlLeft)) {
   0E30 2Ar0Br00      [16] 2860 	ld	hl, (_ctlLeft)
   0E33 CDr00r00      [17] 2861 	call	_cpct_isKeyPressed
   0E36 7D            [ 4] 2862 	ld	a, l
   0E37 B7            [ 4] 2863 	or	a, a
   0E38 28 15         [12] 2864 	jr	Z,00114$
                           2865 ;src/main.c:964: if(OnStairs()) {MoveLeft(); WalkAnim(D_left);} 
   0E3A CDrC1r03      [17] 2866 	call	_OnStairs
   0E3D 7D            [ 4] 2867 	ld	a, l
   0E3E B7            [ 4] 2868 	or	a, a
   0E3F 28 08         [12] 2869 	jr	Z,00106$
   0E41 CDrFAr0A      [17] 2870 	call	_MoveLeft
   0E44 2E 02         [ 7] 2871 	ld	l, #0x02
   0E46 C3r7Cr0D      [10] 2872 	jp  _WalkAnim
   0E49                    2873 00106$:
                           2874 ;src/main.c:965: else spr[0].status = S_walking;
   0E49 21r1Br00      [10] 2875 	ld	hl, #(_spr + 0x0004)
   0E4C 36 01         [10] 2876 	ld	(hl), #0x01
   0E4E C9            [10] 2877 	ret
   0E4F                    2878 00114$:
                           2879 ;src/main.c:967: else if(cpct_isKeyPressed(ctlRight)) {
   0E4F 2Ar0Dr00      [16] 2880 	ld	hl, (_ctlRight)
   0E52 CDr00r00      [17] 2881 	call	_cpct_isKeyPressed
   0E55 7D            [ 4] 2882 	ld	a, l
   0E56 B7            [ 4] 2883 	or	a, a
   0E57 C8            [11] 2884 	ret	Z
                           2885 ;src/main.c:968: if(OnStairs()) {MoveRight(); WalkAnim(D_right);} 
   0E58 CDrC1r03      [17] 2886 	call	_OnStairs
   0E5B 7D            [ 4] 2887 	ld	a, l
   0E5C B7            [ 4] 2888 	or	a, a
   0E5D 28 08         [12] 2889 	jr	Z,00109$
   0E5F CDr1Dr0B      [17] 2890 	call	_MoveRight
   0E62 2E 03         [ 7] 2891 	ld	l, #0x03
   0E64 C3r7Cr0D      [10] 2892 	jp  _WalkAnim
   0E67                    2893 00109$:
                           2894 ;src/main.c:969: else spr[0].status = S_walking;
   0E67 21r1Br00      [10] 2895 	ld	hl, #(_spr + 0x0004)
   0E6A 36 01         [10] 2896 	ld	(hl), #0x01
   0E6C C9            [10] 2897 	ret
                           2898 ;src/main.c:975: void RunStatus() {
                           2899 ;	---------------------------------
                           2900 ; Function RunStatus
                           2901 ; ---------------------------------
   0E6D                    2902 _RunStatus::
                           2903 ;src/main.c:976: switch(spr[0].status) {
   0E6D 21r1Br00      [10] 2904 	ld	hl, #(_spr + 0x0004) + 0
   0E70 4E            [ 7] 2905 	ld	c, (hl)
   0E71 3E 06         [ 7] 2906 	ld	a, #0x06
   0E73 91            [ 4] 2907 	sub	a, c
   0E74 D8            [11] 2908 	ret	C
   0E75 06 00         [ 7] 2909 	ld	b, #0x00
   0E77 21r7Er0E      [10] 2910 	ld	hl, #00115$
   0E7A 09            [11] 2911 	add	hl, bc
   0E7B 09            [11] 2912 	add	hl, bc
   0E7C 09            [11] 2913 	add	hl, bc
   0E7D E9            [ 4] 2914 	jp	(hl)
   0E7E                    2915 00115$:
   0E7E C3r19r0C      [10] 2916 	jp	_Stopped
   0E81 C3r8Dr0D      [10] 2917 	jp	_Walking
   0E84 C3r6Br0D      [10] 2918 	jp	_PreJump
   0E87 C3r00r0D      [10] 2919 	jp	_Jumping
   0E8A C3rFDr0D      [10] 2920 	jp	_Climbing
   0E8D C3r8Br0B      [10] 2921 	jp	_Falling
   0E90 C3r13r0C      [10] 2922 	jp	_StopIn
                           2923 ;src/main.c:977: case S_stopped:       	Stopped();			break;
   0E93 C3r19r0C      [10] 2924 	jp  _Stopped
                           2925 ;src/main.c:978: case S_walking:      	Walking();			break;
   0E96 C3r8Dr0D      [10] 2926 	jp  _Walking
                           2927 ;src/main.c:979: case S_climbing:    	Climbing();			break;
   0E99 C3rFDr0D      [10] 2928 	jp  _Climbing
                           2929 ;src/main.c:980: case S_preJump:   		PreJump();			break;
   0E9C C3r6Br0D      [10] 2930 	jp  _PreJump
                           2931 ;src/main.c:981: case S_jumping:     	Jumping();			break;
   0E9F C3r00r0D      [10] 2932 	jp  _Jumping
                           2933 ;src/main.c:982: case S_falling:      	Falling();			break;
   0EA2 C3r8Br0B      [10] 2934 	jp  _Falling
                           2935 ;src/main.c:983: case S_landing:  		StopIn();
                           2936 ;src/main.c:984: }
   0EA5 C3r13r0C      [10] 2937 	jp  _StopIn
                           2938 ;src/main.c:989: void ExplodePlayer() {
                           2939 ;	---------------------------------
                           2940 ; Function ExplodePlayer
                           2941 ; ---------------------------------
   0EA8                    2942 _ExplodePlayer::
                           2943 ;src/main.c:991: cpct_akp_SFXPlay (4, 15, 40, 0, 0, AY_CHANNEL_A); // explosion
   0EA8 3E 01         [ 7] 2944 	ld	a, #0x01
   0EAA F5            [11] 2945 	push	af
   0EAB 33            [ 6] 2946 	inc	sp
   0EAC 21 00 00      [10] 2947 	ld	hl, #0x0000
   0EAF E5            [11] 2948 	push	hl
   0EB0 2E 28         [ 7] 2949 	ld	l, #0x28
   0EB2 E5            [11] 2950 	push	hl
   0EB3 21 04 0F      [10] 2951 	ld	hl, #0x0f04
   0EB6 E5            [11] 2952 	push	hl
   0EB7 CDr00r00      [17] 2953 	call	_cpct_akp_SFXPlay
   0EBA 21 07 00      [10] 2954 	ld	hl, #7
   0EBD 39            [11] 2955 	add	hl, sp
   0EBE F9            [ 6] 2956 	ld	sp, hl
                           2957 ;src/main.c:992: PrintExplosion(&spr[0], 0); Pause(20);
   0EBF AF            [ 4] 2958 	xor	a, a
   0EC0 F5            [11] 2959 	push	af
   0EC1 33            [ 6] 2960 	inc	sp
   0EC2 21r17r00      [10] 2961 	ld	hl, #_spr
   0EC5 E5            [11] 2962 	push	hl
   0EC6 CDrCAr08      [17] 2963 	call	_PrintExplosion
   0EC9 F1            [10] 2964 	pop	af
   0ECA 33            [ 6] 2965 	inc	sp
   0ECB 21 14 00      [10] 2966 	ld	hl, #0x0014
   0ECE CDr80r01      [17] 2967 	call	_Pause
                           2968 ;src/main.c:993: PrintExplosion(&spr[0], 1); Pause(20);
   0ED1 3E 01         [ 7] 2969 	ld	a, #0x01
   0ED3 F5            [11] 2970 	push	af
   0ED4 33            [ 6] 2971 	inc	sp
   0ED5 21r17r00      [10] 2972 	ld	hl, #_spr
   0ED8 E5            [11] 2973 	push	hl
   0ED9 CDrCAr08      [17] 2974 	call	_PrintExplosion
   0EDC F1            [10] 2975 	pop	af
   0EDD 33            [ 6] 2976 	inc	sp
   0EDE 21 14 00      [10] 2977 	ld	hl, #0x0014
   0EE1 CDr80r01      [17] 2978 	call	_Pause
                           2979 ;src/main.c:994: PrintExplosion(&spr[0], 0); Pause(20);
   0EE4 AF            [ 4] 2980 	xor	a, a
   0EE5 F5            [11] 2981 	push	af
   0EE6 33            [ 6] 2982 	inc	sp
   0EE7 21r17r00      [10] 2983 	ld	hl, #_spr
   0EEA E5            [11] 2984 	push	hl
   0EEB CDrCAr08      [17] 2985 	call	_PrintExplosion
   0EEE F1            [10] 2986 	pop	af
   0EEF 33            [ 6] 2987 	inc	sp
   0EF0 21 14 00      [10] 2988 	ld	hl, #0x0014
   0EF3 CDr80r01      [17] 2989 	call	_Pause
                           2990 ;src/main.c:995: DeleteSprite(&spr[0]);
   0EF6 21r17r00      [10] 2991 	ld	hl, #_spr
   0EF9 C3r5Cr08      [10] 2992 	jp  _DeleteSprite
                           2993 ;src/main.c:1012: void MoveEnemy(TSpr *pSpr) { //__z88dk_fastcall
                           2994 ;	---------------------------------
                           2995 ; Function MoveEnemy
                           2996 ; ---------------------------------
   0EFC                    2997 _MoveEnemy::
   0EFC DD E5         [15] 2998 	push	ix
   0EFE DD 21 00 00   [14] 2999 	ld	ix,#0
   0F02 DD 39         [15] 3000 	add	ix,sp
   0F04 21 F7 FF      [10] 3001 	ld	hl, #-9
   0F07 39            [11] 3002 	add	hl, sp
   0F08 F9            [ 6] 3003 	ld	sp, hl
                           3004 ;src/main.c:1013: switch(pSpr->movType) 
   0F09 DD 4E 04      [19] 3005 	ld	c,4 (ix)
   0F0C DD 46 05      [19] 3006 	ld	b,5 (ix)
   0F0F C5            [11] 3007 	push	bc
   0F10 FD E1         [14] 3008 	pop	iy
   0F12 FD 7E 11      [19] 3009 	ld	a, 17 (iy)
   0F15 DD 77 FD      [19] 3010 	ld	-3 (ix), a
                           3011 ;src/main.c:1017: if (pSpr->dir == D_right) {
   0F18 21 08 00      [10] 3012 	ld	hl, #0x0008
   0F1B 09            [11] 3013 	add	hl,bc
   0F1C EB            [ 4] 3014 	ex	de,hl
                           3015 ;src/main.c:1018: if (pSpr->x < pSpr->xMax) pSpr->x++;
   0F1D 21 0E 00      [10] 3016 	ld	hl, #0x000e
   0F20 09            [11] 3017 	add	hl,bc
   0F21 E3            [19] 3018 	ex	(sp), hl
                           3019 ;src/main.c:1022: if (pSpr->x > pSpr->xMin) pSpr->x--;
   0F22 21 0D 00      [10] 3020 	ld	hl, #0x000d
   0F25 09            [11] 3021 	add	hl,bc
   0F26 DD 75 FE      [19] 3022 	ld	-2 (ix), l
   0F29 DD 74 FF      [19] 3023 	ld	-1 (ix), h
                           3024 ;src/main.c:1013: switch(pSpr->movType) 
   0F2C DD 7E FD      [19] 3025 	ld	a, -3 (ix)
   0F2F B7            [ 4] 3026 	or	a, a
   0F30 28 2B         [12] 3027 	jr	Z,00101$
                           3028 ;src/main.c:1030: if (pSpr->y < pSpr->yMax) pSpr->y += 2;
   0F32 21 01 00      [10] 3029 	ld	hl, #0x0001
   0F35 09            [11] 3030 	add	hl,bc
   0F36 DD 75 FB      [19] 3031 	ld	-5 (ix), l
   0F39 DD 74 FC      [19] 3032 	ld	-4 (ix), h
   0F3C 21 10 00      [10] 3033 	ld	hl, #0x0010
   0F3F 09            [11] 3034 	add	hl,bc
   0F40 DD 75 F9      [19] 3035 	ld	-7 (ix), l
   0F43 DD 74 FA      [19] 3036 	ld	-6 (ix), h
                           3037 ;src/main.c:1034: if (pSpr->y > pSpr->yMin) pSpr->y -= 2;
   0F46 FD 21 0F 00   [14] 3038 	ld	iy, #0x000f
   0F4A FD 09         [15] 3039 	add	iy, bc
                           3040 ;src/main.c:1013: switch(pSpr->movType) 
   0F4C DD 7E FD      [19] 3041 	ld	a, -3 (ix)
   0F4F 3D            [ 4] 3042 	dec	a
   0F50 28 47         [12] 3043 	jr	Z,00111$
   0F52 DD 7E FD      [19] 3044 	ld	a, -3 (ix)
   0F55 D6 02         [ 7] 3045 	sub	a, #0x02
   0F57 CArD8r0F      [10] 3046 	jp	Z,00121$
   0F5A C3rE3r10      [10] 3047 	jp	00162$
                           3048 ;src/main.c:1016: case M_linear_X:
   0F5D                    3049 00101$:
                           3050 ;src/main.c:1017: if (pSpr->dir == D_right) {
   0F5D 1A            [ 7] 3051 	ld	a, (de)
                           3052 ;src/main.c:1018: if (pSpr->x < pSpr->xMax) pSpr->x++;
   0F5E F5            [11] 3053 	push	af
   0F5F 0A            [ 7] 3054 	ld	a, (bc)
   0F60 DD 77 FD      [19] 3055 	ld	-3 (ix), a
   0F63 F1            [10] 3056 	pop	af
                           3057 ;src/main.c:1017: if (pSpr->dir == D_right) {
   0F64 D6 03         [ 7] 3058 	sub	a, #0x03
   0F66 20 16         [12] 3059 	jr	NZ,00109$
                           3060 ;src/main.c:1018: if (pSpr->x < pSpr->xMax) pSpr->x++;
   0F68 E1            [10] 3061 	pop	hl
   0F69 E5            [11] 3062 	push	hl
   0F6A DD 7E FD      [19] 3063 	ld	a,-3 (ix)
   0F6D 96            [ 7] 3064 	sub	a,(hl)
   0F6E 30 08         [12] 3065 	jr	NC,00103$
   0F70 DD 7E FD      [19] 3066 	ld	a, -3 (ix)
   0F73 3C            [ 4] 3067 	inc	a
   0F74 02            [ 7] 3068 	ld	(bc), a
   0F75 C3rE3r10      [10] 3069 	jp	00162$
   0F78                    3070 00103$:
                           3071 ;src/main.c:1019: else pSpr->dir = D_left;
   0F78 3E 02         [ 7] 3072 	ld	a, #0x02
   0F7A 12            [ 7] 3073 	ld	(de), a
   0F7B C3rE3r10      [10] 3074 	jp	00162$
   0F7E                    3075 00109$:
                           3076 ;src/main.c:1022: if (pSpr->x > pSpr->xMin) pSpr->x--;
   0F7E DD 6E FE      [19] 3077 	ld	l,-2 (ix)
   0F81 DD 66 FF      [19] 3078 	ld	h,-1 (ix)
   0F84 7E            [ 7] 3079 	ld	a, (hl)
   0F85 DD 96 FD      [19] 3080 	sub	a, -3 (ix)
   0F88 30 09         [12] 3081 	jr	NC,00106$
   0F8A DD 5E FD      [19] 3082 	ld	e, -3 (ix)
   0F8D 1D            [ 4] 3083 	dec	e
   0F8E 7B            [ 4] 3084 	ld	a, e
   0F8F 02            [ 7] 3085 	ld	(bc), a
   0F90 C3rE3r10      [10] 3086 	jp	00162$
   0F93                    3087 00106$:
                           3088 ;src/main.c:1023: else pSpr->dir = D_right; 
   0F93 3E 03         [ 7] 3089 	ld	a, #0x03
   0F95 12            [ 7] 3090 	ld	(de), a
                           3091 ;src/main.c:1025: break;
   0F96 C3rE3r10      [10] 3092 	jp	00162$
                           3093 ;src/main.c:1028: case M_linear_Y:
   0F99                    3094 00111$:
                           3095 ;src/main.c:1029: if (pSpr->dir == D_down) {
   0F99 1A            [ 7] 3096 	ld	a, (de)
                           3097 ;src/main.c:1045: if (pSpr->y < pSpr->yMax && !OnPlatform(pSpr)) pSpr->y++;
   0F9A DD 6E FB      [19] 3098 	ld	l,-5 (ix)
   0F9D DD 66 FC      [19] 3099 	ld	h,-4 (ix)
   0FA0 4E            [ 7] 3100 	ld	c, (hl)
                           3101 ;src/main.c:1029: if (pSpr->dir == D_down) {
   0FA1 3D            [ 4] 3102 	dec	a
   0FA2 20 1C         [12] 3103 	jr	NZ,00119$
                           3104 ;src/main.c:1030: if (pSpr->y < pSpr->yMax) pSpr->y += 2;
   0FA4 DD 6E F9      [19] 3105 	ld	l,-7 (ix)
   0FA7 DD 66 FA      [19] 3106 	ld	h,-6 (ix)
   0FAA 46            [ 7] 3107 	ld	b, (hl)
   0FAB 79            [ 4] 3108 	ld	a, c
   0FAC 90            [ 4] 3109 	sub	a, b
   0FAD 30 0C         [12] 3110 	jr	NC,00113$
   0FAF 0C            [ 4] 3111 	inc	c
   0FB0 0C            [ 4] 3112 	inc	c
   0FB1 DD 6E FB      [19] 3113 	ld	l,-5 (ix)
   0FB4 DD 66 FC      [19] 3114 	ld	h,-4 (ix)
   0FB7 71            [ 7] 3115 	ld	(hl), c
   0FB8 C3rE3r10      [10] 3116 	jp	00162$
   0FBB                    3117 00113$:
                           3118 ;src/main.c:1031: else pSpr->dir = D_up;
   0FBB AF            [ 4] 3119 	xor	a, a
   0FBC 12            [ 7] 3120 	ld	(de), a
   0FBD C3rE3r10      [10] 3121 	jp	00162$
   0FC0                    3122 00119$:
                           3123 ;src/main.c:1034: if (pSpr->y > pSpr->yMin) pSpr->y -= 2;
   0FC0 FD 7E 00      [19] 3124 	ld	a, 0 (iy)
   0FC3 91            [ 4] 3125 	sub	a, c
   0FC4 30 0C         [12] 3126 	jr	NC,00116$
   0FC6 0D            [ 4] 3127 	dec	c
   0FC7 0D            [ 4] 3128 	dec	c
   0FC8 DD 6E FB      [19] 3129 	ld	l,-5 (ix)
   0FCB DD 66 FC      [19] 3130 	ld	h,-4 (ix)
   0FCE 71            [ 7] 3131 	ld	(hl), c
   0FCF C3rE3r10      [10] 3132 	jp	00162$
   0FD2                    3133 00116$:
                           3134 ;src/main.c:1035: else pSpr->dir = D_down; 
   0FD2 3E 01         [ 7] 3135 	ld	a, #0x01
   0FD4 12            [ 7] 3136 	ld	(de), a
                           3137 ;src/main.c:1037: break;
   0FD5 C3rE3r10      [10] 3138 	jp	00162$
                           3139 ;src/main.c:1040: case M_diagonal:
   0FD8                    3140 00121$:
                           3141 ;src/main.c:1042: if (pSpr->dir == D_right_down || pSpr->dir == D_right) {
   0FD8 1A            [ 7] 3142 	ld	a, (de)
   0FD9 FE 07         [ 7] 3143 	cp	a, #0x07
   0FDB 28 04         [12] 3144 	jr	Z,00157$
   0FDD FE 03         [ 7] 3145 	cp	a, #0x03
   0FDF 20 43         [12] 3146 	jr	NZ,00158$
   0FE1                    3147 00157$:
                           3148 ;src/main.c:1043: if (pSpr->x < pSpr->xMax) {
   0FE1 0A            [ 7] 3149 	ld	a, (bc)
   0FE2 E1            [10] 3150 	pop	hl
   0FE3 E5            [11] 3151 	push	hl
   0FE4 6E            [ 7] 3152 	ld	l, (hl)
   0FE5 BD            [ 4] 3153 	cp	a, l
   0FE6 30 36         [12] 3154 	jr	NC,00127$
                           3155 ;src/main.c:1044: pSpr->x++;					
   0FE8 3C            [ 4] 3156 	inc	a
   0FE9 02            [ 7] 3157 	ld	(bc), a
                           3158 ;src/main.c:1045: if (pSpr->y < pSpr->yMax && !OnPlatform(pSpr)) pSpr->y++;
   0FEA DD 6E FB      [19] 3159 	ld	l,-5 (ix)
   0FED DD 66 FC      [19] 3160 	ld	h,-4 (ix)
   0FF0 7E            [ 7] 3161 	ld	a, (hl)
   0FF1 DD 6E F9      [19] 3162 	ld	l,-7 (ix)
   0FF4 DD 66 FA      [19] 3163 	ld	h,-6 (ix)
   0FF7 6E            [ 7] 3164 	ld	l, (hl)
   0FF8 95            [ 4] 3165 	sub	a, l
   0FF9 30 1D         [12] 3166 	jr	NC,00123$
   0FFB D5            [11] 3167 	push	de
   0FFC 69            [ 4] 3168 	ld	l, c
   0FFD 60            [ 4] 3169 	ld	h, b
   0FFE CDrA7r03      [17] 3170 	call	_OnPlatform
   1001 D1            [10] 3171 	pop	de
   1002 7D            [ 4] 3172 	ld	a, l
   1003 B7            [ 4] 3173 	or	a, a
   1004 20 12         [12] 3174 	jr	NZ,00123$
   1006 DD 6E FB      [19] 3175 	ld	l,-5 (ix)
   1009 DD 66 FC      [19] 3176 	ld	h,-4 (ix)
   100C 4E            [ 7] 3177 	ld	c, (hl)
   100D 0C            [ 4] 3178 	inc	c
   100E DD 6E FB      [19] 3179 	ld	l,-5 (ix)
   1011 DD 66 FC      [19] 3180 	ld	h,-4 (ix)
   1014 71            [ 7] 3181 	ld	(hl), c
   1015 C3rE3r10      [10] 3182 	jp	00162$
   1018                    3183 00123$:
                           3184 ;src/main.c:1046: else pSpr->dir = D_right_up;
   1018 3E 06         [ 7] 3185 	ld	a, #0x06
   101A 12            [ 7] 3186 	ld	(de), a
   101B C3rE3r10      [10] 3187 	jp	00162$
   101E                    3188 00127$:
                           3189 ;src/main.c:1048: else pSpr->dir = D_left_down;
   101E 3E 05         [ 7] 3190 	ld	a, #0x05
   1020 12            [ 7] 3191 	ld	(de), a
   1021 C3rE3r10      [10] 3192 	jp	00162$
   1024                    3193 00158$:
                           3194 ;src/main.c:1051: else if (pSpr->dir == D_right_up) {
   1024 FE 06         [ 7] 3195 	cp	a, #0x06
   1026 20 2D         [12] 3196 	jr	NZ,00155$
                           3197 ;src/main.c:1052: if (pSpr->x < pSpr->xMax) {
   1028 0A            [ 7] 3198 	ld	a, (bc)
   1029 E1            [10] 3199 	pop	hl
   102A E5            [11] 3200 	push	hl
   102B 6E            [ 7] 3201 	ld	l, (hl)
   102C BD            [ 4] 3202 	cp	a, l
   102D 30 20         [12] 3203 	jr	NC,00133$
                           3204 ;src/main.c:1053: pSpr->x++;
   102F 3C            [ 4] 3205 	inc	a
   1030 02            [ 7] 3206 	ld	(bc), a
                           3207 ;src/main.c:1054: if (pSpr->y > pSpr->yMin) pSpr->y--;
   1031 DD 6E FB      [19] 3208 	ld	l,-5 (ix)
   1034 DD 66 FC      [19] 3209 	ld	h,-4 (ix)
   1037 4E            [ 7] 3210 	ld	c, (hl)
   1038 FD 7E 00      [19] 3211 	ld	a, 0 (iy)
   103B 91            [ 4] 3212 	sub	a, c
   103C 30 0B         [12] 3213 	jr	NC,00130$
   103E 0D            [ 4] 3214 	dec	c
   103F DD 6E FB      [19] 3215 	ld	l,-5 (ix)
   1042 DD 66 FC      [19] 3216 	ld	h,-4 (ix)
   1045 71            [ 7] 3217 	ld	(hl), c
   1046 C3rE3r10      [10] 3218 	jp	00162$
   1049                    3219 00130$:
                           3220 ;src/main.c:1055: else pSpr->dir = D_right_down;
   1049 3E 07         [ 7] 3221 	ld	a, #0x07
   104B 12            [ 7] 3222 	ld	(de), a
   104C C3rE3r10      [10] 3223 	jp	00162$
   104F                    3224 00133$:
                           3225 ;src/main.c:1057: else pSpr->dir = D_left_up;
   104F 3E 04         [ 7] 3226 	ld	a, #0x04
   1051 12            [ 7] 3227 	ld	(de), a
   1052 C3rE3r10      [10] 3228 	jp	00162$
   1055                    3229 00155$:
                           3230 ;src/main.c:1060: else if (pSpr->dir == D_left_up || pSpr->dir == D_left)	{
   1055 FE 04         [ 7] 3231 	cp	a, #0x04
   1057 28 04         [12] 3232 	jr	Z,00150$
   1059 FE 02         [ 7] 3233 	cp	a, #0x02
   105B 20 37         [12] 3234 	jr	NZ,00151$
   105D                    3235 00150$:
                           3236 ;src/main.c:1061: if (pSpr->x > pSpr->xMin) {
   105D 0A            [ 7] 3237 	ld	a, (bc)
   105E DD 77 F7      [19] 3238 	ld	-9 (ix), a
   1061 DD 6E FE      [19] 3239 	ld	l,-2 (ix)
   1064 DD 66 FF      [19] 3240 	ld	h,-1 (ix)
   1067 7E            [ 7] 3241 	ld	a, (hl)
   1068 DD 96 F7      [19] 3242 	sub	a, -9 (ix)
   106B 30 22         [12] 3243 	jr	NC,00139$
                           3244 ;src/main.c:1062: pSpr->x--;
   106D DD 7E F7      [19] 3245 	ld	a, -9 (ix)
   1070 C6 FF         [ 7] 3246 	add	a, #0xff
   1072 02            [ 7] 3247 	ld	(bc), a
                           3248 ;src/main.c:1063: if (pSpr->y > pSpr->yMin) pSpr->y--;
   1073 DD 6E FB      [19] 3249 	ld	l,-5 (ix)
   1076 DD 66 FC      [19] 3250 	ld	h,-4 (ix)
   1079 4E            [ 7] 3251 	ld	c, (hl)
   107A FD 7E 00      [19] 3252 	ld	a, 0 (iy)
   107D 91            [ 4] 3253 	sub	a, c
   107E 30 0A         [12] 3254 	jr	NC,00136$
   1080 0D            [ 4] 3255 	dec	c
   1081 DD 6E FB      [19] 3256 	ld	l,-5 (ix)
   1084 DD 66 FC      [19] 3257 	ld	h,-4 (ix)
   1087 71            [ 7] 3258 	ld	(hl), c
   1088 18 59         [12] 3259 	jr	00162$
   108A                    3260 00136$:
                           3261 ;src/main.c:1064: else pSpr->dir = D_left_down;
   108A 3E 05         [ 7] 3262 	ld	a, #0x05
   108C 12            [ 7] 3263 	ld	(de), a
   108D 18 54         [12] 3264 	jr	00162$
   108F                    3265 00139$:
                           3266 ;src/main.c:1066: else pSpr->dir = D_right_up; 
   108F 3E 06         [ 7] 3267 	ld	a, #0x06
   1091 12            [ 7] 3268 	ld	(de), a
   1092 18 4F         [12] 3269 	jr	00162$
   1094                    3270 00151$:
                           3271 ;src/main.c:1069: else if (pSpr->dir == D_left_down) {
   1094 D6 05         [ 7] 3272 	sub	a, #0x05
   1096 20 4B         [12] 3273 	jr	NZ,00162$
                           3274 ;src/main.c:1070: if (pSpr->x > pSpr->xMin) {
   1098 0A            [ 7] 3275 	ld	a, (bc)
   1099 DD 77 F7      [19] 3276 	ld	-9 (ix), a
   109C DD 6E FE      [19] 3277 	ld	l,-2 (ix)
   109F DD 66 FF      [19] 3278 	ld	h,-1 (ix)
   10A2 7E            [ 7] 3279 	ld	a, (hl)
   10A3 DD 96 F7      [19] 3280 	sub	a, -9 (ix)
   10A6 30 38         [12] 3281 	jr	NC,00146$
                           3282 ;src/main.c:1071: pSpr->x--;
   10A8 DD 7E F7      [19] 3283 	ld	a, -9 (ix)
   10AB C6 FF         [ 7] 3284 	add	a, #0xff
   10AD 02            [ 7] 3285 	ld	(bc), a
                           3286 ;src/main.c:1072: if (pSpr->y < pSpr->yMax && !OnPlatform(pSpr)) pSpr->y++;
   10AE DD 6E FB      [19] 3287 	ld	l,-5 (ix)
   10B1 DD 66 FC      [19] 3288 	ld	h,-4 (ix)
   10B4 7E            [ 7] 3289 	ld	a, (hl)
   10B5 DD 6E F9      [19] 3290 	ld	l,-7 (ix)
   10B8 DD 66 FA      [19] 3291 	ld	h,-6 (ix)
   10BB 6E            [ 7] 3292 	ld	l, (hl)
   10BC 95            [ 4] 3293 	sub	a, l
   10BD 30 1C         [12] 3294 	jr	NC,00142$
   10BF D5            [11] 3295 	push	de
   10C0 69            [ 4] 3296 	ld	l, c
   10C1 60            [ 4] 3297 	ld	h, b
   10C2 CDrA7r03      [17] 3298 	call	_OnPlatform
   10C5 D1            [10] 3299 	pop	de
   10C6 7D            [ 4] 3300 	ld	a, l
   10C7 B7            [ 4] 3301 	or	a, a
   10C8 20 11         [12] 3302 	jr	NZ,00142$
   10CA DD 6E FB      [19] 3303 	ld	l,-5 (ix)
   10CD DD 66 FC      [19] 3304 	ld	h,-4 (ix)
   10D0 4E            [ 7] 3305 	ld	c, (hl)
   10D1 0C            [ 4] 3306 	inc	c
   10D2 DD 6E FB      [19] 3307 	ld	l,-5 (ix)
   10D5 DD 66 FC      [19] 3308 	ld	h,-4 (ix)
   10D8 71            [ 7] 3309 	ld	(hl), c
   10D9 18 08         [12] 3310 	jr	00162$
   10DB                    3311 00142$:
                           3312 ;src/main.c:1073: else pSpr->dir = D_left_up;
   10DB 3E 04         [ 7] 3313 	ld	a, #0x04
   10DD 12            [ 7] 3314 	ld	(de), a
   10DE 18 03         [12] 3315 	jr	00162$
   10E0                    3316 00146$:
                           3317 ;src/main.c:1075: else pSpr->dir = D_right_down;
   10E0 3E 07         [ 7] 3318 	ld	a, #0x07
   10E2 12            [ 7] 3319 	ld	(de), a
                           3320 ;src/main.c:1078: }
   10E3                    3321 00162$:
   10E3 DD F9         [10] 3322 	ld	sp, ix
   10E5 DD E1         [14] 3323 	pop	ix
   10E7 C9            [10] 3324 	ret
                           3325 ;src/main.c:1083: void SetEnemyParams(u8 i, u8 ident, u8 mov, u8 lives, u8 dir, u8 x, u8 y, u8 xMin, u8 yMin, u8 xMax, u8 yMax) {
                           3326 ;	---------------------------------
                           3327 ; Function SetEnemyParams
                           3328 ; ---------------------------------
   10E8                    3329 _SetEnemyParams::
   10E8 DD E5         [15] 3330 	push	ix
   10EA DD 21 00 00   [14] 3331 	ld	ix,#0
   10EE DD 39         [15] 3332 	add	ix,sp
                           3333 ;src/main.c:1084: spr[i].status = S_walking;
   10F0 01r17r00      [10] 3334 	ld	bc, #_spr+0
   10F3 DD 5E 04      [19] 3335 	ld	e,4 (ix)
   10F6 16 00         [ 7] 3336 	ld	d,#0x00
   10F8 6B            [ 4] 3337 	ld	l, e
   10F9 62            [ 4] 3338 	ld	h, d
   10FA 29            [11] 3339 	add	hl, hl
   10FB 29            [11] 3340 	add	hl, hl
   10FC 29            [11] 3341 	add	hl, hl
   10FD 19            [11] 3342 	add	hl, de
   10FE 29            [11] 3343 	add	hl, hl
   10FF 19            [11] 3344 	add	hl, de
   1100 09            [11] 3345 	add	hl,bc
   1101 4D            [ 4] 3346 	ld	c, l
   1102 44            [ 4] 3347 	ld	b, h
   1103 21 04 00      [10] 3348 	ld	hl, #0x0004
   1106 09            [11] 3349 	add	hl, bc
   1107 36 01         [10] 3350 	ld	(hl), #0x01
                           3351 ;src/main.c:1085: spr[i].ident = ident; 
   1109 21 12 00      [10] 3352 	ld	hl, #0x0012
   110C 09            [11] 3353 	add	hl, bc
   110D DD 7E 05      [19] 3354 	ld	a, 5 (ix)
   1110 77            [ 7] 3355 	ld	(hl), a
                           3356 ;src/main.c:1086: spr[i].movType = mov;
   1111 21 11 00      [10] 3357 	ld	hl, #0x0011
   1114 09            [11] 3358 	add	hl, bc
   1115 DD 7E 06      [19] 3359 	ld	a, 6 (ix)
   1118 77            [ 7] 3360 	ld	(hl), a
                           3361 ;src/main.c:1087: spr[i].lives = lives; 
   1119 21 09 00      [10] 3362 	ld	hl, #0x0009
   111C 09            [11] 3363 	add	hl, bc
   111D DD 7E 07      [19] 3364 	ld	a, 7 (ix)
   1120 77            [ 7] 3365 	ld	(hl), a
                           3366 ;src/main.c:1088: spr[i].dir = dir; 
   1121 21 08 00      [10] 3367 	ld	hl, #0x0008
   1124 09            [11] 3368 	add	hl, bc
   1125 DD 7E 08      [19] 3369 	ld	a, 8 (ix)
   1128 77            [ 7] 3370 	ld	(hl), a
                           3371 ;src/main.c:1089: spr[i].x = spr[i].px = x;
   1129 59            [ 4] 3372 	ld	e, c
   112A 50            [ 4] 3373 	ld	d, b
   112B 13            [ 6] 3374 	inc	de
   112C 13            [ 6] 3375 	inc	de
   112D DD 7E 09      [19] 3376 	ld	a, 9 (ix)
   1130 12            [ 7] 3377 	ld	(de), a
   1131 DD 7E 09      [19] 3378 	ld	a, 9 (ix)
   1134 02            [ 7] 3379 	ld	(bc), a
                           3380 ;src/main.c:1090: spr[i].y = spr[i].py = y;
   1135 59            [ 4] 3381 	ld	e, c
   1136 50            [ 4] 3382 	ld	d, b
   1137 13            [ 6] 3383 	inc	de
   1138 69            [ 4] 3384 	ld	l, c
   1139 60            [ 4] 3385 	ld	h, b
   113A 23            [ 6] 3386 	inc	hl
   113B 23            [ 6] 3387 	inc	hl
   113C 23            [ 6] 3388 	inc	hl
   113D DD 7E 0A      [19] 3389 	ld	a, 10 (ix)
   1140 77            [ 7] 3390 	ld	(hl), a
   1141 DD 7E 0A      [19] 3391 	ld	a, 10 (ix)
   1144 12            [ 7] 3392 	ld	(de), a
                           3393 ;src/main.c:1091: spr[i].xMin = xMin;
   1145 21 0D 00      [10] 3394 	ld	hl, #0x000d
   1148 09            [11] 3395 	add	hl, bc
   1149 DD 7E 0B      [19] 3396 	ld	a, 11 (ix)
   114C 77            [ 7] 3397 	ld	(hl), a
                           3398 ;src/main.c:1092: spr[i].yMin = yMin;
   114D 21 0F 00      [10] 3399 	ld	hl, #0x000f
   1150 09            [11] 3400 	add	hl, bc
   1151 DD 7E 0C      [19] 3401 	ld	a, 12 (ix)
   1154 77            [ 7] 3402 	ld	(hl), a
                           3403 ;src/main.c:1093: spr[i].xMax = xMax;
   1155 21 0E 00      [10] 3404 	ld	hl, #0x000e
   1158 09            [11] 3405 	add	hl, bc
   1159 DD 7E 0D      [19] 3406 	ld	a, 13 (ix)
   115C 77            [ 7] 3407 	ld	(hl), a
                           3408 ;src/main.c:1094: spr[i].yMax = yMax; 
   115D 21 10 00      [10] 3409 	ld	hl, #0x0010
   1160 09            [11] 3410 	add	hl, bc
   1161 DD 7E 0E      [19] 3411 	ld	a, 14 (ix)
   1164 77            [ 7] 3412 	ld	(hl), a
                           3413 ;src/main.c:1095: spr[i].touched = 0;
   1165 21 0A 00      [10] 3414 	ld	hl, #0x000a
   1168 09            [11] 3415 	add	hl, bc
   1169 36 00         [10] 3416 	ld	(hl), #0x00
   116B DD E1         [14] 3417 	pop	ix
   116D C9            [10] 3418 	ret
                           3419 ;src/main.c:1105: void SetEnemies() {
                           3420 ;	---------------------------------
                           3421 ; Function SetEnemies
                           3422 ; ---------------------------------
   116E                    3423 _SetEnemies::
                           3424 ;src/main.c:1106: switch(mapNumber) {
   116E FD 21r00r00   [14] 3425 	ld	iy, #_mapNumber
   1172 FD 7E 00      [19] 3426 	ld	a, 0 (iy)
   1175 B7            [ 4] 3427 	or	a, a
   1176 28 0F         [12] 3428 	jr	Z,00101$
   1178 FD 7E 00      [19] 3429 	ld	a, 0 (iy)
   117B 3D            [ 4] 3430 	dec	a
   117C 28 6C         [12] 3431 	jr	Z,00102$
   117E FD 7E 00      [19] 3432 	ld	a, 0 (iy)
   1181 D6 02         [ 7] 3433 	sub	a, #0x02
   1183 CAr50r12      [10] 3434 	jp	Z,00103$
   1186 C9            [10] 3435 	ret
                           3436 ;src/main.c:1107: case 0: { // upper left deck upper floor #3
   1187                    3437 00101$:
                           3438 ;src/main.c:1109: SetEnemyParams(1, ARACNOVIRUS, 	M_linear_Y, 	2,  D_right, 48,  64,   48,   64,   48,  160);
   1187 21 30 A0      [10] 3439 	ld	hl, #0xa030
   118A E5            [11] 3440 	push	hl
   118B 26 40         [ 7] 3441 	ld	h, #0x40
   118D E5            [11] 3442 	push	hl
   118E 2E 30         [ 7] 3443 	ld	l, #0x30
   1190 E5            [11] 3444 	push	hl
   1191 21 02 03      [10] 3445 	ld	hl, #0x0302
   1194 E5            [11] 3446 	push	hl
   1195 26 01         [ 7] 3447 	ld	h, #0x01
   1197 E5            [11] 3448 	push	hl
   1198 3E 01         [ 7] 3449 	ld	a, #0x01
   119A F5            [11] 3450 	push	af
   119B 33            [ 6] 3451 	inc	sp
   119C CDrE8r10      [17] 3452 	call	_SetEnemyParams
   119F 21 0B 00      [10] 3453 	ld	hl, #11
   11A2 39            [11] 3454 	add	hl, sp
   11A3 F9            [ 6] 3455 	ld	sp, hl
                           3456 ;src/main.c:1110: SetEnemyParams(2, INFECTED, 	M_linear_X, 	3,  D_right, 16, 160,    8,  160,   64,  160);
   11A4 21 40 A0      [10] 3457 	ld	hl, #0xa040
   11A7 E5            [11] 3458 	push	hl
   11A8 2E 08         [ 7] 3459 	ld	l, #0x08
   11AA E5            [11] 3460 	push	hl
   11AB 2E 10         [ 7] 3461 	ld	l, #0x10
   11AD E5            [11] 3462 	push	hl
   11AE 21 03 03      [10] 3463 	ld	hl, #0x0303
   11B1 E5            [11] 3464 	push	hl
   11B2 26 00         [ 7] 3465 	ld	h, #0x00
   11B4 E5            [11] 3466 	push	hl
   11B5 3E 02         [ 7] 3467 	ld	a, #0x02
   11B7 F5            [11] 3468 	push	af
   11B8 33            [ 6] 3469 	inc	sp
   11B9 CDrE8r10      [17] 3470 	call	_SetEnemyParams
   11BC 21 0B 00      [10] 3471 	ld	hl, #11
   11BF 39            [11] 3472 	add	hl, sp
   11C0 F9            [ 6] 3473 	ld	sp, hl
                           3474 ;src/main.c:1111: SetEnemyParams(3, ARACNOVIRUS,	M_linear_X,		0,  D_right,  0,   0,    0,    0,    0,    0);
   11C1 21 00 00      [10] 3475 	ld	hl, #0x0000
   11C4 E5            [11] 3476 	push	hl
   11C5 2E 00         [ 7] 3477 	ld	l, #0x00
   11C7 E5            [11] 3478 	push	hl
   11C8 2E 00         [ 7] 3479 	ld	l, #0x00
   11CA E5            [11] 3480 	push	hl
   11CB 26 03         [ 7] 3481 	ld	h, #0x03
   11CD E5            [11] 3482 	push	hl
   11CE 21 02 00      [10] 3483 	ld	hl, #0x0002
   11D1 E5            [11] 3484 	push	hl
   11D2 3E 03         [ 7] 3485 	ld	a, #0x03
   11D4 F5            [11] 3486 	push	af
   11D5 33            [ 6] 3487 	inc	sp
   11D6 CDrE8r10      [17] 3488 	call	_SetEnemyParams
   11D9 21 0B 00      [10] 3489 	ld	hl, #11
   11DC 39            [11] 3490 	add	hl, sp
   11DD F9            [ 6] 3491 	ld	sp, hl
                           3492 ;src/main.c:1113: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk0_end);
   11DE 21rE5r00      [10] 3493 	ld	hl, #(_mappk0 + 0x00e5)
   11E1 E5            [11] 3494 	push	hl
   11E2 21 20 16      [10] 3495 	ld	hl, #0x1620
   11E5 E5            [11] 3496 	push	hl
   11E6 CDr00r00      [17] 3497 	call	_cpct_zx7b_decrunch_s
                           3498 ;src/main.c:1114: break;
   11E9 C9            [10] 3499 	ret
                           3500 ;src/main.c:1116: case 1: { // upper left deck upper floor #2
   11EA                    3501 00102$:
                           3502 ;src/main.c:1118: SetEnemyParams(1, PELUSOID,		M_diagonal, 	3,	D_right,  8,  52,    8,   52,   64,  160);
   11EA 21 40 A0      [10] 3503 	ld	hl, #0xa040
   11ED E5            [11] 3504 	push	hl
   11EE 21 08 34      [10] 3505 	ld	hl, #0x3408
   11F1 E5            [11] 3506 	push	hl
   11F2 2E 08         [ 7] 3507 	ld	l, #0x08
   11F4 E5            [11] 3508 	push	hl
   11F5 21 03 03      [10] 3509 	ld	hl, #0x0303
   11F8 E5            [11] 3510 	push	hl
   11F9 21 01 02      [10] 3511 	ld	hl, #0x0201
   11FC E5            [11] 3512 	push	hl
   11FD 3E 01         [ 7] 3513 	ld	a, #0x01
   11FF F5            [11] 3514 	push	af
   1200 33            [ 6] 3515 	inc	sp
   1201 CDrE8r10      [17] 3516 	call	_SetEnemyParams
   1204 21 0B 00      [10] 3517 	ld	hl, #11
   1207 39            [11] 3518 	add	hl, sp
   1208 F9            [ 6] 3519 	ld	sp, hl
                           3520 ;src/main.c:1119: SetEnemyParams(2, PELUSOID, 	M_linear_Y, 	3,	D_right, 32,  52,   32,   52,   32,  160);		
   1209 21 20 A0      [10] 3521 	ld	hl, #0xa020
   120C E5            [11] 3522 	push	hl
   120D 26 34         [ 7] 3523 	ld	h, #0x34
   120F E5            [11] 3524 	push	hl
   1210 2E 20         [ 7] 3525 	ld	l, #0x20
   1212 E5            [11] 3526 	push	hl
   1213 21 03 03      [10] 3527 	ld	hl, #0x0303
   1216 E5            [11] 3528 	push	hl
   1217 21 01 01      [10] 3529 	ld	hl, #0x0101
   121A E5            [11] 3530 	push	hl
   121B 3E 02         [ 7] 3531 	ld	a, #0x02
   121D F5            [11] 3532 	push	af
   121E 33            [ 6] 3533 	inc	sp
   121F CDrE8r10      [17] 3534 	call	_SetEnemyParams
   1222 21 0B 00      [10] 3535 	ld	hl, #11
   1225 39            [11] 3536 	add	hl, sp
   1226 F9            [ 6] 3537 	ld	sp, hl
                           3538 ;src/main.c:1120: SetEnemyParams(3, PELUSOID, 	M_linear_X,		0,	D_right,  0,   0,    0,    0,    0,    0);
   1227 21 00 00      [10] 3539 	ld	hl, #0x0000
   122A E5            [11] 3540 	push	hl
   122B 2E 00         [ 7] 3541 	ld	l, #0x00
   122D E5            [11] 3542 	push	hl
   122E 2E 00         [ 7] 3543 	ld	l, #0x00
   1230 E5            [11] 3544 	push	hl
   1231 26 03         [ 7] 3545 	ld	h, #0x03
   1233 E5            [11] 3546 	push	hl
   1234 21 01 00      [10] 3547 	ld	hl, #0x0001
   1237 E5            [11] 3548 	push	hl
   1238 3E 03         [ 7] 3549 	ld	a, #0x03
   123A F5            [11] 3550 	push	af
   123B 33            [ 6] 3551 	inc	sp
   123C CDrE8r10      [17] 3552 	call	_SetEnemyParams
   123F 21 0B 00      [10] 3553 	ld	hl, #11
   1242 39            [11] 3554 	add	hl, sp
   1243 F9            [ 6] 3555 	ld	sp, hl
                           3556 ;src/main.c:1122: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk1_end);
   1244 21rD3r00      [10] 3557 	ld	hl, #(_mappk1 + 0x00d3)
   1247 E5            [11] 3558 	push	hl
   1248 21 20 16      [10] 3559 	ld	hl, #0x1620
   124B E5            [11] 3560 	push	hl
   124C CDr00r00      [17] 3561 	call	_cpct_zx7b_decrunch_s
                           3562 ;src/main.c:1123: break;		
   124F C9            [10] 3563 	ret
                           3564 ;src/main.c:1125: case 2: { // upper left deck upper floor #1
   1250                    3565 00103$:
                           3566 ;src/main.c:1127: SetEnemyParams(1, INFECTED,		M_linear_X,		2,	D_left, 32,  96,    8,   96,   64,   96);
   1250 21 40 60      [10] 3567 	ld	hl, #0x6040
   1253 E5            [11] 3568 	push	hl
   1254 2E 08         [ 7] 3569 	ld	l, #0x08
   1256 E5            [11] 3570 	push	hl
   1257 2E 20         [ 7] 3571 	ld	l, #0x20
   1259 E5            [11] 3572 	push	hl
   125A 21 02 02      [10] 3573 	ld	hl, #0x0202
   125D E5            [11] 3574 	push	hl
   125E 21 03 00      [10] 3575 	ld	hl, #0x0003
   1261 E5            [11] 3576 	push	hl
   1262 3E 01         [ 7] 3577 	ld	a, #0x01
   1264 F5            [11] 3578 	push	af
   1265 33            [ 6] 3579 	inc	sp
   1266 CDrE8r10      [17] 3580 	call	_SetEnemyParams
   1269 21 0B 00      [10] 3581 	ld	hl, #11
   126C 39            [11] 3582 	add	hl, sp
   126D F9            [ 6] 3583 	ld	sp, hl
                           3584 ;src/main.c:1128: SetEnemyParams(2, INFECTED, 	M_linear_X, 	2,	D_left, 64, 128,   16,  128,   64,  128);
   126E 21 40 80      [10] 3585 	ld	hl, #0x8040
   1271 E5            [11] 3586 	push	hl
   1272 2E 10         [ 7] 3587 	ld	l, #0x10
   1274 E5            [11] 3588 	push	hl
   1275 2E 40         [ 7] 3589 	ld	l, #0x40
   1277 E5            [11] 3590 	push	hl
   1278 21 02 02      [10] 3591 	ld	hl, #0x0202
   127B E5            [11] 3592 	push	hl
   127C 21 03 00      [10] 3593 	ld	hl, #0x0003
   127F E5            [11] 3594 	push	hl
   1280 3E 02         [ 7] 3595 	ld	a, #0x02
   1282 F5            [11] 3596 	push	af
   1283 33            [ 6] 3597 	inc	sp
   1284 CDrE8r10      [17] 3598 	call	_SetEnemyParams
   1287 21 0B 00      [10] 3599 	ld	hl, #11
   128A 39            [11] 3600 	add	hl, sp
   128B F9            [ 6] 3601 	ld	sp, hl
                           3602 ;src/main.c:1129: SetEnemyParams(3, INFECTED, 	M_linear_X,		2,	D_right, 24, 160,   8,  160,   48,  160);
   128C 21 30 A0      [10] 3603 	ld	hl, #0xa030
   128F E5            [11] 3604 	push	hl
   1290 2E 08         [ 7] 3605 	ld	l, #0x08
   1292 E5            [11] 3606 	push	hl
   1293 2E 18         [ 7] 3607 	ld	l, #0x18
   1295 E5            [11] 3608 	push	hl
   1296 21 02 03      [10] 3609 	ld	hl, #0x0302
   1299 E5            [11] 3610 	push	hl
   129A 21 03 00      [10] 3611 	ld	hl, #0x0003
   129D E5            [11] 3612 	push	hl
   129E 3E 03         [ 7] 3613 	ld	a, #0x03
   12A0 F5            [11] 3614 	push	af
   12A1 33            [ 6] 3615 	inc	sp
   12A2 CDrE8r10      [17] 3616 	call	_SetEnemyParams
   12A5 21 0B 00      [10] 3617 	ld	hl, #11
   12A8 39            [11] 3618 	add	hl, sp
   12A9 F9            [ 6] 3619 	ld	sp, hl
                           3620 ;src/main.c:1131: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk2_end);
   12AA 21rE1r00      [10] 3621 	ld	hl, #(_mappk2 + 0x00e1)
   12AD E5            [11] 3622 	push	hl
   12AE 21 20 16      [10] 3623 	ld	hl, #0x1620
   12B1 E5            [11] 3624 	push	hl
   12B2 CDr00r00      [17] 3625 	call	_cpct_zx7b_decrunch_s
                           3626 ;src/main.c:1133: }
   12B5 C9            [10] 3627 	ret
                           3628 ;src/main.c:1138: void ExplosionSecuence(TSpr *pSpr) __z88dk_fastcall {
                           3629 ;	---------------------------------
                           3630 ; Function ExplosionSecuence
                           3631 ; ---------------------------------
   12B6                    3632 _ExplosionSecuence::
   12B6 4D            [ 4] 3633 	ld	c, l
   12B7 44            [ 4] 3634 	ld	b, h
                           3635 ;src/main.c:1139: if (pSpr->touched == 10) DeleteSprite(pSpr); 	
   12B8 21 0A 00      [10] 3636 	ld	hl, #0x000a
   12BB 09            [11] 3637 	add	hl,bc
   12BC EB            [ 4] 3638 	ex	de,hl
   12BD 1A            [ 7] 3639 	ld	a, (de)
   12BE 6F            [ 4] 3640 	ld	l,a
   12BF D6 0A         [ 7] 3641 	sub	a, #0x0a
   12C1 20 09         [12] 3642 	jr	NZ,00113$
   12C3 D5            [11] 3643 	push	de
   12C4 69            [ 4] 3644 	ld	l, c
   12C5 60            [ 4] 3645 	ld	h, b
   12C6 CDr5Cr08      [17] 3646 	call	_DeleteSprite
   12C9 D1            [10] 3647 	pop	de
   12CA 18 43         [12] 3648 	jr	00114$
   12CC                    3649 00113$:
                           3650 ;src/main.c:1140: else if (pSpr->touched > 8) PrintExplosion(pSpr, 0);
   12CC 3E 08         [ 7] 3651 	ld	a, #0x08
   12CE 95            [ 4] 3652 	sub	a, l
   12CF 30 0D         [12] 3653 	jr	NC,00110$
   12D1 D5            [11] 3654 	push	de
   12D2 AF            [ 4] 3655 	xor	a, a
   12D3 F5            [11] 3656 	push	af
   12D4 33            [ 6] 3657 	inc	sp
   12D5 C5            [11] 3658 	push	bc
   12D6 CDrCAr08      [17] 3659 	call	_PrintExplosion
   12D9 F1            [10] 3660 	pop	af
   12DA 33            [ 6] 3661 	inc	sp
   12DB D1            [10] 3662 	pop	de
   12DC 18 31         [12] 3663 	jr	00114$
   12DE                    3664 00110$:
                           3665 ;src/main.c:1141: else if (pSpr->touched > 6) PrintExplosion(pSpr, 1);
   12DE 3E 06         [ 7] 3666 	ld	a, #0x06
   12E0 95            [ 4] 3667 	sub	a, l
   12E1 30 0E         [12] 3668 	jr	NC,00107$
   12E3 D5            [11] 3669 	push	de
   12E4 3E 01         [ 7] 3670 	ld	a, #0x01
   12E6 F5            [11] 3671 	push	af
   12E7 33            [ 6] 3672 	inc	sp
   12E8 C5            [11] 3673 	push	bc
   12E9 CDrCAr08      [17] 3674 	call	_PrintExplosion
   12EC F1            [10] 3675 	pop	af
   12ED 33            [ 6] 3676 	inc	sp
   12EE D1            [10] 3677 	pop	de
   12EF 18 1E         [12] 3678 	jr	00114$
   12F1                    3679 00107$:
                           3680 ;src/main.c:1142: else if (pSpr->touched > 4) PrintExplosion(pSpr, 0);
   12F1 3E 04         [ 7] 3681 	ld	a, #0x04
   12F3 95            [ 4] 3682 	sub	a, l
   12F4 30 0D         [12] 3683 	jr	NC,00104$
   12F6 D5            [11] 3684 	push	de
   12F7 AF            [ 4] 3685 	xor	a, a
   12F8 F5            [11] 3686 	push	af
   12F9 33            [ 6] 3687 	inc	sp
   12FA C5            [11] 3688 	push	bc
   12FB CDrCAr08      [17] 3689 	call	_PrintExplosion
   12FE F1            [10] 3690 	pop	af
   12FF 33            [ 6] 3691 	inc	sp
   1300 D1            [10] 3692 	pop	de
   1301 18 0C         [12] 3693 	jr	00114$
   1303                    3694 00104$:
                           3695 ;src/main.c:1143: else if (pSpr->touched > 2) DeleteSprite(pSpr); 
   1303 3E 02         [ 7] 3696 	ld	a, #0x02
   1305 95            [ 4] 3697 	sub	a, l
   1306 30 07         [12] 3698 	jr	NC,00114$
   1308 D5            [11] 3699 	push	de
   1309 69            [ 4] 3700 	ld	l, c
   130A 60            [ 4] 3701 	ld	h, b
   130B CDr5Cr08      [17] 3702 	call	_DeleteSprite
   130E D1            [10] 3703 	pop	de
   130F                    3704 00114$:
                           3705 ;src/main.c:1144: pSpr->touched--;
   130F 1A            [ 7] 3706 	ld	a, (de)
   1310 C6 FF         [ 7] 3707 	add	a, #0xff
   1312 12            [ 7] 3708 	ld	(de), a
   1313 C9            [10] 3709 	ret
                           3710 ;src/main.c:1149: void EnemyLoop(TSpr *pSpr) __z88dk_fastcall {
                           3711 ;	---------------------------------
                           3712 ; Function EnemyLoop
                           3713 ; ---------------------------------
   1314                    3714 _EnemyLoop::
   1314 DD E5         [15] 3715 	push	ix
   1316 DD 21 00 00   [14] 3716 	ld	ix,#0
   131A DD 39         [15] 3717 	add	ix,sp
   131C F5            [11] 3718 	push	af
   131D 4D            [ 4] 3719 	ld	c, l
   131E 44            [ 4] 3720 	ld	b, h
                           3721 ;src/main.c:1150: if (pSpr->lives >= 1) // If the enemy sprite is alive
   131F C5            [11] 3722 	push	bc
   1320 FD E1         [14] 3723 	pop	iy
   1322 FD 56 09      [19] 3724 	ld	d, 9 (iy)
                           3725 ;src/main.c:1153: if (pSpr->touched == 0) 
   1325 21 0A 00      [10] 3726 	ld	hl, #0x000a
   1328 09            [11] 3727 	add	hl,bc
   1329 E3            [19] 3728 	ex	(sp), hl
   132A E1            [10] 3729 	pop	hl
   132B E5            [11] 3730 	push	hl
   132C 5E            [ 7] 3731 	ld	e, (hl)
                           3732 ;src/main.c:1150: if (pSpr->lives >= 1) // If the enemy sprite is alive
   132D 7A            [ 4] 3733 	ld	a, d
   132E D6 01         [ 7] 3734 	sub	a, #0x01
   1330 38 4B         [12] 3735 	jr	C,00111$
                           3736 ;src/main.c:1153: if (pSpr->touched == 0) 
   1332 7B            [ 4] 3737 	ld	a, e
   1333 B7            [ 4] 3738 	or	a, a
   1334 20 07         [12] 3739 	jr	NZ,00102$
                           3740 ;src/main.c:1154: MoveEnemy(pSpr);
   1336 C5            [11] 3741 	push	bc
   1337 C5            [11] 3742 	push	bc
   1338 CDrFCr0E      [17] 3743 	call	_MoveEnemy
   133B F1            [10] 3744 	pop	af
   133C C1            [10] 3745 	pop	bc
   133D                    3746 00102$:
                           3747 ;src/main.c:1156: SelectSpriteFrame(pSpr); 
   133D C5            [11] 3748 	push	bc
   133E 69            [ 4] 3749 	ld	l, c
   133F 60            [ 4] 3750 	ld	h, b
   1340 CDr08r09      [17] 3751 	call	_SelectSpriteFrame
   1343 C1            [10] 3752 	pop	bc
                           3753 ;src/main.c:1157: EnemyWalkAnim(pSpr);
   1344 C5            [11] 3754 	push	bc
   1345 69            [ 4] 3755 	ld	l, c
   1346 60            [ 4] 3756 	ld	h, b
   1347 CDr81r09      [17] 3757 	call	_EnemyWalkAnim
   134A C1            [10] 3758 	pop	bc
                           3759 ;src/main.c:1159: DeleteSprite(pSpr);
   134B C5            [11] 3760 	push	bc
   134C 69            [ 4] 3761 	ld	l, c
   134D 60            [ 4] 3762 	ld	h, b
   134E CDr5Cr08      [17] 3763 	call	_DeleteSprite
   1351 C1            [10] 3764 	pop	bc
                           3765 ;src/main.c:1160: pSpr->px = pSpr->x; // save the current X coordinate
   1352 59            [ 4] 3766 	ld	e, c
   1353 50            [ 4] 3767 	ld	d, b
   1354 13            [ 6] 3768 	inc	de
   1355 13            [ 6] 3769 	inc	de
   1356 0A            [ 7] 3770 	ld	a, (bc)
   1357 12            [ 7] 3771 	ld	(de), a
                           3772 ;src/main.c:1161: pSpr->py = pSpr->y; // save the current Y coordinate
   1358 59            [ 4] 3773 	ld	e, c
   1359 50            [ 4] 3774 	ld	d, b
   135A 13            [ 6] 3775 	inc	de
   135B 13            [ 6] 3776 	inc	de
   135C 13            [ 6] 3777 	inc	de
   135D 69            [ 4] 3778 	ld	l, c
   135E 60            [ 4] 3779 	ld	h, b
   135F 23            [ 6] 3780 	inc	hl
   1360 7E            [ 7] 3781 	ld	a, (hl)
   1361 12            [ 7] 3782 	ld	(de), a
                           3783 ;src/main.c:1162: PrintSprite(pSpr);
   1362 C5            [11] 3784 	push	bc
   1363 69            [ 4] 3785 	ld	l, c
   1364 60            [ 4] 3786 	ld	h, b
   1365 CDr32r08      [17] 3787 	call	_PrintSprite
   1368 C1            [10] 3788 	pop	bc
                           3789 ;src/main.c:1164: CheckEnemyCollision(pSpr);
   1369 C5            [11] 3790 	push	bc
   136A C5            [11] 3791 	push	bc
   136B CDr8Dr09      [17] 3792 	call	_CheckEnemyCollision
   136E F1            [10] 3793 	pop	af
   136F C1            [10] 3794 	pop	bc
                           3795 ;src/main.c:1166: if (pSpr->touched > 0) 
   1370 E1            [10] 3796 	pop	hl
   1371 E5            [11] 3797 	push	hl
   1372 7E            [ 7] 3798 	ld	a, (hl)
   1373 B7            [ 4] 3799 	or	a, a
   1374 28 22         [12] 3800 	jr	Z,00113$
                           3801 ;src/main.c:1167: ExplosionSecuence(pSpr);
   1376 69            [ 4] 3802 	ld	l, c
   1377 60            [ 4] 3803 	ld	h, b
   1378 CDrB6r12      [17] 3804 	call	_ExplosionSecuence
   137B 18 1B         [12] 3805 	jr	00113$
   137D                    3806 00111$:
                           3807 ;src/main.c:1169: else if (pSpr->touched > 0) // enemy reached in his last life, will explode
   137D 7B            [ 4] 3808 	ld	a, e
   137E B7            [ 4] 3809 	or	a, a
   137F 28 07         [12] 3810 	jr	Z,00108$
                           3811 ;src/main.c:1171: ExplosionSecuence(pSpr);
   1381 69            [ 4] 3812 	ld	l, c
   1382 60            [ 4] 3813 	ld	h, b
   1383 CDrB6r12      [17] 3814 	call	_ExplosionSecuence
   1386 18 10         [12] 3815 	jr	00113$
   1388                    3816 00108$:
                           3817 ;src/main.c:1173: else if (pSpr->status == S_touched) // at this point it has died and exploded
   1388 21 04 00      [10] 3818 	ld	hl, #0x0004
   138B 09            [11] 3819 	add	hl, bc
   138C 7E            [ 7] 3820 	ld	a, (hl)
   138D D6 07         [ 7] 3821 	sub	a, #0x07
   138F 20 07         [12] 3822 	jr	NZ,00113$
                           3823 ;src/main.c:1175: pSpr->status = S_walking;		
   1391 36 01         [10] 3824 	ld	(hl), #0x01
                           3825 ;src/main.c:1176: DeleteSprite(pSpr); 
   1393 69            [ 4] 3826 	ld	l, c
   1394 60            [ 4] 3827 	ld	h, b
   1395 CDr5Cr08      [17] 3828 	call	_DeleteSprite
   1398                    3829 00113$:
   1398 DD F9         [10] 3830 	ld	sp, ix
   139A DD E1         [14] 3831 	pop	ix
   139C C9            [10] 3832 	ret
                           3833 ;src/main.c:1185: void ExplodeEnemies()
                           3834 ;	---------------------------------
                           3835 ; Function ExplodeEnemies
                           3836 ; ---------------------------------
   139D                    3837 _ExplodeEnemies::
                           3838 ;src/main.c:1187: for (ct = 1; ct < 4; ct++)
   139D 21r06r00      [10] 3839 	ld	hl,#_ct + 0
   13A0 36 01         [10] 3840 	ld	(hl), #0x01
   13A2 01r17r00      [10] 3841 	ld	bc, #_spr+0
   13A5                    3842 00104$:
                           3843 ;src/main.c:1188: if (spr[ct].lives > 0)
   13A5 ED 5Br06r00   [20] 3844 	ld	de, (_ct)
   13A9 16 00         [ 7] 3845 	ld	d, #0x00
   13AB 6B            [ 4] 3846 	ld	l, e
   13AC 62            [ 4] 3847 	ld	h, d
   13AD 29            [11] 3848 	add	hl, hl
   13AE 29            [11] 3849 	add	hl, hl
   13AF 29            [11] 3850 	add	hl, hl
   13B0 19            [11] 3851 	add	hl, de
   13B1 29            [11] 3852 	add	hl, hl
   13B2 19            [11] 3853 	add	hl, de
   13B3 09            [11] 3854 	add	hl, bc
   13B4 11 09 00      [10] 3855 	ld	de, #0x0009
   13B7 19            [11] 3856 	add	hl, de
   13B8 7E            [ 7] 3857 	ld	a, (hl)
   13B9 B7            [ 4] 3858 	or	a, a
   13BA CAr75r14      [10] 3859 	jp	Z, 00105$
                           3860 ;src/main.c:1190: cpct_akp_SFXPlay (4, 15, 40, 0, 0, AY_CHANNEL_A); // explosion
   13BD C5            [11] 3861 	push	bc
   13BE 3E 01         [ 7] 3862 	ld	a, #0x01
   13C0 F5            [11] 3863 	push	af
   13C1 33            [ 6] 3864 	inc	sp
   13C2 21 00 00      [10] 3865 	ld	hl, #0x0000
   13C5 E5            [11] 3866 	push	hl
   13C6 2E 28         [ 7] 3867 	ld	l, #0x28
   13C8 E5            [11] 3868 	push	hl
   13C9 21 04 0F      [10] 3869 	ld	hl, #0x0f04
   13CC E5            [11] 3870 	push	hl
   13CD CDr00r00      [17] 3871 	call	_cpct_akp_SFXPlay
   13D0 21 07 00      [10] 3872 	ld	hl, #7
   13D3 39            [11] 3873 	add	hl, sp
   13D4 F9            [ 6] 3874 	ld	sp, hl
   13D5 C1            [10] 3875 	pop	bc
                           3876 ;src/main.c:1191: PrintExplosion(&spr[ct], 0); Pause(20);
   13D6 ED 5Br06r00   [20] 3877 	ld	de, (_ct)
   13DA 16 00         [ 7] 3878 	ld	d, #0x00
   13DC 6B            [ 4] 3879 	ld	l, e
   13DD 62            [ 4] 3880 	ld	h, d
   13DE 29            [11] 3881 	add	hl, hl
   13DF 29            [11] 3882 	add	hl, hl
   13E0 29            [11] 3883 	add	hl, hl
   13E1 19            [11] 3884 	add	hl, de
   13E2 29            [11] 3885 	add	hl, hl
   13E3 19            [11] 3886 	add	hl, de
   13E4 09            [11] 3887 	add	hl, bc
   13E5 C5            [11] 3888 	push	bc
   13E6 AF            [ 4] 3889 	xor	a, a
   13E7 F5            [11] 3890 	push	af
   13E8 33            [ 6] 3891 	inc	sp
   13E9 E5            [11] 3892 	push	hl
   13EA CDrCAr08      [17] 3893 	call	_PrintExplosion
   13ED F1            [10] 3894 	pop	af
   13EE 33            [ 6] 3895 	inc	sp
   13EF 21 14 00      [10] 3896 	ld	hl, #0x0014
   13F2 CDr80r01      [17] 3897 	call	_Pause
   13F5 C1            [10] 3898 	pop	bc
                           3899 ;src/main.c:1192: PrintExplosion(&spr[ct], 1); Pause(20);
   13F6 ED 5Br06r00   [20] 3900 	ld	de, (_ct)
   13FA 16 00         [ 7] 3901 	ld	d, #0x00
   13FC 6B            [ 4] 3902 	ld	l, e
   13FD 62            [ 4] 3903 	ld	h, d
   13FE 29            [11] 3904 	add	hl, hl
   13FF 29            [11] 3905 	add	hl, hl
   1400 29            [11] 3906 	add	hl, hl
   1401 19            [11] 3907 	add	hl, de
   1402 29            [11] 3908 	add	hl, hl
   1403 19            [11] 3909 	add	hl, de
   1404 09            [11] 3910 	add	hl, bc
   1405 C5            [11] 3911 	push	bc
   1406 3E 01         [ 7] 3912 	ld	a, #0x01
   1408 F5            [11] 3913 	push	af
   1409 33            [ 6] 3914 	inc	sp
   140A E5            [11] 3915 	push	hl
   140B CDrCAr08      [17] 3916 	call	_PrintExplosion
   140E F1            [10] 3917 	pop	af
   140F 33            [ 6] 3918 	inc	sp
   1410 21 14 00      [10] 3919 	ld	hl, #0x0014
   1413 CDr80r01      [17] 3920 	call	_Pause
   1416 C1            [10] 3921 	pop	bc
                           3922 ;src/main.c:1193: PrintExplosion(&spr[ct], 0); Pause(20);
   1417 ED 5Br06r00   [20] 3923 	ld	de, (_ct)
   141B 16 00         [ 7] 3924 	ld	d, #0x00
   141D 6B            [ 4] 3925 	ld	l, e
   141E 62            [ 4] 3926 	ld	h, d
   141F 29            [11] 3927 	add	hl, hl
   1420 29            [11] 3928 	add	hl, hl
   1421 29            [11] 3929 	add	hl, hl
   1422 19            [11] 3930 	add	hl, de
   1423 29            [11] 3931 	add	hl, hl
   1424 19            [11] 3932 	add	hl, de
   1425 09            [11] 3933 	add	hl, bc
   1426 C5            [11] 3934 	push	bc
   1427 AF            [ 4] 3935 	xor	a, a
   1428 F5            [11] 3936 	push	af
   1429 33            [ 6] 3937 	inc	sp
   142A E5            [11] 3938 	push	hl
   142B CDrCAr08      [17] 3939 	call	_PrintExplosion
   142E F1            [10] 3940 	pop	af
   142F 33            [ 6] 3941 	inc	sp
   1430 21 14 00      [10] 3942 	ld	hl, #0x0014
   1433 CDr80r01      [17] 3943 	call	_Pause
   1436 C1            [10] 3944 	pop	bc
                           3945 ;src/main.c:1194: spr[ct].lives = 0;
   1437 ED 5Br06r00   [20] 3946 	ld	de, (_ct)
   143B 16 00         [ 7] 3947 	ld	d, #0x00
   143D 6B            [ 4] 3948 	ld	l, e
   143E 62            [ 4] 3949 	ld	h, d
   143F 29            [11] 3950 	add	hl, hl
   1440 29            [11] 3951 	add	hl, hl
   1441 29            [11] 3952 	add	hl, hl
   1442 19            [11] 3953 	add	hl, de
   1443 29            [11] 3954 	add	hl, hl
   1444 19            [11] 3955 	add	hl, de
   1445 09            [11] 3956 	add	hl, bc
   1446 11 09 00      [10] 3957 	ld	de, #0x0009
   1449 19            [11] 3958 	add	hl, de
   144A 36 00         [10] 3959 	ld	(hl), #0x00
                           3960 ;src/main.c:1195: spr[ct].status = S_walking;
   144C ED 5Br06r00   [20] 3961 	ld	de, (_ct)
   1450 16 00         [ 7] 3962 	ld	d, #0x00
   1452 6B            [ 4] 3963 	ld	l, e
   1453 62            [ 4] 3964 	ld	h, d
   1454 29            [11] 3965 	add	hl, hl
   1455 29            [11] 3966 	add	hl, hl
   1456 29            [11] 3967 	add	hl, hl
   1457 19            [11] 3968 	add	hl, de
   1458 29            [11] 3969 	add	hl, hl
   1459 19            [11] 3970 	add	hl, de
   145A 09            [11] 3971 	add	hl, bc
   145B 11 04 00      [10] 3972 	ld	de, #0x0004
   145E 19            [11] 3973 	add	hl, de
   145F 36 01         [10] 3974 	ld	(hl), #0x01
                           3975 ;src/main.c:1196: DeleteSprite(&spr[ct]);
   1461 ED 5Br06r00   [20] 3976 	ld	de, (_ct)
   1465 16 00         [ 7] 3977 	ld	d, #0x00
   1467 6B            [ 4] 3978 	ld	l, e
   1468 62            [ 4] 3979 	ld	h, d
   1469 29            [11] 3980 	add	hl, hl
   146A 29            [11] 3981 	add	hl, hl
   146B 29            [11] 3982 	add	hl, hl
   146C 19            [11] 3983 	add	hl, de
   146D 29            [11] 3984 	add	hl, hl
   146E 19            [11] 3985 	add	hl, de
   146F 09            [11] 3986 	add	hl, bc
   1470 C5            [11] 3987 	push	bc
   1471 CDr5Cr08      [17] 3988 	call	_DeleteSprite
   1474 C1            [10] 3989 	pop	bc
   1475                    3990 00105$:
                           3991 ;src/main.c:1187: for (ct = 1; ct < 4; ct++)
   1475 FD 21r06r00   [14] 3992 	ld	iy, #_ct
   1479 FD 34 00      [23] 3993 	inc	0 (iy)
   147C FD 7E 00      [19] 3994 	ld	a, 0 (iy)
   147F D6 04         [ 7] 3995 	sub	a, #0x04
   1481 DArA5r13      [10] 3996 	jp	C, 00104$
   1484 C9            [10] 3997 	ret
                           3998 ;src/main.c:1214: void PrintStartMenu() {
                           3999 ;	---------------------------------
                           4000 ; Function PrintStartMenu
                           4001 ; ---------------------------------
   1485                    4002 _PrintStartMenu::
                           4003 ;src/main.c:1215: cpct_drawSprite(g_logo, cpctm_screenPtr(CPCT_VMEM_START, 17, 0), G_LOGO_W, G_LOGO_H);
   1485 21 2E 16      [10] 4004 	ld	hl, #0x162e
   1488 E5            [11] 4005 	push	hl
   1489 21 11 C0      [10] 4006 	ld	hl, #0xc011
   148C E5            [11] 4007 	push	hl
   148D 21r00r00      [10] 4008 	ld	hl, #_g_logo
   1490 E5            [11] 4009 	push	hl
   1491 CDr00r00      [17] 4010 	call	_cpct_drawSprite
                           4011 ;src/main.c:1217: PrintText("1@START@GAME", 2, 45);
   1494 21 02 2D      [10] 4012 	ld	hl, #0x2d02
   1497 E5            [11] 4013 	push	hl
   1498 21rDEr14      [10] 4014 	ld	hl, #___str_1
   149B E5            [11] 4015 	push	hl
   149C CDr5Cr02      [17] 4016 	call	_PrintText
   149F F1            [10] 4017 	pop	af
                           4018 ;src/main.c:1218: PrintText("2@REDEFINE@CONTROLS", 2, 60);
   14A0 21 02 3C      [10] 4019 	ld	hl, #0x3c02
   14A3 E3            [19] 4020 	ex	(sp),hl
   14A4 21rEBr14      [10] 4021 	ld	hl, #___str_2
   14A7 E5            [11] 4022 	push	hl
   14A8 CDr5Cr02      [17] 4023 	call	_PrintText
   14AB F1            [10] 4024 	pop	af
                           4025 ;src/main.c:1220: PrintText("SALVAKANTERO", 16,140);
   14AC 21 10 8C      [10] 4026 	ld	hl, #0x8c10
   14AF E3            [19] 4027 	ex	(sp),hl
   14B0 21rFFr14      [10] 4028 	ld	hl, #___str_3
   14B3 E5            [11] 4029 	push	hl
   14B4 CDr5Cr02      [17] 4030 	call	_PrintText
   14B7 F1            [10] 4031 	pop	af
                           4032 ;src/main.c:1221: PrintText("FELIPE@VAKAPP", 14, 155);
   14B8 21 0E 9B      [10] 4033 	ld	hl, #0x9b0e
   14BB E3            [19] 4034 	ex	(sp),hl
   14BC 21r0Cr15      [10] 4035 	ld	hl, #___str_4
   14BF E5            [11] 4036 	push	hl
   14C0 CDr5Cr02      [17] 4037 	call	_PrintText
   14C3 F1            [10] 4038 	pop	af
                           4039 ;src/main.c:1222: PrintText("TACHA", 29,170);
   14C4 21 1D AA      [10] 4040 	ld	hl, #0xaa1d
   14C7 E3            [19] 4041 	ex	(sp),hl
   14C8 21r1Ar15      [10] 4042 	ld	hl, #___str_5
   14CB E5            [11] 4043 	push	hl
   14CC CDr5Cr02      [17] 4044 	call	_PrintText
   14CF F1            [10] 4045 	pop	af
                           4046 ;src/main.c:1224: PrintText("PLAY@ON@RETRO@2022", 4, 191);
   14D0 21 04 BF      [10] 4047 	ld	hl, #0xbf04
   14D3 E3            [19] 4048 	ex	(sp),hl
   14D4 21r20r15      [10] 4049 	ld	hl, #___str_6
   14D7 E5            [11] 4050 	push	hl
   14D8 CDr5Cr02      [17] 4051 	call	_PrintText
   14DB F1            [10] 4052 	pop	af
   14DC F1            [10] 4053 	pop	af
   14DD C9            [10] 4054 	ret
   14DE                    4055 ___str_1:
   14DE 31 40 53 54 41 52  4056 	.ascii "1@START@GAME"
        54 40 47 41 4D 45
   14EA 00                 4057 	.db 0x00
   14EB                    4058 ___str_2:
   14EB 32 40 52 45 44 45  4059 	.ascii "2@REDEFINE@CONTROLS"
        46 49 4E 45 40 43
        4F 4E 54 52 4F 4C
        53
   14FE 00                 4060 	.db 0x00
   14FF                    4061 ___str_3:
   14FF 53 41 4C 56 41 4B  4062 	.ascii "SALVAKANTERO"
        41 4E 54 45 52 4F
   150B 00                 4063 	.db 0x00
   150C                    4064 ___str_4:
   150C 46 45 4C 49 50 45  4065 	.ascii "FELIPE@VAKAPP"
        40 56 41 4B 41 50
        50
   1519 00                 4066 	.db 0x00
   151A                    4067 ___str_5:
   151A 54 41 43 48 41     4068 	.ascii "TACHA"
   151F 00                 4069 	.db 0x00
   1520                    4070 ___str_6:
   1520 50 4C 41 59 40 4F  4071 	.ascii "PLAY@ON@RETRO@2022"
        4E 40 52 45 54 52
        4F 40 32 30 32 32
   1532 00                 4072 	.db 0x00
                           4073 ;src/main.c:1228: void StartMenu() {
                           4074 ;	---------------------------------
                           4075 ; Function StartMenu
                           4076 ; ---------------------------------
   1533                    4077 _StartMenu::
                           4078 ;src/main.c:1229: cpct_akp_musicInit(Menu); // initialize music. Main theme 
   1533 21r00r00      [10] 4079 	ld	hl, #_Menu
   1536 E5            [11] 4080 	push	hl
   1537 CDr00r00      [17] 4081 	call	_cpct_akp_musicInit
   153A F1            [10] 4082 	pop	af
                           4083 ;src/main.c:1230: ClearScreen();
   153B CDrB5r01      [17] 4084 	call	_ClearScreen
                           4085 ;src/main.c:1231: PrintStartMenu();
   153E CDr85r14      [17] 4086 	call	_PrintStartMenu
                           4087 ;src/main.c:1233: while(1) {
   1541                    4088 00107$:
                           4089 ;src/main.c:1234: cpct_scanKeyboard_f();
   1541 CDr00r00      [17] 4090 	call	_cpct_scanKeyboard_f
                           4091 ;src/main.c:1236: if(cpct_isKeyPressed(Key_1)) { // start game
   1544 21 08 01      [10] 4092 	ld	hl, #0x0108
   1547 CDr00r00      [17] 4093 	call	_cpct_isKeyPressed
   154A 7D            [ 4] 4094 	ld	a, l
   154B B7            [ 4] 4095 	or	a, a
   154C 20 6D         [12] 4096 	jr	NZ,00108$
                           4097 ;src/main.c:1239: else if(cpct_isKeyPressed(Key_2)){ // redefine keys
   154E 21 08 02      [10] 4098 	ld	hl, #0x0208
   1551 CDr00r00      [17] 4099 	call	_cpct_isKeyPressed
   1554 7D            [ 4] 4100 	ld	a, l
   1555 B7            [ 4] 4101 	or	a, a
   1556 28 5B         [12] 4102 	jr	Z,00105$
                           4103 ;src/main.c:1240: Wait4Key(Key_2);
   1558 21 08 02      [10] 4104 	ld	hl, #0x0208
   155B CDrA5r04      [17] 4105 	call	_Wait4Key
                           4106 ;src/main.c:1241: ctlUp = 	RedefineKey("@@UP@");
   155E 21rE5r15      [10] 4107 	ld	hl, #___str_7
   1561 CDrC2r04      [17] 4108 	call	_RedefineKey
   1564 22r07r00      [16] 4109 	ld	(_ctlUp), hl
                           4110 ;src/main.c:1242: ctlDown = 	RedefineKey("@DOWN");
   1567 21rEBr15      [10] 4111 	ld	hl, #___str_8
   156A CDrC2r04      [17] 4112 	call	_RedefineKey
   156D 22r09r00      [16] 4113 	ld	(_ctlDown), hl
                           4114 ;src/main.c:1243: ctlLeft = 	RedefineKey("@LEFT");
   1570 21rF1r15      [10] 4115 	ld	hl, #___str_9
   1573 CDrC2r04      [17] 4116 	call	_RedefineKey
   1576 22r0Br00      [16] 4117 	ld	(_ctlLeft), hl
                           4118 ;src/main.c:1244: ctlRight = 	RedefineKey("RIGHT");
   1579 21rF7r15      [10] 4119 	ld	hl, #___str_10
   157C CDrC2r04      [17] 4120 	call	_RedefineKey
   157F 22r0Dr00      [16] 4121 	ld	(_ctlRight), hl
                           4122 ;src/main.c:1245: ctlFire = 	RedefineKey("@FIRE");
   1582 21rFDr15      [10] 4123 	ld	hl, #___str_11
   1585 CDrC2r04      [17] 4124 	call	_RedefineKey
   1588 22r0Fr00      [16] 4125 	ld	(_ctlFire), hl
                           4126 ;src/main.c:1246: ctlAbort = 	RedefineKey("ABORT");
   158B 21r03r16      [10] 4127 	ld	hl, #___str_12
   158E CDrC2r04      [17] 4128 	call	_RedefineKey
   1591 22r13r00      [16] 4129 	ld	(_ctlAbort), hl
                           4130 ;src/main.c:1247: ctlMusic = 	RedefineKey("MUSIC");
   1594 21r09r16      [10] 4131 	ld	hl, #___str_13
   1597 CDrC2r04      [17] 4132 	call	_RedefineKey
   159A 22r11r00      [16] 4133 	ld	(_ctlMusic), hl
                           4134 ;src/main.c:1248: ctlPause =	RedefineKey("PAUSE");		
   159D 21r0Fr16      [10] 4135 	ld	hl, #___str_14
   15A0 CDrC2r04      [17] 4136 	call	_RedefineKey
   15A3 22r15r00      [16] 4137 	ld	(_ctlPause), hl
                           4138 ;src/main.c:1250: PrintText("@@@@@", 29, 100);
   15A6 21 1D 64      [10] 4139 	ld	hl, #0x641d
   15A9 E5            [11] 4140 	push	hl
   15AA 21r15r16      [10] 4141 	ld	hl, #___str_15
   15AD E5            [11] 4142 	push	hl
   15AE CDr5Cr02      [17] 4143 	call	_PrintText
   15B1 F1            [10] 4144 	pop	af
   15B2 F1            [10] 4145 	pop	af
   15B3                    4146 00105$:
                           4147 ;src/main.c:1252: Pause(3);
   15B3 21 03 00      [10] 4148 	ld	hl, #0x0003
   15B6 CDr80r01      [17] 4149 	call	_Pause
   15B9 18 86         [12] 4150 	jr	00107$
   15BB                    4151 00108$:
                           4152 ;src/main.c:1255: cpct_akp_musicInit(FX);
   15BB 21r00r00      [10] 4153 	ld	hl, #_FX
   15BE E5            [11] 4154 	push	hl
   15BF CDr00r00      [17] 4155 	call	_cpct_akp_musicInit
                           4156 ;src/main.c:1256: cpct_akp_SFXPlay (6, 14, 41, 0, 0, AY_CHANNEL_B); // event sound
   15C2 26 02         [ 7] 4157 	ld	h,#0x02
   15C4 E3            [19] 4158 	ex	(sp),hl
   15C5 33            [ 6] 4159 	inc	sp
   15C6 21 00 00      [10] 4160 	ld	hl, #0x0000
   15C9 E5            [11] 4161 	push	hl
   15CA 2E 29         [ 7] 4162 	ld	l, #0x29
   15CC E5            [11] 4163 	push	hl
   15CD 21 06 0E      [10] 4164 	ld	hl, #0x0e06
   15D0 E5            [11] 4165 	push	hl
   15D1 CDr00r00      [17] 4166 	call	_cpct_akp_SFXPlay
   15D4 21 07 00      [10] 4167 	ld	hl, #7
   15D7 39            [11] 4168 	add	hl, sp
   15D8 F9            [ 6] 4169 	ld	sp, hl
                           4170 ;src/main.c:1257: ClearScreen();
   15D9 CDrB5r01      [17] 4171 	call	_ClearScreen
                           4172 ;src/main.c:1259: cpct_akp_musicInit(Ingame1);
   15DC 21r00r00      [10] 4173 	ld	hl, #_Ingame1
   15DF E5            [11] 4174 	push	hl
   15E0 CDr00r00      [17] 4175 	call	_cpct_akp_musicInit
   15E3 F1            [10] 4176 	pop	af
   15E4 C9            [10] 4177 	ret
   15E5                    4178 ___str_7:
   15E5 40 40 55 50 40     4179 	.ascii "@@UP@"
   15EA 00                 4180 	.db 0x00
   15EB                    4181 ___str_8:
   15EB 40 44 4F 57 4E     4182 	.ascii "@DOWN"
   15F0 00                 4183 	.db 0x00
   15F1                    4184 ___str_9:
   15F1 40 4C 45 46 54     4185 	.ascii "@LEFT"
   15F6 00                 4186 	.db 0x00
   15F7                    4187 ___str_10:
   15F7 52 49 47 48 54     4188 	.ascii "RIGHT"
   15FC 00                 4189 	.db 0x00
   15FD                    4190 ___str_11:
   15FD 40 46 49 52 45     4191 	.ascii "@FIRE"
   1602 00                 4192 	.db 0x00
   1603                    4193 ___str_12:
   1603 41 42 4F 52 54     4194 	.ascii "ABORT"
   1608 00                 4195 	.db 0x00
   1609                    4196 ___str_13:
   1609 4D 55 53 49 43     4197 	.ascii "MUSIC"
   160E 00                 4198 	.db 0x00
   160F                    4199 ___str_14:
   160F 50 41 55 53 45     4200 	.ascii "PAUSE"
   1614 00                 4201 	.db 0x00
   1615                    4202 ___str_15:
   1615 40 40 40 40 40     4203 	.ascii "@@@@@"
   161A 00                 4204 	.db 0x00
                           4205 ;src/main.c:1280: void InitValues() {	
                           4206 ;	---------------------------------
                           4207 ; Function InitValues
                           4208 ; ---------------------------------
   161B                    4209 _InitValues::
                           4210 ;src/main.c:1282: ctlUp = Key_Q;
   161B 21 08 08      [10] 4211 	ld	hl, #0x0808
   161E 22r07r00      [16] 4212 	ld	(_ctlUp), hl
                           4213 ;src/main.c:1283: ctlDown = Key_A;
   1621 26 20         [ 7] 4214 	ld	h, #0x20
   1623 22r09r00      [16] 4215 	ld	(_ctlDown), hl
                           4216 ;src/main.c:1284: ctlLeft = Key_O;
   1626 21 04 04      [10] 4217 	ld	hl, #0x0404
   1629 22r0Br00      [16] 4218 	ld	(_ctlLeft), hl
                           4219 ;src/main.c:1285: ctlRight = Key_P;
   162C 21 03 08      [10] 4220 	ld	hl, #0x0803
   162F 22r0Dr00      [16] 4221 	ld	(_ctlRight), hl
                           4222 ;src/main.c:1286: ctlFire = Key_Space;
   1632 21 05 80      [10] 4223 	ld	hl, #0x8005
   1635 22r0Fr00      [16] 4224 	ld	(_ctlFire), hl
                           4225 ;src/main.c:1287: ctlAbort = Key_X;
   1638 2E 07         [ 7] 4226 	ld	l, #0x07
   163A 22r13r00      [16] 4227 	ld	(_ctlAbort), hl
                           4228 ;src/main.c:1288: ctlMusic = Key_M;
   163D 21 04 40      [10] 4229 	ld	hl, #0x4004
   1640 22r11r00      [16] 4230 	ld	(_ctlMusic), hl
                           4231 ;src/main.c:1289: ctlPause = Key_H;	
   1643 21 05 10      [10] 4232 	ld	hl, #0x1005
   1646 22r15r00      [16] 4233 	ld	(_ctlPause), hl
   1649 C9            [10] 4234 	ret
                           4235 ;src/main.c:1294: void ResetData() {
                           4236 ;	---------------------------------
                           4237 ; Function ResetData
                           4238 ; ---------------------------------
   164A                    4239 _ResetData::
                           4240 ;src/main.c:1296: spr[0].x = spr[0].px = 0;
   164A 21r19r00      [10] 4241 	ld	hl, #(_spr + 0x0002)
   164D 36 00         [10] 4242 	ld	(hl), #0x00
   164F 21r17r00      [10] 4243 	ld	hl, #_spr
   1652 36 00         [10] 4244 	ld	(hl), #0x00
                           4245 ;src/main.c:1297: spr[0].y = spr[0].py = 159;
   1654 21r1Ar00      [10] 4246 	ld	hl, #(_spr + 0x0003)
   1657 36 9F         [10] 4247 	ld	(hl), #0x9f
   1659 21r18r00      [10] 4248 	ld	hl, #(_spr + 0x0001)
   165C 36 9F         [10] 4249 	ld	(hl), #0x9f
                           4250 ;src/main.c:1298: spr[0].dir = D_right; 
   165E 21r1Fr00      [10] 4251 	ld	hl, #(_spr + 0x0008)
   1661 36 03         [10] 4252 	ld	(hl), #0x03
                           4253 ;src/main.c:1299: spr[0].status = S_stopped;
   1663 21r1Br00      [10] 4254 	ld	hl, #(_spr + 0x0004)
   1666 36 00         [10] 4255 	ld	(hl), #0x00
                           4256 ;src/main.c:1301: InitMap();
   1668 CDr2Fr03      [17] 4257 	call	_InitMap
                           4258 ;src/main.c:1302: RefreshScoreboard();
   166B C3rE0r02      [10] 4259 	jp  _RefreshScoreboard
                           4260 ;src/main.c:1307: void InitGame() {
                           4261 ;	---------------------------------
                           4262 ; Function InitGame
                           4263 ; ---------------------------------
   166E                    4264 _InitGame::
                           4265 ;src/main.c:1308: StartMenu(); // start menu;
   166E CDr33r15      [17] 4266 	call	_StartMenu
                           4267 ;src/main.c:1309: music = TRUE;
   1671 21r04r00      [10] 4268 	ld	hl,#_music + 0
   1674 36 01         [10] 4269 	ld	(hl), #0x01
                           4270 ;src/main.c:1310: mapNumber = 0;
   1676 21r00r00      [10] 4271 	ld	hl,#_mapNumber + 0
   1679 36 00         [10] 4272 	ld	(hl), #0x00
                           4273 ;src/main.c:1311: score = 0;
   167B 21 00 00      [10] 4274 	ld	hl, #0x0000
   167E 22r00r00      [16] 4275 	ld	(_score), hl
                           4276 ;src/main.c:1314: spr[0].object = 255; // no object
   1681 21r23r00      [10] 4277 	ld	hl, #(_spr + 0x000c)
   1684 36 FF         [10] 4278 	ld	(hl), #0xff
                           4279 ;src/main.c:1315: spr[0].lives = 9; // 10 lives
   1686 21r20r00      [10] 4280 	ld	hl, #(_spr + 0x0009)
   1689 36 09         [10] 4281 	ld	(hl), #0x09
                           4282 ;src/main.c:1317: InitScoreboard();
   168B CDrC2r02      [17] 4283 	call	_InitScoreboard
                           4284 ;src/main.c:1319: InitObjects();
   168E CDrB9r07      [17] 4285 	call	_InitObjects
                           4286 ;src/main.c:1321: ResetData();
   1691 C3r4Ar16      [10] 4287 	jp  _ResetData
                           4288 ;src/main.c:1326: void GameOver() {
                           4289 ;	---------------------------------
                           4290 ; Function GameOver
                           4291 ; ---------------------------------
   1694                    4292 _GameOver::
                           4293 ;src/main.c:1328: if (spr[0].lives > 0) 
   1694 3Ar20r00      [13] 4294 	ld	a, (#(_spr + 0x0009) + 0)
   1697 B7            [ 4] 4295 	or	a, a
                           4296 ;src/main.c:1329: ResetData(); // reassign data to some variables
   1698 C2r4Ar16      [10] 4297 	jp	NZ,_ResetData
                           4298 ;src/main.c:1331: cpct_akp_musicInit(FX); // stop the music
   169B 21r00r00      [10] 4299 	ld	hl, #_FX
   169E E5            [11] 4300 	push	hl
   169F CDr00r00      [17] 4301 	call	_cpct_akp_musicInit
   16A2 F1            [10] 4302 	pop	af
                           4303 ;src/main.c:1332: RefreshScoreboard();
   16A3 CDrE0r02      [17] 4304 	call	_RefreshScoreboard
                           4305 ;src/main.c:1334: PrintText("@@@@@@@@@@@", 18, 102);
   16A6 21 12 66      [10] 4306 	ld	hl, #0x6612
   16A9 E5            [11] 4307 	push	hl
   16AA 21rDBr16      [10] 4308 	ld	hl, #___str_16
   16AD E5            [11] 4309 	push	hl
   16AE CDr5Cr02      [17] 4310 	call	_PrintText
   16B1 F1            [10] 4311 	pop	af
                           4312 ;src/main.c:1335: PrintText("@GAME@OVER@", 18, 110);
   16B2 21 12 6E      [10] 4313 	ld	hl, #0x6e12
   16B5 E3            [19] 4314 	ex	(sp),hl
   16B6 21rE7r16      [10] 4315 	ld	hl, #___str_17
   16B9 E5            [11] 4316 	push	hl
   16BA CDr5Cr02      [17] 4317 	call	_PrintText
   16BD F1            [10] 4318 	pop	af
                           4319 ;src/main.c:1336: PrintText("@@@@@@@@@@@", 18, 118);
   16BE 21 12 76      [10] 4320 	ld	hl, #0x7612
   16C1 E3            [19] 4321 	ex	(sp),hl
   16C2 21rDBr16      [10] 4322 	ld	hl, #___str_16
   16C5 E5            [11] 4323 	push	hl
   16C6 CDr5Cr02      [17] 4324 	call	_PrintText
   16C9 F1            [10] 4325 	pop	af
   16CA F1            [10] 4326 	pop	af
                           4327 ;src/main.c:1337: Pause(500);
   16CB 21 F4 01      [10] 4328 	ld	hl, #0x01f4
   16CE CDr80r01      [17] 4329 	call	_Pause
                           4330 ;src/main.c:1339: while (!cpct_isAnyKeyPressed());
   16D1                    4331 00101$:
   16D1 CDr00r00      [17] 4332 	call	_cpct_isAnyKeyPressed
   16D4 7D            [ 4] 4333 	ld	a, l
   16D5 B7            [ 4] 4334 	or	a, a
   16D6 28 F9         [12] 4335 	jr	Z,00101$
                           4336 ;src/main.c:1340: InitGame();
   16D8 C3r6Er16      [10] 4337 	jp  _InitGame
   16DB                    4338 ___str_16:
   16DB 40 40 40 40 40 40  4339 	.ascii "@@@@@@@@@@@"
        40 40 40 40 40
   16E6 00                 4340 	.db 0x00
   16E7                    4341 ___str_17:
   16E7 40 47 41 4D 45 40  4342 	.ascii "@GAME@OVER@"
        4F 56 45 52 40
   16F2 00                 4343 	.db 0x00
                           4344 ;src/main.c:1345: void main(void) 
                           4345 ;	---------------------------------
                           4346 ; Function main
                           4347 ; ---------------------------------
   16F3                    4348 _main::
                           4349 ;src/main.c:1347: cpct_disableFirmware(); // disable firmware control
   16F3 CDr00r00      [17] 4350 	call	_cpct_disableFirmware
                           4351 ;src/main.c:1348: cpct_akp_SFXInit(FX); //initialize sound effects
   16F6 21r00r00      [10] 4352 	ld	hl, #_FX
   16F9 E5            [11] 4353 	push	hl
   16FA CDr00r00      [17] 4354 	call	_cpct_akp_SFXInit
   16FD F1            [10] 4355 	pop	af
                           4356 ;src/main.c:1349: cpct_setInterruptHandler(Interrupt); // initialize the interrupt manager (keyboard and sound)
   16FE 21r9Cr01      [10] 4357 	ld	hl, #_Interrupt
   1701 CDr00r00      [17] 4358 	call	_cpct_setInterruptHandler
                           4359 ;src/main.c:1350: cpct_setVideoMode(0); // activate mode 0; 160*200 16 colors
   1704 2E 00         [ 7] 4360 	ld	l, #0x00
   1706 CDr00r00      [17] 4361 	call	_cpct_setVideoMode
                           4362 ;src/main.c:1351: cpct_setPalette(g_palette, 16); // assign palette
   1709 21 10 00      [10] 4363 	ld	hl, #0x0010
   170C E5            [11] 4364 	push	hl
   170D 21r00r00      [10] 4365 	ld	hl, #_g_palette
   1710 E5            [11] 4366 	push	hl
   1711 CDr00r00      [17] 4367 	call	_cpct_setPalette
                           4368 ;src/main.c:1352: cpct_setBorder(g_palette[1]); // print border (black)
   1714 21r01r00      [10] 4369 	ld	hl, #_g_palette + 1
   1717 46            [ 7] 4370 	ld	b, (hl)
   1718 C5            [11] 4371 	push	bc
   1719 33            [ 6] 4372 	inc	sp
   171A 3E 10         [ 7] 4373 	ld	a, #0x10
   171C F5            [11] 4374 	push	af
   171D 33            [ 6] 4375 	inc	sp
   171E CDr00r00      [17] 4376 	call	_cpct_setPALColour
                           4377 ;src/main.c:1353: cpct_etm_setTileset2x4(g_tileset); // keep in memory the tiles for the maps (4 * 4)		
   1721 21r00r00      [10] 4378 	ld	hl, #_g_tileset
   1724 CDr00r00      [17] 4379 	call	_cpct_etm_setTileset2x4
                           4380 ;src/main.c:1354: InitValues(); // assigns default values ​​that do not vary between games
   1727 CDr1Br16      [17] 4381 	call	_InitValues
                           4382 ;src/main.c:1355: InitGame(); // initialization of some variables
   172A CDr6Er16      [17] 4383 	call	_InitGame
                           4384 ;src/main.c:1357: while (1) { // main loop		
   172D                    4385 00108$:
                           4386 ;src/main.c:1359: ReprintObjects();
   172D CDrA6r05      [17] 4387 	call	_ReprintObjects
                           4388 ;src/main.c:1361: RunStatus(); // call the appropriate function according to the player status  
   1730 CDr6Dr0E      [17] 4389 	call	_RunStatus
                           4390 ;src/main.c:1362: SelectFrame(); // we assign the next frame of the animation to the player
   1733 CDr4Dr0A      [17] 4391 	call	_SelectFrame
                           4392 ;src/main.c:1363: DeleteSprite(&spr[0]);
   1736 21r17r00      [10] 4393 	ld	hl, #_spr
   1739 CDr5Cr08      [17] 4394 	call	_DeleteSprite
                           4395 ;src/main.c:1364: spr[0].px = spr[0].x; // save the current X coordinate
   173C 01r19r00      [10] 4396 	ld	bc, #_spr + 2
   173F 3Ar17r00      [13] 4397 	ld	a, (#_spr + 0)
   1742 02            [ 7] 4398 	ld	(bc), a
                           4399 ;src/main.c:1365: spr[0].py = spr[0].y; // save the current Y coordinate
   1743 01r1Ar00      [10] 4400 	ld	bc, #_spr + 3
   1746 3Ar18r00      [13] 4401 	ld	a, (#_spr + 1)
   1749 02            [ 7] 4402 	ld	(bc), a
                           4403 ;src/main.c:1366: PrintSprite(&spr[0]); // prints the player in the new XY position
   174A 21r17r00      [10] 4404 	ld	hl, #_spr
   174D CDr32r08      [17] 4405 	call	_PrintSprite
                           4406 ;src/main.c:1368: if (OverMines()) { // the player is stepping on mines?
   1750 CDrE5r03      [17] 4407 	call	_OverMines
   1753 7D            [ 4] 4408 	ld	a, l
   1754 B7            [ 4] 4409 	or	a, a
   1755 28 0F         [12] 4410 	jr	Z,00102$
                           4411 ;src/main.c:1369: spr[0].lives--;
   1757 21r20r00      [10] 4412 	ld	hl, #_spr + 9
   175A 4E            [ 7] 4413 	ld	c, (hl)
   175B 0D            [ 4] 4414 	dec	c
   175C 71            [ 7] 4415 	ld	(hl), c
                           4416 ;src/main.c:1370: ExplodePlayer();
   175D CDrA8r0E      [17] 4417 	call	_ExplodePlayer
                           4418 ;src/main.c:1371: ExplodeEnemies();
   1760 CDr9Dr13      [17] 4419 	call	_ExplodeEnemies
                           4420 ;src/main.c:1372: GameOver();
   1763 CDr94r16      [17] 4421 	call	_GameOver
   1766                    4422 00102$:
                           4423 ;src/main.c:1375: EnemyLoop(&spr[1]);
   1766 21r2Ar00      [10] 4424 	ld	hl, #(_spr + 0x0013)
   1769 CDr14r13      [17] 4425 	call	_EnemyLoop
                           4426 ;src/main.c:1376: EnemyLoop(&spr[2]);
   176C 21r3Dr00      [10] 4427 	ld	hl, #(_spr + 0x0026)
   176F CDr14r13      [17] 4428 	call	_EnemyLoop
                           4429 ;src/main.c:1377: EnemyLoop(&spr[3]);
   1772 21r50r00      [10] 4430 	ld	hl, #(_spr + 0x0039)
   1775 CDr14r13      [17] 4431 	call	_EnemyLoop
                           4432 ;src/main.c:1379: if (ctMainLoop % 15 == 0) // reprint scoreboard data
   1778 3E 0F         [ 7] 4433 	ld	a, #0x0f
   177A F5            [11] 4434 	push	af
   177B 33            [ 6] 4435 	inc	sp
   177C 3Ar05r00      [13] 4436 	ld	a, (_ctMainLoop)
   177F F5            [11] 4437 	push	af
   1780 33            [ 6] 4438 	inc	sp
   1781 CDr00r00      [17] 4439 	call	__moduchar
   1784 F1            [10] 4440 	pop	af
   1785 7D            [ 4] 4441 	ld	a, l
   1786 B7            [ 4] 4442 	or	a, a
   1787 20 03         [12] 4443 	jr	NZ,00104$
                           4444 ;src/main.c:1380: RefreshScoreboard();	
   1789 CDrE0r02      [17] 4445 	call	_RefreshScoreboard
   178C                    4446 00104$:
                           4447 ;src/main.c:1382: cpct_waitVSYNC(); // wait for vertical retrace
   178C CDr00r00      [17] 4448 	call	_cpct_waitVSYNC
                           4449 ;src/main.c:1384: if (++ctMainLoop == 255) ctMainLoop = 0;
   178F FD 21r05r00   [14] 4450 	ld	iy, #_ctMainLoop
   1793 FD 34 00      [23] 4451 	inc	0 (iy)
   1796 FD 7E 00      [19] 4452 	ld	a, 0 (iy)
   1799 3C            [ 4] 4453 	inc	a
   179A 20 91         [12] 4454 	jr	NZ,00108$
   179C FD 36 00 00   [19] 4455 	ld	0 (iy), #0x00
   17A0 18 8B         [12] 4456 	jr	00108$
                           4457 	.area _CODE
                           4458 	.area _INITIALIZER
   0000                    4459 __xinit__mapNumber:
   0000 00                 4460 	.db #0x00	; 0
                           4461 	.area _CABS (ABS)
