                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (CYGWIN)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _MainLoop
                             13 	.globl _InitGame
                             14 	.globl _ResetData
                             15 	.globl _InitValues
                             16 	.globl _StartMenu
                             17 	.globl _PrintStartMenu
                             18 	.globl _CheckLCCollisions
                             19 	.globl _InitLC
                             20 	.globl _SetLC
                             21 	.globl _EnemyLoop
                             22 	.globl _ExplosionSecuence
                             23 	.globl _SetEnemyParams
                             24 	.globl _MoveEnemy
                             25 	.globl _MoveShot
                             26 	.globl _PrintShot
                             27 	.globl _RunStatus
                             28 	.globl _Climbing
                             29 	.globl _Walking
                             30 	.globl _WalkAnim
                             31 	.globl _PreJump
                             32 	.globl _Jumping
                             33 	.globl _JumpIn
                             34 	.globl _Stopped
                             35 	.globl _StopIn
                             36 	.globl _Falling
                             37 	.globl _PreShotIn
                             38 	.globl _LandIn
                             39 	.globl _FallIn
                             40 	.globl _PreJumpIn
                             41 	.globl _ClimbIn
                             42 	.globl _WalkIn
                             43 	.globl _MoveRight
                             44 	.globl _MoveLeft
                             45 	.globl _MoveDown
                             46 	.globl _MoveUp
                             47 	.globl _SelectFrame
                             48 	.globl _AssignFrame
                             49 	.globl _CheckEnemyCollision
                             50 	.globl _EnemyWalkAnim
                             51 	.globl _SelectSpriteFrame
                             52 	.globl _PrintExplosion
                             53 	.globl _DeleteSprite
                             54 	.globl _PrintSprite
                             55 	.globl _InitObjects
                             56 	.globl _CheckObjects
                             57 	.globl _ReprintObjects
                             58 	.globl _DeleteObjectScoreboard
                             59 	.globl _DeleteObject
                             60 	.globl _PrintObject
                             61 	.globl _RedefineKey
                             62 	.globl _Wait4Key
                             63 	.globl _ReturnKeyPressed
                             64 	.globl _FacingWall
                             65 	.globl _OverMines
                             66 	.globl _OnStairs
                             67 	.globl _OnPlatform
                             68 	.globl _GetTilePtr
                             69 	.globl _MoveLeftMap
                             70 	.globl _MoveRightMap
                             71 	.globl _InitMap
                             72 	.globl _PrintMap
                             73 	.globl _RefreshScoreboard
                             74 	.globl _InitScoreboard
                             75 	.globl _PrintText
                             76 	.globl _PrintNumber
                             77 	.globl _ClearScreen
                             78 	.globl _Interrupt
                             79 	.globl _PlayMusic
                             80 	.globl _Pause
                             81 	.globl _Itoa
                             82 	.globl _Strlen
                             83 	.globl _cpct_zx7b_decrunch_s
                             84 	.globl _cpct_etm_setTileset2x4
                             85 	.globl _cpct_etm_drawTileBox2x4
                             86 	.globl _cpct_akp_SFXPlay
                             87 	.globl _cpct_akp_SFXInit
                             88 	.globl _cpct_akp_musicInit
                             89 	.globl _cpct_getScreenPtr
                             90 	.globl _cpct_setPALColour
                             91 	.globl _cpct_setPalette
                             92 	.globl _cpct_waitVSYNC
                             93 	.globl _cpct_setVideoMode
                             94 	.globl _cpct_drawSpriteMaskedAlignedTable
                             95 	.globl _cpct_drawSprite
                             96 	.globl _cpct_drawSolidBox
                             97 	.globl _cpct_px2byteM0
                             98 	.globl _cpct_hflipSpriteM0
                             99 	.globl _cpct_get2Bits
                            100 	.globl _cpct_isAnyKeyPressed
                            101 	.globl _cpct_isKeyPressed
                            102 	.globl _cpct_scanKeyboard_if
                            103 	.globl _cpct_scanKeyboard_f
                            104 	.globl _cpct_scanKeyboard
                            105 	.globl _cpct_memset
                            106 	.globl _cpct_setInterruptHandler
                            107 	.globl _cpct_disableFirmware
                            108 	.globl _mapNumber
                            109 	.globl _enum_mov
                            110 	.globl _enum_sta
                            111 	.globl _enum_dir
                            112 	.globl _obj
                            113 	.globl _lc
                            114 	.globl _activeLC
                            115 	.globl _shotLC
                            116 	.globl _shot
                            117 	.globl _spr
                            118 	.globl _ctlPause
                            119 	.globl _ctlAbort
                            120 	.globl _ctlMusic
                            121 	.globl _ctlFire
                            122 	.globl _ctlRight
                            123 	.globl _ctlLeft
                            124 	.globl _ctlDown
                            125 	.globl _ctlUp
                            126 	.globl _ct
                            127 	.globl _ctMainLoop
                            128 	.globl _music
                            129 	.globl _ammo
                            130 	.globl _highScore
                            131 	.globl _score
                            132 	.globl _g_jumpTable
                            133 	.globl _anim_infected
                            134 	.globl _anim_aracnovirus
                            135 	.globl _anim_pelusoid
                            136 	.globl _frm_infected
                            137 	.globl _frm_aracnovirus
                            138 	.globl _frm_pelusoid
                            139 	.globl _animClimb
                            140 	.globl _animWalk
                            141 	.globl _frm_player
                            142 	.globl _mapTitle
                            143 	.globl _ExplodePlayer
                            144 	.globl _DeleteShot
                            145 	.globl _SetEnemies
                            146 	.globl _ExplodeEnemies
                            147 	.globl _GetLC
                            148 	.globl _GameOver
                            149 ;--------------------------------------------------------
                            150 ; special function registers
                            151 ;--------------------------------------------------------
                            152 ;--------------------------------------------------------
                            153 ; ram data
                            154 ;--------------------------------------------------------
                            155 	.area _DATA
   0000                     156 _score::
   0000                     157 	.ds 2
   0002                     158 _highScore::
   0002                     159 	.ds 2
   0004                     160 _ammo::
   0004                     161 	.ds 1
   0005                     162 _music::
   0005                     163 	.ds 1
   0006                     164 _ctMainLoop::
   0006                     165 	.ds 1
   0007                     166 _ct::
   0007                     167 	.ds 1
   0008                     168 _ctlUp::
   0008                     169 	.ds 2
   000A                     170 _ctlDown::
   000A                     171 	.ds 2
   000C                     172 _ctlLeft::
   000C                     173 	.ds 2
   000E                     174 _ctlRight::
   000E                     175 	.ds 2
   0010                     176 _ctlFire::
   0010                     177 	.ds 2
   0012                     178 _ctlMusic::
   0012                     179 	.ds 2
   0014                     180 _ctlAbort::
   0014                     181 	.ds 2
   0016                     182 _ctlPause::
   0016                     183 	.ds 2
   0018                     184 _spr::
   0018                     185 	.ds 76
   0064                     186 _shot::
   0064                     187 	.ds 6
   006A                     188 _shotLC::
   006A                     189 	.ds 6
   0070                     190 _activeLC::
   0070                     191 	.ds 1
   0071                     192 _lc::
   0071                     193 	.ds 15
   0080                     194 _obj::
   0080                     195 	.ds 40
   00A8                     196 _enum_dir::
   00A8                     197 	.ds 1
   00A9                     198 _enum_sta::
   00A9                     199 	.ds 1
   00AA                     200 _enum_mov::
   00AA                     201 	.ds 1
   00AB                     202 _Interrupt_nInt_1_143:
   00AB                     203 	.ds 1
                            204 ;--------------------------------------------------------
                            205 ; ram data
                            206 ;--------------------------------------------------------
                            207 	.area _INITIALIZED
   0000                     208 _mapNumber::
   0000                     209 	.ds 1
                            210 ;--------------------------------------------------------
                            211 ; absolute external ram data
                            212 ;--------------------------------------------------------
                            213 	.area _DABS (ABS)
                            214 ;--------------------------------------------------------
                            215 ; global & static initialisations
                            216 ;--------------------------------------------------------
                            217 	.area _HOME
                            218 	.area _GSINIT
                            219 	.area _GSFINAL
                            220 	.area _GSINIT
                            221 ;--------------------------------------------------------
                            222 ; Home
                            223 ;--------------------------------------------------------
                            224 	.area _HOME
                            225 	.area _HOME
                            226 ;--------------------------------------------------------
                            227 ; code
                            228 ;--------------------------------------------------------
                            229 	.area _CODE
                            230 ;src/main.c:258: cpctm_createTransparentMaskTable(g_maskTable, 0x100, M0, 0);
                            231 ;	---------------------------------
                            232 ; Function dummy_cpct_transparentMaskTable0M0_container
                            233 ; ---------------------------------
   0000                     234 _dummy_cpct_transparentMaskTable0M0_container::
                            235 	.area _g_maskTable_ (ABS) 
   0100                     236 	.org 0x100 
   0100                     237 	 _g_maskTable::
   0100 FF AA 55 00 AA AA   238 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0108 55 00 55 00 00 00   239 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0110 AA AA 00 00 AA AA   240 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0118 00 00 00 00 00 00   241 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0120 55 00 55 00 00 00   242 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0128 55 00 55 00 00 00   243 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0130 00 00 00 00 00 00   244 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0138 00 00 00 00 00 00   245 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0140 AA AA 00 00 AA AA   246 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0148 00 00 00 00 00 00   247 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0150 AA AA 00 00 AA AA   248 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0158 00 00 00 00 00 00   249 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0160 00 00 00 00 00 00   250 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0168 00 00 00 00 00 00   251 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0170 00 00 00 00 00 00   252 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0178 00 00 00 00 00 00   253 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0180 55 00 55 00 00 00   254 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0188 55 00 55 00 00 00   255 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0190 00 00 00 00 00 00   256 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0198 00 00 00 00 00 00   257 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01A0 55 00 55 00 00 00   258 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01A8 55 00 55 00 00 00   259 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01B0 00 00 00 00 00 00   260 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01B8 00 00 00 00 00 00   261 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01C0 00 00 00 00 00 00   262 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01C8 00 00 00 00 00 00   263 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01D0 00 00 00 00 00 00   264 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01D8 00 00 00 00 00 00   265 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01E0 00 00 00 00 00 00   266 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01E8 00 00 00 00 00 00   267 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01F0 00 00 00 00 00 00   268 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01F8 00 00 00 00 00 00   269 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            270 	.area _CSEG (REL, CON) 
                            271 ;src/main.c:293: u8 Strlen(const u8 *str) __z88dk_fastcall {
                            272 ;	---------------------------------
                            273 ; Function Strlen
                            274 ; ---------------------------------
   0000                     275 _Strlen::
                            276 ;src/main.c:295: for (s = str; *s; ++s);
   0000 4D            [ 4]  277 	ld	c,l
   0001 44            [ 4]  278 	ld	b,h
   0002                     279 00103$:
   0002 7E            [ 7]  280 	ld	a, (hl)
   0003 B7            [ 4]  281 	or	a, a
   0004 28 03         [12]  282 	jr	Z,00101$
   0006 23            [ 6]  283 	inc	hl
   0007 18 F9         [12]  284 	jr	00103$
   0009                     285 00101$:
                            286 ;src/main.c:296: return (s - str);
   0009 BF            [ 4]  287 	cp	a, a
   000A ED 42         [15]  288 	sbc	hl, bc
   000C C9            [10]  289 	ret
   000D                     290 _mapTitle:
   000Dr5Fr00               291 	.dw __str_0
   000Fr74r00               292 	.dw __str_1
   0011r89r00               293 	.dw __str_2
   0013                     294 _frm_player:
   0013 03                  295 	.db #0x03	; 3
   0014r00r00               296 	.dw _g_player_0
   0016 03                  297 	.db #0x03	; 3
   0017r00r00               298 	.dw _g_player_1
   0019 03                  299 	.db #0x03	; 3
   001Ar00r00               300 	.dw _g_player_2
   001C 03                  301 	.db #0x03	; 3
   001Dr00r00               302 	.dw _g_player_3
   001F 03                  303 	.db #0x03	; 3
   0020r00r00               304 	.dw _g_player_4
   0022 03                  305 	.db #0x03	; 3
   0023r00r00               306 	.dw _g_player_5
   0025 03                  307 	.db #0x03	; 3
   0026r00r00               308 	.dw _g_player_6
   0028 03                  309 	.db #0x03	; 3
   0029r00r00               310 	.dw _g_player_7
   002B 03                  311 	.db #0x03	; 3
   002Cr00r00               312 	.dw _g_player_8
   002E                     313 _animWalk:
   002Er13r00               314 	.dw (_frm_player + 0)
   0030r16r00               315 	.dw (_frm_player + 3)
   0032r13r00               316 	.dw (_frm_player + 0)
   0034r19r00               317 	.dw (_frm_player + 6)
   0036                     318 _animClimb:
   0036r25r00               319 	.dw (_frm_player + 18)
   0038r28r00               320 	.dw (_frm_player + 21)
   003Ar25r00               321 	.dw (_frm_player + 18)
   003Cr2Br00               322 	.dw (_frm_player + 24)
   003E                     323 _frm_pelusoid:
   003E 00                  324 	.db #0x00	; 0
   003Fr00r00               325 	.dw _g_pelusoid_0
   0041 00                  326 	.db #0x00	; 0
   0042r00r00               327 	.dw _g_pelusoid_1
   0044                     328 _frm_aracnovirus:
   0044 00                  329 	.db #0x00	; 0
   0045r00r00               330 	.dw _g_aracnovirus_0
   0047 00                  331 	.db #0x00	; 0
   0048r00r00               332 	.dw _g_aracnovirus_1
   004A                     333 _frm_infected:
   004A 00                  334 	.db #0x00	; 0
   004Br00r00               335 	.dw _g_infected_0
   004D 00                  336 	.db #0x00	; 0
   004Er00r00               337 	.dw _g_infected_1
   0050                     338 _anim_pelusoid:
   0050r3Er00               339 	.dw (_frm_pelusoid + 0)
   0052r41r00               340 	.dw (_frm_pelusoid + 3)
   0054                     341 _anim_aracnovirus:
   0054r44r00               342 	.dw (_frm_aracnovirus + 0)
   0056r47r00               343 	.dw (_frm_aracnovirus + 3)
   0058                     344 _anim_infected:
   0058r4Ar00               345 	.dw (_frm_infected + 0)
   005Ar4Dr00               346 	.dw (_frm_infected + 3)
   005C                     347 _g_jumpTable:
   005C FF                  348 	.db #0xff	; 255
   005D A5                  349 	.db #0xa5	; 165
   005E 40                  350 	.db #0x40	; 64
   005F                     351 __str_0:
   005F 40 40 55 50 50 45   352 	.ascii "@@UPPER@LEFT@DECK@C@"
        52 40 4C 45 46 54
        40 44 45 43 4B 40
        43 40
   0073 00                  353 	.db 0x00
   0074                     354 __str_1:
   0074 40 40 55 50 50 45   355 	.ascii "@@UPPER@LEFT@DECK@B@"
        52 40 4C 45 46 54
        40 44 45 43 4B 40
        42 40
   0088 00                  356 	.db 0x00
   0089                     357 __str_2:
   0089 40 40 55 50 50 45   358 	.ascii "@@UPPER@LEFT@DECK@A@"
        52 40 4C 45 46 54
        40 44 45 43 4B 40
        41 40
   009D 00                  359 	.db 0x00
                            360 ;src/main.c:301: char* Itoa(u16 value, char* result, int base) {    
                            361 ;	---------------------------------
                            362 ; Function Itoa
                            363 ; ---------------------------------
   009E                     364 _Itoa::
   009E DD E5         [15]  365 	push	ix
   00A0 DD 21 00 00   [14]  366 	ld	ix,#0
   00A4 DD 39         [15]  367 	add	ix,sp
   00A6 21 F9 FF      [10]  368 	ld	hl, #-7
   00A9 39            [11]  369 	add	hl, sp
   00AA F9            [ 6]  370 	ld	sp, hl
                            371 ;src/main.c:303: char* ptr = result, *ptr1 = result, tmp_char;
   00AB DD 5E 06      [19]  372 	ld	e,6 (ix)
   00AE DD 56 07      [19]  373 	ld	d,7 (ix)
   00B1 DD 73 FA      [19]  374 	ld	-6 (ix), e
   00B4 DD 72 FB      [19]  375 	ld	-5 (ix), d
                            376 ;src/main.c:305: if (base < 2 || base > 36) { 
   00B7 DD 7E 08      [19]  377 	ld	a, 8 (ix)
   00BA D6 02         [ 7]  378 	sub	a, #0x02
   00BC DD 7E 09      [19]  379 	ld	a, 9 (ix)
   00BF 17            [ 4]  380 	rla
   00C0 3F            [ 4]  381 	ccf
   00C1 1F            [ 4]  382 	rra
   00C2 DE 80         [ 7]  383 	sbc	a, #0x80
   00C4 38 12         [12]  384 	jr	C,00101$
   00C6 3E 24         [ 7]  385 	ld	a, #0x24
   00C8 DD BE 08      [19]  386 	cp	a, 8 (ix)
   00CB 3E 00         [ 7]  387 	ld	a, #0x00
   00CD DD 9E 09      [19]  388 	sbc	a, 9 (ix)
   00D0 E2rD5r00      [10]  389 	jp	PO, 00140$
   00D3 EE 80         [ 7]  390 	xor	a, #0x80
   00D5                     391 00140$:
   00D5 F2rDEr00      [10]  392 	jp	P, 00115$
   00D8                     393 00101$:
                            394 ;src/main.c:306: *result = '\0'; 
   00D8 AF            [ 4]  395 	xor	a, a
   00D9 12            [ 7]  396 	ld	(de), a
                            397 ;src/main.c:307: return result; 
   00DA EB            [ 4]  398 	ex	de,hl
   00DB C3r7Fr01      [10]  399 	jp	00112$
                            400 ;src/main.c:310: do {
   00DE                     401 00115$:
   00DE DD 73 FE      [19]  402 	ld	-2 (ix), e
   00E1 DD 72 FF      [19]  403 	ld	-1 (ix), d
   00E4                     404 00104$:
                            405 ;src/main.c:311: tmp_value = value;
   00E4 DD 7E 04      [19]  406 	ld	a, 4 (ix)
   00E7 DD 77 FC      [19]  407 	ld	-4 (ix), a
   00EA DD 7E 05      [19]  408 	ld	a, 5 (ix)
   00ED DD 77 FD      [19]  409 	ld	-3 (ix), a
                            410 ;src/main.c:312: value /= base;
   00F0 DD 4E 08      [19]  411 	ld	c,8 (ix)
   00F3 DD 46 09      [19]  412 	ld	b,9 (ix)
   00F6 C5            [11]  413 	push	bc
   00F7 DD 6E 04      [19]  414 	ld	l,4 (ix)
   00FA DD 66 05      [19]  415 	ld	h,5 (ix)
   00FD E5            [11]  416 	push	hl
   00FE CDr00r00      [17]  417 	call	__divuint
   0101 F1            [10]  418 	pop	af
   0102 F1            [10]  419 	pop	af
   0103 DD 75 04      [19]  420 	ld	4 (ix), l
   0106 DD 74 05      [19]  421 	ld	5 (ix), h
                            422 ;src/main.c:313: *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
   0109 DD 4E FC      [19]  423 	ld	c, -4 (ix)
   010C DD 5E 04      [19]  424 	ld	e, 4 (ix)
   010F DD 66 08      [19]  425 	ld	h, 8 (ix)
   0112 2E 00         [ 7]  426 	ld	l, #0x00
   0114 55            [ 4]  427 	ld	d, l
   0115 06 08         [ 7]  428 	ld	b, #0x08
   0117                     429 00141$:
   0117 29            [11]  430 	add	hl, hl
   0118 30 01         [12]  431 	jr	NC,00142$
   011A 19            [11]  432 	add	hl, de
   011B                     433 00142$:
   011B 10 FA         [13]  434 	djnz	00141$
   011D 79            [ 4]  435 	ld	a, c
   011E 95            [ 4]  436 	sub	a, l
   011F C6 23         [ 7]  437 	add	a, #0x23
   0121 4F            [ 4]  438 	ld	c, a
   0122 17            [ 4]  439 	rla
   0123 9F            [ 4]  440 	sbc	a, a
   0124 47            [ 4]  441 	ld	b, a
   0125 21r84r01      [10]  442 	ld	hl, #___str_3
   0128 09            [11]  443 	add	hl, bc
   0129 4E            [ 7]  444 	ld	c, (hl)
   012A DD 6E FE      [19]  445 	ld	l,-2 (ix)
   012D DD 66 FF      [19]  446 	ld	h,-1 (ix)
   0130 71            [ 7]  447 	ld	(hl), c
   0131 DD 34 FE      [23]  448 	inc	-2 (ix)
   0134 20 03         [12]  449 	jr	NZ,00143$
   0136 DD 34 FF      [23]  450 	inc	-1 (ix)
   0139                     451 00143$:
                            452 ;src/main.c:314: } while (value);
   0139 DD 7E 05      [19]  453 	ld	a, 5 (ix)
   013C DD B6 04      [19]  454 	or	a,4 (ix)
   013F 20 A3         [12]  455 	jr	NZ,00104$
                            456 ;src/main.c:316: if (tmp_value < 0) 
   0141 DD 4E FE      [19]  457 	ld	c,-2 (ix)
   0144 DD 46 FF      [19]  458 	ld	b,-1 (ix)
   0147 DD CB FD 7E   [20]  459 	bit	7, -3 (ix)
   014B 28 0F         [12]  460 	jr	Z,00108$
                            461 ;src/main.c:317: *ptr++ = '-';
   014D DD 6E FE      [19]  462 	ld	l,-2 (ix)
   0150 DD 66 FF      [19]  463 	ld	h,-1 (ix)
   0153 36 2D         [10]  464 	ld	(hl), #0x2d
   0155 DD 4E FE      [19]  465 	ld	c,-2 (ix)
   0158 DD 46 FF      [19]  466 	ld	b,-1 (ix)
   015B 03            [ 6]  467 	inc	bc
   015C                     468 00108$:
                            469 ;src/main.c:318: *ptr-- = '\0';
   015C AF            [ 4]  470 	xor	a, a
   015D 02            [ 7]  471 	ld	(bc), a
   015E 0B            [ 6]  472 	dec	bc
                            473 ;src/main.c:320: while(ptr1 < ptr) {
   015F DD 5E FA      [19]  474 	ld	e,-6 (ix)
   0162 DD 56 FB      [19]  475 	ld	d,-5 (ix)
   0165                     476 00109$:
   0165 7B            [ 4]  477 	ld	a, e
   0166 91            [ 4]  478 	sub	a, c
   0167 7A            [ 4]  479 	ld	a, d
   0168 98            [ 4]  480 	sbc	a, b
   0169 30 0E         [12]  481 	jr	NC,00111$
                            482 ;src/main.c:321: tmp_char = *ptr;
   016B 0A            [ 7]  483 	ld	a, (bc)
   016C DD 77 F9      [19]  484 	ld	-7 (ix), a
                            485 ;src/main.c:322: *ptr--= *ptr1;
   016F 1A            [ 7]  486 	ld	a, (de)
   0170 02            [ 7]  487 	ld	(bc), a
   0171 0B            [ 6]  488 	dec	bc
                            489 ;src/main.c:323: *ptr1++ = tmp_char;
   0172 DD 7E F9      [19]  490 	ld	a, -7 (ix)
   0175 12            [ 7]  491 	ld	(de), a
   0176 13            [ 6]  492 	inc	de
   0177 18 EC         [12]  493 	jr	00109$
   0179                     494 00111$:
                            495 ;src/main.c:326: return result;
   0179 DD 6E 06      [19]  496 	ld	l,6 (ix)
   017C DD 66 07      [19]  497 	ld	h,7 (ix)
   017F                     498 00112$:
   017F DD F9         [10]  499 	ld	sp, ix
   0181 DD E1         [14]  500 	pop	ix
   0183 C9            [10]  501 	ret
   0184                     502 ___str_3:
   0184 7A 79 78 77 76 75   503 	.ascii "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmno"
        74 73 72 71 70 6F
        6E 6D 6C 6B 6A 69
        68 67 66 65 64 63
        62 61 39 38 37 36
        35 34 33 32 31 30
        31 32 33 34 35 36
        37 38 39 61 62 63
        64 65 66 67 68 69
        6A 6B 6C 6D 6E 6F
   01C0 70 71 72 73 74 75   504 	.ascii "pqrstuvwxyz"
        76 77 78 79 7A
   01CB 00                  505 	.db 0x00
                            506 ;src/main.c:331: void Pause(u16 value) __z88dk_fastcall {
                            507 ;	---------------------------------
                            508 ; Function Pause
                            509 ; ---------------------------------
   01CC                     510 _Pause::
                            511 ;src/main.c:333: for(i = 0; i < value; i++) {
   01CC 01 00 00      [10]  512 	ld	bc, #0x0000
   01CF                     513 00103$:
   01CF 79            [ 4]  514 	ld	a, c
   01D0 95            [ 4]  515 	sub	a, l
   01D1 78            [ 4]  516 	ld	a, b
   01D2 9C            [ 4]  517 	sbc	a, h
   01D3 D0            [11]  518 	ret	NC
                            519 ;src/main.c:336: __endasm;
   01D4 76            [ 4]  520 	halt
                            521 ;src/main.c:333: for(i = 0; i < value; i++) {
   01D5 03            [ 6]  522 	inc	bc
   01D6 18 F7         [12]  523 	jr	00103$
                            524 ;src/main.c:342: void PlayMusic() {
                            525 ;	---------------------------------
                            526 ; Function PlayMusic
                            527 ; ---------------------------------
   01D8                     528 _PlayMusic::
                            529 ;src/main.c:357: __endasm;
   01D8 D9            [ 4]  530 	exx
   01D9 08                  531 	.db	#0x08
   01DA F5            [11]  532 	push	af
   01DB C5            [11]  533 	push	bc
   01DC D5            [11]  534 	push	de
   01DD E5            [11]  535 	push	hl
   01DE CDr00r00      [17]  536 	call	_cpct_akp_musicPlay
   01E1 E1            [10]  537 	pop	hl
   01E2 D1            [10]  538 	pop	de
   01E3 C1            [10]  539 	pop	bc
   01E4 F1            [10]  540 	pop	af
   01E5 08                  541 	.db	#0x08
   01E6 D9            [ 4]  542 	exx
   01E7 C9            [10]  543 	ret
                            544 ;src/main.c:362: void Interrupt() {
                            545 ;	---------------------------------
                            546 ; Function Interrupt
                            547 ; ---------------------------------
   01E8                     548 _Interrupt::
                            549 ;src/main.c:365: if (++nInt == 5) {
   01E8 FD 21rABr00   [14]  550 	ld	iy, #_Interrupt_nInt_1_143
   01EC FD 34 00      [23]  551 	inc	0 (iy)
   01EF FD 7E 00      [19]  552 	ld	a, 0 (iy)
   01F2 D6 05         [ 7]  553 	sub	a, #0x05
   01F4 C0            [11]  554 	ret	NZ
                            555 ;src/main.c:366: PlayMusic();
   01F5 CDrD8r01      [17]  556 	call	_PlayMusic
                            557 ;src/main.c:367: cpct_scanKeyboard_if();
   01F8 CDr00r00      [17]  558 	call	_cpct_scanKeyboard_if
                            559 ;src/main.c:368: nInt = 0;
   01FB 21rABr00      [10]  560 	ld	hl,#_Interrupt_nInt_1_143 + 0
   01FE 36 00         [10]  561 	ld	(hl), #0x00
   0200 C9            [10]  562 	ret
                            563 ;src/main.c:386: void ClearScreen() {
                            564 ;	---------------------------------
                            565 ; Function ClearScreen
                            566 ; ---------------------------------
   0201                     567 _ClearScreen::
                            568 ;src/main.c:387: cpct_memset(CPCT_VMEM_START, cpct_px2byteM0(1, 1), 16384);
   0201 21 01 01      [10]  569 	ld	hl, #0x0101
   0204 E5            [11]  570 	push	hl
   0205 CDr00r00      [17]  571 	call	_cpct_px2byteM0
   0208 45            [ 4]  572 	ld	b, l
   0209 21 00 40      [10]  573 	ld	hl, #0x4000
   020C E5            [11]  574 	push	hl
   020D C5            [11]  575 	push	bc
   020E 33            [ 6]  576 	inc	sp
   020F 26 C0         [ 7]  577 	ld	h, #0xc0
   0211 E5            [11]  578 	push	hl
   0212 CDr00r00      [17]  579 	call	_cpct_memset
   0215 C9            [10]  580 	ret
                            581 ;src/main.c:392: void PrintNumber(u16 num, u8 len, u8 x, u8 y) { 
                            582 ;	---------------------------------
                            583 ; Function PrintNumber
                            584 ; ---------------------------------
   0216                     585 _PrintNumber::
   0216 DD E5         [15]  586 	push	ix
   0218 DD 21 00 00   [14]  587 	ld	ix,#0
   021C DD 39         [15]  588 	add	ix,sp
   021E 21 F8 FF      [10]  589 	ld	hl, #-8
   0221 39            [11]  590 	add	hl, sp
                            591 ;src/main.c:398: Itoa(num, txt, 10);    
   0222 F9            [ 6]  592 	ld	sp, hl
   0223 23            [ 6]  593 	inc	hl
   0224 23            [ 6]  594 	inc	hl
   0225 4D            [ 4]  595 	ld	c, l
   0226 44            [ 4]  596 	ld	b, h
   0227 59            [ 4]  597 	ld	e, c
   0228 50            [ 4]  598 	ld	d, b
   0229 C5            [11]  599 	push	bc
   022A 21 0A 00      [10]  600 	ld	hl, #0x000a
   022D E5            [11]  601 	push	hl
   022E D5            [11]  602 	push	de
   022F DD 6E 04      [19]  603 	ld	l,4 (ix)
   0232 DD 66 05      [19]  604 	ld	h,5 (ix)
   0235 E5            [11]  605 	push	hl
   0236 CDr9Er00      [17]  606 	call	_Itoa
   0239 21 06 00      [10]  607 	ld	hl, #6
   023C 39            [11]  608 	add	hl, sp
   023D F9            [ 6]  609 	ld	sp, hl
   023E C1            [10]  610 	pop	bc
                            611 ;src/main.c:399: zeros = len - Strlen(txt);
   023F 69            [ 4]  612 	ld	l, c
   0240 60            [ 4]  613 	ld	h, b
   0241 C5            [11]  614 	push	bc
   0242 CDr00r00      [17]  615 	call	_Strlen
   0245 C1            [10]  616 	pop	bc
   0246 DD 7E 06      [19]  617 	ld	a, 6 (ix)
   0249 95            [ 4]  618 	sub	a, l
   024A DD 77 F9      [19]  619 	ld	-7 (ix), a
                            620 ;src/main.c:400: nAux = txt[pos];
   024D 0A            [ 7]  621 	ld	a, (bc)
   024E 5F            [ 4]  622 	ld	e, a
                            623 ;src/main.c:402: while(nAux != '\0')	{	
   024F DD 36 F8 00   [19]  624 	ld	-8 (ix), #0x00
   0253                     625 00101$:
   0253 7B            [ 4]  626 	ld	a, e
   0254 B7            [ 4]  627 	or	a, a
   0255 28 4C         [12]  628 	jr	Z,00104$
                            629 ;src/main.c:403: u8* ptr = cpct_getScreenPtr(CPCT_VMEM_START, (zeros + pos) * FNT_W + x, y);
   0257 DD 7E F9      [19]  630 	ld	a, -7 (ix)
   025A DD 86 F8      [19]  631 	add	a, -8 (ix)
   025D 87            [ 4]  632 	add	a, a
   025E 87            [ 4]  633 	add	a, a
   025F DD 86 07      [19]  634 	add	a, 7 (ix)
   0262 57            [ 4]  635 	ld	d, a
   0263 C5            [11]  636 	push	bc
   0264 D5            [11]  637 	push	de
   0265 DD 7E 08      [19]  638 	ld	a, 8 (ix)
   0268 F5            [11]  639 	push	af
   0269 33            [ 6]  640 	inc	sp
   026A D5            [11]  641 	push	de
   026B 33            [ 6]  642 	inc	sp
   026C 21 00 C0      [10]  643 	ld	hl, #0xc000
   026F E5            [11]  644 	push	hl
   0270 CDr00r00      [17]  645 	call	_cpct_getScreenPtr
   0273 D1            [10]  646 	pop	de
   0274 C1            [10]  647 	pop	bc
                            648 ;src/main.c:404: cpct_drawSprite(g_font[nAux - 48], ptr, FNT_W, FNT_H);
   0275 E5            [11]  649 	push	hl
   0276 FD E1         [14]  650 	pop	iy
   0278 16 00         [ 7]  651 	ld	d, #0x00
   027A 7B            [ 4]  652 	ld	a, e
   027B C6 D0         [ 7]  653 	add	a, #0xd0
   027D 6F            [ 4]  654 	ld	l, a
   027E 7A            [ 4]  655 	ld	a, d
   027F CE FF         [ 7]  656 	adc	a, #0xff
   0281 67            [ 4]  657 	ld	h, a
   0282 29            [11]  658 	add	hl, hl
   0283 29            [11]  659 	add	hl, hl
   0284 29            [11]  660 	add	hl, hl
   0285 29            [11]  661 	add	hl, hl
   0286 29            [11]  662 	add	hl, hl
   0287 11r00r00      [10]  663 	ld	de, #_g_font
   028A 19            [11]  664 	add	hl, de
   028B C5            [11]  665 	push	bc
   028C 11 04 08      [10]  666 	ld	de, #0x0804
   028F D5            [11]  667 	push	de
   0290 FD E5         [15]  668 	push	iy
   0292 E5            [11]  669 	push	hl
   0293 CDr00r00      [17]  670 	call	_cpct_drawSprite
   0296 C1            [10]  671 	pop	bc
                            672 ;src/main.c:405: nAux = txt[++pos];
   0297 DD 34 F8      [23]  673 	inc	-8 (ix)
   029A DD 6E F8      [19]  674 	ld	l,-8 (ix)
   029D 26 00         [ 7]  675 	ld	h,#0x00
   029F 09            [11]  676 	add	hl, bc
   02A0 5E            [ 7]  677 	ld	e, (hl)
   02A1 18 B0         [12]  678 	jr	00101$
   02A3                     679 00104$:
   02A3 DD F9         [10]  680 	ld	sp, ix
   02A5 DD E1         [14]  681 	pop	ix
   02A7 C9            [10]  682 	ret
                            683 ;src/main.c:411: void PrintText(u8 txt[], u8 x, u8 y) {
                            684 ;	---------------------------------
                            685 ; Function PrintText
                            686 ; ---------------------------------
   02A8                     687 _PrintText::
   02A8 DD E5         [15]  688 	push	ix
   02AA DD 21 00 00   [14]  689 	ld	ix,#0
   02AE DD 39         [15]  690 	add	ix,sp
   02B0 3B            [ 6]  691 	dec	sp
                            692 ;src/main.c:413: u8 car = txt[pos];
   02B1 DD 4E 04      [19]  693 	ld	c,4 (ix)
   02B4 DD 46 05      [19]  694 	ld	b,5 (ix)
   02B7 0A            [ 7]  695 	ld	a, (bc)
   02B8 5F            [ 4]  696 	ld	e, a
                            697 ;src/main.c:415: while(car != '\0') { // "@" = space    ";" = -   "?" = !!
   02B9 DD 36 FF 00   [19]  698 	ld	-1 (ix), #0x00
   02BD                     699 00101$:
   02BD 7B            [ 4]  700 	ld	a, e
   02BE B7            [ 4]  701 	or	a, a
   02BF 28 49         [12]  702 	jr	Z,00104$
                            703 ;src/main.c:416: u8* ptr = cpct_getScreenPtr(CPCT_VMEM_START, (pos * FNT_W) + x, y);
   02C1 DD 7E FF      [19]  704 	ld	a, -1 (ix)
   02C4 87            [ 4]  705 	add	a, a
   02C5 87            [ 4]  706 	add	a, a
   02C6 DD 86 06      [19]  707 	add	a, 6 (ix)
   02C9 57            [ 4]  708 	ld	d, a
   02CA C5            [11]  709 	push	bc
   02CB D5            [11]  710 	push	de
   02CC DD 7E 07      [19]  711 	ld	a, 7 (ix)
   02CF F5            [11]  712 	push	af
   02D0 33            [ 6]  713 	inc	sp
   02D1 D5            [11]  714 	push	de
   02D2 33            [ 6]  715 	inc	sp
   02D3 21 00 C0      [10]  716 	ld	hl, #0xc000
   02D6 E5            [11]  717 	push	hl
   02D7 CDr00r00      [17]  718 	call	_cpct_getScreenPtr
   02DA D1            [10]  719 	pop	de
   02DB C1            [10]  720 	pop	bc
                            721 ;src/main.c:417: cpct_drawSprite(g_font[car - 48], ptr, FNT_W, FNT_H);
   02DC E5            [11]  722 	push	hl
   02DD FD E1         [14]  723 	pop	iy
   02DF 16 00         [ 7]  724 	ld	d, #0x00
   02E1 7B            [ 4]  725 	ld	a, e
   02E2 C6 D0         [ 7]  726 	add	a, #0xd0
   02E4 6F            [ 4]  727 	ld	l, a
   02E5 7A            [ 4]  728 	ld	a, d
   02E6 CE FF         [ 7]  729 	adc	a, #0xff
   02E8 67            [ 4]  730 	ld	h, a
   02E9 29            [11]  731 	add	hl, hl
   02EA 29            [11]  732 	add	hl, hl
   02EB 29            [11]  733 	add	hl, hl
   02EC 29            [11]  734 	add	hl, hl
   02ED 29            [11]  735 	add	hl, hl
   02EE 11r00r00      [10]  736 	ld	de, #_g_font
   02F1 19            [11]  737 	add	hl, de
   02F2 C5            [11]  738 	push	bc
   02F3 11 04 08      [10]  739 	ld	de, #0x0804
   02F6 D5            [11]  740 	push	de
   02F7 FD E5         [15]  741 	push	iy
   02F9 E5            [11]  742 	push	hl
   02FA CDr00r00      [17]  743 	call	_cpct_drawSprite
   02FD C1            [10]  744 	pop	bc
                            745 ;src/main.c:418: car = txt[++pos];
   02FE DD 34 FF      [23]  746 	inc	-1 (ix)
   0301 DD 6E FF      [19]  747 	ld	l,-1 (ix)
   0304 26 00         [ 7]  748 	ld	h,#0x00
   0306 09            [11]  749 	add	hl, bc
   0307 5E            [ 7]  750 	ld	e, (hl)
   0308 18 B3         [12]  751 	jr	00101$
   030A                     752 00104$:
   030A 33            [ 6]  753 	inc	sp
   030B DD E1         [14]  754 	pop	ix
   030D C9            [10]  755 	ret
                            756 ;src/main.c:424: void InitScoreboard()
                            757 ;	---------------------------------
                            758 ; Function InitScoreboard
                            759 ; ---------------------------------
   030E                     760 _InitScoreboard::
                            761 ;src/main.c:426: cpct_drawSprite(g_hud_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 0), G_HUD_0_W, G_HUD_0_H);
   030E 21 28 28      [10]  762 	ld	hl, #0x2828
   0311 E5            [11]  763 	push	hl
   0312 21 00 C0      [10]  764 	ld	hl, #0xc000
   0315 E5            [11]  765 	push	hl
   0316 21r00r00      [10]  766 	ld	hl, #_g_hud_0
   0319 E5            [11]  767 	push	hl
   031A CDr00r00      [17]  768 	call	_cpct_drawSprite
                            769 ;src/main.c:427: cpct_drawSprite(g_hud_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 0), G_HUD_1_W, G_HUD_1_H);
   031D 21 28 28      [10]  770 	ld	hl, #0x2828
   0320 E5            [11]  771 	push	hl
   0321 26 C0         [ 7]  772 	ld	h, #0xc0
   0323 E5            [11]  773 	push	hl
   0324 21r00r00      [10]  774 	ld	hl, #_g_hud_1
   0327 E5            [11]  775 	push	hl
   0328 CDr00r00      [17]  776 	call	_cpct_drawSprite
   032B C9            [10]  777 	ret
                            778 ;src/main.c:432: void RefreshScoreboard() {
                            779 ;	---------------------------------
                            780 ; Function RefreshScoreboard
                            781 ; ---------------------------------
   032C                     782 _RefreshScoreboard::
                            783 ;src/main.c:433: PrintNumber(score, 5, 21, 0); // current score
   032C 21 15 00      [10]  784 	ld	hl, #0x0015
   032F E5            [11]  785 	push	hl
   0330 3E 05         [ 7]  786 	ld	a, #0x05
   0332 F5            [11]  787 	push	af
   0333 33            [ 6]  788 	inc	sp
   0334 2Ar00r00      [16]  789 	ld	hl, (_score)
   0337 E5            [11]  790 	push	hl
   0338 CDr16r02      [17]  791 	call	_PrintNumber
   033B F1            [10]  792 	pop	af
                            793 ;src/main.c:434: PrintNumber(highScore, 5, 60, 0); // session high score
   033C 33            [ 6]  794 	inc	sp
   033D 21 3C 00      [10]  795 	ld	hl,#0x003c
   0340 E3            [19]  796 	ex	(sp),hl
   0341 3E 05         [ 7]  797 	ld	a, #0x05
   0343 F5            [11]  798 	push	af
   0344 33            [ 6]  799 	inc	sp
   0345 2Ar02r00      [16]  800 	ld	hl, (_highScore)
   0348 E5            [11]  801 	push	hl
   0349 CDr16r02      [17]  802 	call	_PrintNumber
   034C F1            [10]  803 	pop	af
   034D F1            [10]  804 	pop	af
   034E 33            [ 6]  805 	inc	sp
                            806 ;src/main.c:435: PrintNumber(spr[0].lives, 1, 8, 17); // lives left 
   034F 21r21r00      [10]  807 	ld	hl, #_spr+9
   0352 4E            [ 7]  808 	ld	c, (hl)
   0353 06 00         [ 7]  809 	ld	b, #0x00
   0355 21 08 11      [10]  810 	ld	hl, #0x1108
   0358 E5            [11]  811 	push	hl
   0359 3E 01         [ 7]  812 	ld	a, #0x01
   035B F5            [11]  813 	push	af
   035C 33            [ 6]  814 	inc	sp
   035D C5            [11]  815 	push	bc
   035E CDr16r02      [17]  816 	call	_PrintNumber
   0361 F1            [10]  817 	pop	af
   0362 F1            [10]  818 	pop	af
   0363 33            [ 6]  819 	inc	sp
                            820 ;src/main.c:436: if (ammo < 10) PrintNumber(0, 1, 25, 17); // zero if ammo < 10
   0364 3Ar04r00      [13]  821 	ld	a,(#_ammo + 0)
   0367 D6 0A         [ 7]  822 	sub	a, #0x0a
   0369 30 12         [12]  823 	jr	NC,00102$
   036B 21 19 11      [10]  824 	ld	hl, #0x1119
   036E E5            [11]  825 	push	hl
   036F 3E 01         [ 7]  826 	ld	a, #0x01
   0371 F5            [11]  827 	push	af
   0372 33            [ 6]  828 	inc	sp
   0373 21 00 00      [10]  829 	ld	hl, #0x0000
   0376 E5            [11]  830 	push	hl
   0377 CDr16r02      [17]  831 	call	_PrintNumber
   037A F1            [10]  832 	pop	af
   037B F1            [10]  833 	pop	af
   037C 33            [ 6]  834 	inc	sp
   037D                     835 00102$:
                            836 ;src/main.c:437: PrintNumber(ammo, 2, 25, 17); // bullets left
   037D 21r04r00      [10]  837 	ld	hl,#_ammo + 0
   0380 4E            [ 7]  838 	ld	c, (hl)
   0381 06 00         [ 7]  839 	ld	b, #0x00
   0383 21 19 11      [10]  840 	ld	hl, #0x1119
   0386 E5            [11]  841 	push	hl
   0387 3E 02         [ 7]  842 	ld	a, #0x02
   0389 F5            [11]  843 	push	af
   038A 33            [ 6]  844 	inc	sp
   038B C5            [11]  845 	push	bc
   038C CDr16r02      [17]  846 	call	_PrintNumber
   038F F1            [10]  847 	pop	af
   0390 F1            [10]  848 	pop	af
   0391 33            [ 6]  849 	inc	sp
   0392 C9            [10]  850 	ret
                            851 ;src/main.c:442: void PrintMap() {
                            852 ;	---------------------------------
                            853 ; Function PrintMap
                            854 ; ---------------------------------
   0393                     855 _PrintMap::
                            856 ;src/main.c:443: cpct_etm_drawTilemap2x4(MAP_W, MAP_H, cpctm_screenPtr(CPCT_VMEM_START, 0, ORIG_MAP_Y), UNPACKED_MAP_INI);
   0393 21 31 10      [10]  857 	ld	hl, #0x1031
   0396 E5            [11]  858 	push	hl
   0397 21 00 C0      [10]  859 	ld	hl, #0xc000
   039A E5            [11]  860 	push	hl
   039B 21 26 28      [10]  861 	ld	hl, #0x2826
   039E E5            [11]  862 	push	hl
   039F 2E 00         [ 7]  863 	ld	l, #0x00
   03A1 E5            [11]  864 	push	hl
   03A2 AF            [ 4]  865 	xor	a, a
   03A3 F5            [11]  866 	push	af
   03A4 33            [ 6]  867 	inc	sp
   03A5 CDr00r00      [17]  868 	call	_cpct_etm_drawTileBox2x4
                            869 ;src/main.c:445: PrintText(mapTitle[mapNumber], 0, 192);
   03A8 01r0Dr00      [10]  870 	ld	bc, #_mapTitle+0
   03AB FD 21r00r00   [14]  871 	ld	iy, #_mapNumber
   03AF FD 6E 00      [19]  872 	ld	l, 0 (iy)
   03B2 26 00         [ 7]  873 	ld	h, #0x00
   03B4 29            [11]  874 	add	hl, hl
   03B5 09            [11]  875 	add	hl, bc
   03B6 4E            [ 7]  876 	ld	c, (hl)
   03B7 23            [ 6]  877 	inc	hl
   03B8 46            [ 7]  878 	ld	b, (hl)
   03B9 21 00 C0      [10]  879 	ld	hl, #0xc000
   03BC E5            [11]  880 	push	hl
   03BD C5            [11]  881 	push	bc
   03BE CDrA8r02      [17]  882 	call	_PrintText
   03C1 F1            [10]  883 	pop	af
   03C2 F1            [10]  884 	pop	af
   03C3 C9            [10]  885 	ret
                            886 ;src/main.c:450: void InitMap() {
                            887 ;	---------------------------------
                            888 ; Function InitMap
                            889 ; ---------------------------------
   03C4                     890 _InitMap::
                            891 ;src/main.c:451: shot.active = FALSE; 
   03C4 21r69r00      [10]  892 	ld	hl, #(_shot + 0x0005)
   03C7 36 00         [10]  893 	ld	(hl), #0x00
                            894 ;src/main.c:452: shotLC.active = FALSE; 
   03C9 21r6Fr00      [10]  895 	ld	hl, #(_shotLC + 0x0005)
   03CC 36 00         [10]  896 	ld	(hl), #0x00
                            897 ;src/main.c:453: SetEnemies();
   03CE CDr1Fr15      [17]  898 	call	_SetEnemies
                            899 ;src/main.c:454: GetLC();
   03D1 CDrADr18      [17]  900 	call	_GetLC
                            901 ;src/main.c:455: PrintMap();
   03D4 C3r93r03      [10]  902 	jp  _PrintMap
                            903 ;src/main.c:460: void MoveRightMap() {
                            904 ;	---------------------------------
                            905 ; Function MoveRightMap
                            906 ; ---------------------------------
   03D7                     907 _MoveRightMap::
                            908 ;src/main.c:461: if (mapNumber < TOTAL_MAPS-1) {
   03D7 FD 21r00r00   [14]  909 	ld	iy, #_mapNumber
   03DB FD 7E 00      [19]  910 	ld	a, 0 (iy)
   03DE D6 02         [ 7]  911 	sub	a, #0x02
   03E0 D0            [11]  912 	ret	NC
                            913 ;src/main.c:462: mapNumber++;
   03E1 FD 34 00      [23]  914 	inc	0 (iy)
                            915 ;src/main.c:463: spr[0].x = spr[0].px = 0;
   03E4 21r1Ar00      [10]  916 	ld	hl, #(_spr + 0x0002)
   03E7 36 00         [10]  917 	ld	(hl), #0x00
   03E9 21r18r00      [10]  918 	ld	hl, #_spr
   03EC 36 00         [10]  919 	ld	(hl), #0x00
                            920 ;src/main.c:464: InitMap();
   03EE C3rC4r03      [10]  921 	jp  _InitMap
                            922 ;src/main.c:470: void MoveLeftMap() {
                            923 ;	---------------------------------
                            924 ; Function MoveLeftMap
                            925 ; ---------------------------------
   03F1                     926 _MoveLeftMap::
                            927 ;src/main.c:471: if (mapNumber > 0) {
   03F1 FD 21r00r00   [14]  928 	ld	iy, #_mapNumber
   03F5 FD 7E 00      [19]  929 	ld	a, 0 (iy)
   03F8 B7            [ 4]  930 	or	a, a
   03F9 C8            [11]  931 	ret	Z
                            932 ;src/main.c:472: mapNumber--;
   03FA FD 35 00      [23]  933 	dec	0 (iy)
                            934 ;src/main.c:473: spr[0].x = spr[0].px = GLOBAL_MAX_X - SPR_W;
   03FD 21r1Ar00      [10]  935 	ld	hl, #(_spr + 0x0002)
   0400 36 48         [10]  936 	ld	(hl), #0x48
   0402 21r18r00      [10]  937 	ld	hl, #_spr
   0405 36 48         [10]  938 	ld	(hl), #0x48
                            939 ;src/main.c:474: InitMap();
   0407 C3rC4r03      [10]  940 	jp  _InitMap
                            941 ;src/main.c:480: u8* GetTilePtr(u8 x, u8 y) {
                            942 ;	---------------------------------
                            943 ; Function GetTilePtr
                            944 ; ---------------------------------
   040A                     945 _GetTilePtr::
                            946 ;src/main.c:481: return UNPACKED_MAP_INI + (y - ORIG_MAP_Y) / 4 * MAP_W + x / 2;	
   040A FD 21 03 00   [14]  947 	ld	iy, #3
   040E FD 39         [15]  948 	add	iy, sp
   0410 FD 6E 00      [19]  949 	ld	l, 0 (iy)
   0413 26 00         [ 7]  950 	ld	h, #0x00
   0415 4D            [ 4]  951 	ld	c, l
   0416 5C            [ 4]  952 	ld	e, h
   0417 CB 7C         [ 8]  953 	bit	7, h
   0419 28 05         [12]  954 	jr	Z,00103$
   041B 23            [ 6]  955 	inc	hl
   041C 23            [ 6]  956 	inc	hl
   041D 23            [ 6]  957 	inc	hl
   041E 4D            [ 4]  958 	ld	c, l
   041F 5C            [ 4]  959 	ld	e, h
   0420                     960 00103$:
   0420 43            [ 4]  961 	ld	b, e
   0421 CB 28         [ 8]  962 	sra	b
   0423 CB 19         [ 8]  963 	rr	c
   0425 CB 28         [ 8]  964 	sra	b
   0427 CB 19         [ 8]  965 	rr	c
   0429 69            [ 4]  966 	ld	l, c
   042A 60            [ 4]  967 	ld	h, b
   042B 29            [11]  968 	add	hl, hl
   042C 29            [11]  969 	add	hl, hl
   042D 09            [11]  970 	add	hl, bc
   042E 29            [11]  971 	add	hl, hl
   042F 29            [11]  972 	add	hl, hl
   0430 29            [11]  973 	add	hl, hl
   0431 01 31 10      [10]  974 	ld	bc, #0x1031
   0434 09            [11]  975 	add	hl, bc
   0435 FD 21 02 00   [14]  976 	ld	iy, #2
   0439 FD 39         [15]  977 	add	iy, sp
   043B FD 4E 00      [19]  978 	ld	c, 0 (iy)
   043E CB 39         [ 8]  979 	srl	c
   0440 59            [ 4]  980 	ld	e,c
   0441 16 00         [ 7]  981 	ld	d,#0x00
   0443 19            [11]  982 	add	hl, de
   0444 C9            [10]  983 	ret
                            984 ;src/main.c:486: u8 OnPlatform(TSpr *pSpr) __z88dk_fastcall {
                            985 ;	---------------------------------
                            986 ; Function OnPlatform
                            987 ; ---------------------------------
   0445                     988 _OnPlatform::
                            989 ;src/main.c:487: u8* tile = GetTilePtr(pSpr->x + 4, pSpr->y + SPR_H + 1);
   0445 4D            [ 4]  990 	ld	c,l
   0446 44            [ 4]  991 	ld	b,h
   0447 23            [ 6]  992 	inc	hl
   0448 7E            [ 7]  993 	ld	a, (hl)
   0449 C6 11         [ 7]  994 	add	a, #0x11
   044B 57            [ 4]  995 	ld	d, a
   044C 0A            [ 7]  996 	ld	a, (bc)
   044D C6 04         [ 7]  997 	add	a, #0x04
   044F 5F            [ 4]  998 	ld	e, a
   0450 D5            [11]  999 	push	de
   0451 CDr0Ar04      [17] 1000 	call	_GetTilePtr
   0454 F1            [10] 1001 	pop	af
                           1002 ;src/main.c:488: if (*tile == 0)
   0455 7E            [ 7] 1003 	ld	a, (hl)
   0456 B7            [ 4] 1004 	or	a, a
   0457 20 03         [12] 1005 	jr	NZ,00102$
                           1006 ;src/main.c:489: return TRUE;	
   0459 2E 01         [ 7] 1007 	ld	l, #0x01
   045B C9            [10] 1008 	ret
   045C                    1009 00102$:
                           1010 ;src/main.c:490: return FALSE;
   045C 2E 00         [ 7] 1011 	ld	l, #0x00
   045E C9            [10] 1012 	ret
                           1013 ;src/main.c:495: u8 OnStairs() {
                           1014 ;	---------------------------------
                           1015 ; Function OnStairs
                           1016 ; ---------------------------------
   045F                    1017 _OnStairs::
                           1018 ;src/main.c:496: u8* tile = GetTilePtr(spr[0].x + 4, spr[0].y + SPR_H + 1);
   045F 3Ar19r00      [13] 1019 	ld	a, (#_spr + 1)
   0462 C6 11         [ 7] 1020 	add	a, #0x11
   0464 47            [ 4] 1021 	ld	b, a
   0465 3Ar18r00      [13] 1022 	ld	a, (#_spr + 0)
   0468 C6 04         [ 7] 1023 	add	a, #0x04
   046A C5            [11] 1024 	push	bc
   046B 33            [ 6] 1025 	inc	sp
   046C F5            [11] 1026 	push	af
   046D 33            [ 6] 1027 	inc	sp
   046E CDr0Ar04      [17] 1028 	call	_GetTilePtr
   0471 F1            [10] 1029 	pop	af
                           1030 ;src/main.c:497: if (*tile >  47 && *tile <  56)
   0472 4E            [ 7] 1031 	ld	c, (hl)
   0473 3E 2F         [ 7] 1032 	ld	a, #0x2f
   0475 91            [ 4] 1033 	sub	a, c
   0476 30 08         [12] 1034 	jr	NC,00102$
   0478 79            [ 4] 1035 	ld	a, c
   0479 D6 38         [ 7] 1036 	sub	a, #0x38
   047B 30 03         [12] 1037 	jr	NC,00102$
                           1038 ;src/main.c:498: return TRUE;
   047D 2E 01         [ 7] 1039 	ld	l, #0x01
   047F C9            [10] 1040 	ret
   0480                    1041 00102$:
                           1042 ;src/main.c:499: return FALSE;
   0480 2E 00         [ 7] 1043 	ld	l, #0x00
   0482 C9            [10] 1044 	ret
                           1045 ;src/main.c:504: u8 OverMines() {
                           1046 ;	---------------------------------
                           1047 ; Function OverMines
                           1048 ; ---------------------------------
   0483                    1049 _OverMines::
                           1050 ;src/main.c:505: u8* tile = GetTilePtr(spr[0].x + 4, spr[0].y + SPR_H);
   0483 3Ar19r00      [13] 1051 	ld	a, (#_spr + 1)
   0486 C6 10         [ 7] 1052 	add	a, #0x10
   0488 47            [ 4] 1053 	ld	b, a
   0489 3Ar18r00      [13] 1054 	ld	a, (#_spr + 0)
   048C C6 04         [ 7] 1055 	add	a, #0x04
   048E C5            [11] 1056 	push	bc
   048F 33            [ 6] 1057 	inc	sp
   0490 F5            [11] 1058 	push	af
   0491 33            [ 6] 1059 	inc	sp
   0492 CDr0Ar04      [17] 1060 	call	_GetTilePtr
   0495 F1            [10] 1061 	pop	af
                           1062 ;src/main.c:506: if (*tile > 55 && *tile < 58) 
   0496 4E            [ 7] 1063 	ld	c, (hl)
   0497 3E 37         [ 7] 1064 	ld	a, #0x37
   0499 91            [ 4] 1065 	sub	a, c
   049A 30 08         [12] 1066 	jr	NC,00102$
   049C 79            [ 4] 1067 	ld	a, c
   049D D6 3A         [ 7] 1068 	sub	a, #0x3a
   049F 30 03         [12] 1069 	jr	NC,00102$
                           1070 ;src/main.c:507: return TRUE;	
   04A1 2E 01         [ 7] 1071 	ld	l, #0x01
   04A3 C9            [10] 1072 	ret
   04A4                    1073 00102$:
                           1074 ;src/main.c:508: return FALSE;
   04A4 2E 00         [ 7] 1075 	ld	l, #0x00
   04A6 C9            [10] 1076 	ret
                           1077 ;src/main.c:513: u8 FacingWall(u8 dir) __z88dk_fastcall {
                           1078 ;	---------------------------------
                           1079 ; Function FacingWall
                           1080 ; ---------------------------------
   04A7                    1081 _FacingWall::
   04A7 4D            [ 4] 1082 	ld	c, l
                           1083 ;src/main.c:515: if (dir == D_right)	{
   04A8 79            [ 4] 1084 	ld	a, c
   04A9 D6 03         [ 7] 1085 	sub	a, #0x03
   04AB 20 19         [12] 1086 	jr	NZ,00108$
                           1087 ;src/main.c:516: tile = GetTilePtr(spr[0].x + 7, spr[0].y + SPR_H);
   04AD 3Ar19r00      [13] 1088 	ld	a, (#_spr + 1)
   04B0 C6 10         [ 7] 1089 	add	a, #0x10
   04B2 57            [ 4] 1090 	ld	d, a
   04B3 3Ar18r00      [13] 1091 	ld	a, (#_spr + 0)
   04B6 C6 07         [ 7] 1092 	add	a, #0x07
   04B8 5F            [ 4] 1093 	ld	e,a
   04B9 D5            [11] 1094 	push	de
   04BA CDr0Ar04      [17] 1095 	call	_GetTilePtr
   04BD F1            [10] 1096 	pop	af
                           1097 ;src/main.c:517: if (*tile == 58) return TRUE;
   04BE 7E            [ 7] 1098 	ld	a, (hl)
   04BF D6 3A         [ 7] 1099 	sub	a, #0x3a
   04C1 20 1F         [12] 1100 	jr	NZ,00109$
   04C3 2E 01         [ 7] 1101 	ld	l, #0x01
   04C5 C9            [10] 1102 	ret
   04C6                    1103 00108$:
                           1104 ;src/main.c:519: else if (dir == D_left)	{
   04C6 79            [ 4] 1105 	ld	a, c
   04C7 D6 02         [ 7] 1106 	sub	a, #0x02
   04C9 20 17         [12] 1107 	jr	NZ,00109$
                           1108 ;src/main.c:520: tile = GetTilePtr(spr[0].x, spr[0].y + SPR_H);
   04CB 3Ar19r00      [13] 1109 	ld	a, (#_spr + 1)
   04CE C6 10         [ 7] 1110 	add	a, #0x10
   04D0 57            [ 4] 1111 	ld	d, a
   04D1 21r18r00      [10] 1112 	ld	hl, #_spr + 0
   04D4 5E            [ 7] 1113 	ld	e, (hl)
   04D5 D5            [11] 1114 	push	de
   04D6 CDr0Ar04      [17] 1115 	call	_GetTilePtr
   04D9 F1            [10] 1116 	pop	af
                           1117 ;src/main.c:521: if (*tile == 59) return TRUE;
   04DA 7E            [ 7] 1118 	ld	a, (hl)
   04DB D6 3B         [ 7] 1119 	sub	a, #0x3b
   04DD 20 03         [12] 1120 	jr	NZ,00109$
   04DF 2E 01         [ 7] 1121 	ld	l, #0x01
   04E1 C9            [10] 1122 	ret
   04E2                    1123 00109$:
                           1124 ;src/main.c:523: return FALSE;
   04E2 2E 00         [ 7] 1125 	ld	l, #0x00
   04E4 C9            [10] 1126 	ret
                           1127 ;src/main.c:540: cpct_keyID ReturnKeyPressed() {
                           1128 ;	---------------------------------
                           1129 ; Function ReturnKeyPressed
                           1130 ; ---------------------------------
   04E5                    1131 _ReturnKeyPressed::
   04E5 DD E5         [15] 1132 	push	ix
   04E7 DD 21 00 00   [14] 1133 	ld	ix,#0
   04EB DD 39         [15] 1134 	add	ix,sp
   04ED F5            [11] 1135 	push	af
   04EE 3B            [ 6] 1136 	dec	sp
                           1137 ;src/main.c:541: u8 i = 10, *keys = cpct_keyboardStatusBuffer + 9;
   04EF 0E 0A         [ 7] 1138 	ld	c, #0x0a
                           1139 ;src/main.c:544: do { cpct_scanKeyboard(); } while ( ! cpct_isAnyKeyPressed() );
   04F1                    1140 00101$:
   04F1 C5            [11] 1141 	push	bc
   04F2 CDr00r00      [17] 1142 	call	_cpct_scanKeyboard
   04F5 CDr00r00      [17] 1143 	call	_cpct_isAnyKeyPressed
   04F8 C1            [10] 1144 	pop	bc
   04F9 7D            [ 4] 1145 	ld	a, l
   04FA B7            [ 4] 1146 	or	a, a
   04FB 28 F4         [12] 1147 	jr	Z,00101$
                           1148 ;src/main.c:546: do {
   04FD DD 36 FEr09   [19] 1149 	ld	-2 (ix), #<((_cpct_keyboardStatusBuffer + 0x0009))
   0501 DD 36 FFs00   [19] 1150 	ld	-1 (ix), #>((_cpct_keyboardStatusBuffer + 0x0009))
   0505 DD 36 FD 0A   [19] 1151 	ld	-3 (ix), #0x0a
   0509                    1152 00106$:
                           1153 ;src/main.c:547: keypressed = *keys ^ 0xFF;
   0509 DD 6E FE      [19] 1154 	ld	l,-2 (ix)
   050C DD 66 FF      [19] 1155 	ld	h,-1 (ix)
   050F 7E            [ 7] 1156 	ld	a, (hl)
   0510 EE FF         [ 7] 1157 	xor	a, #0xff
   0512 6F            [ 4] 1158 	ld	l, a
   0513 26 00         [ 7] 1159 	ld	h, #0x00
                           1160 ;src/main.c:548: if (keypressed)
   0515 7C            [ 4] 1161 	ld	a, h
   0516 B5            [ 4] 1162 	or	a,l
   0517 28 09         [12] 1163 	jr	Z,00105$
                           1164 ;src/main.c:549: return (keypressed << 8) + (i - 1); 
   0519 65            [ 4] 1165 	ld	h, l
   051A 2E 00         [ 7] 1166 	ld	l, #0x00
   051C 06 00         [ 7] 1167 	ld	b, #0x00
   051E 0B            [ 6] 1168 	dec	bc
   051F 09            [11] 1169 	add	hl, bc
   0520 18 1C         [12] 1170 	jr	00109$
   0522                    1171 00105$:
                           1172 ;src/main.c:550: keys--;
   0522 DD 7E FE      [19] 1173 	ld	a, -2 (ix)
   0525 C6 FF         [ 7] 1174 	add	a, #0xff
   0527 DD 77 FE      [19] 1175 	ld	-2 (ix), a
   052A DD 7E FF      [19] 1176 	ld	a, -1 (ix)
   052D CE FF         [ 7] 1177 	adc	a, #0xff
   052F DD 77 FF      [19] 1178 	ld	-1 (ix), a
                           1179 ;src/main.c:551: } while(--i);
   0532 DD 35 FD      [23] 1180 	dec	-3 (ix)
   0535 DD 4E FD      [19] 1181 	ld	c, -3 (ix)
   0538 DD 7E FD      [19] 1182 	ld	a, -3 (ix)
   053B B7            [ 4] 1183 	or	a, a
   053C 20 CB         [12] 1184 	jr	NZ,00106$
                           1185 ;src/main.c:552: return keypressed;    
   053E                    1186 00109$:
   053E DD F9         [10] 1187 	ld	sp, ix
   0540 DD E1         [14] 1188 	pop	ix
   0542 C9            [10] 1189 	ret
                           1190 ;src/main.c:558: void Wait4Key(cpct_keyID key) __z88dk_fastcall {
                           1191 ;	---------------------------------
                           1192 ; Function Wait4Key
                           1193 ; ---------------------------------
   0543                    1194 _Wait4Key::
                           1195 ;src/main.c:559: do cpct_scanKeyboard_f();
   0543                    1196 00101$:
   0543 E5            [11] 1197 	push	hl
   0544 CDr00r00      [17] 1198 	call	_cpct_scanKeyboard_f
   0547 E1            [10] 1199 	pop	hl
                           1200 ;src/main.c:560: while(!cpct_isKeyPressed(key));
   0548 E5            [11] 1201 	push	hl
   0549 CDr00r00      [17] 1202 	call	_cpct_isKeyPressed
   054C 7D            [ 4] 1203 	ld	a, l
   054D E1            [10] 1204 	pop	hl
   054E B7            [ 4] 1205 	or	a, a
   054F 28 F2         [12] 1206 	jr	Z,00101$
                           1207 ;src/main.c:561: do cpct_scanKeyboard_f();
   0551                    1208 00104$:
   0551 E5            [11] 1209 	push	hl
   0552 CDr00r00      [17] 1210 	call	_cpct_scanKeyboard_f
   0555 E1            [10] 1211 	pop	hl
                           1212 ;src/main.c:562: while(cpct_isKeyPressed(key));
   0556 E5            [11] 1213 	push	hl
   0557 CDr00r00      [17] 1214 	call	_cpct_isKeyPressed
   055A 7D            [ 4] 1215 	ld	a, l
   055B E1            [10] 1216 	pop	hl
   055C B7            [ 4] 1217 	or	a, a
   055D 20 F2         [12] 1218 	jr	NZ,00104$
   055F C9            [10] 1219 	ret
                           1220 ;src/main.c:567: cpct_keyID RedefineKey(u8 *info) __z88dk_fastcall {
                           1221 ;	---------------------------------
                           1222 ; Function RedefineKey
                           1223 ; ---------------------------------
   0560                    1224 _RedefineKey::
                           1225 ;src/main.c:569: PrintText(info, 29, 100);  
   0560 01 1D 64      [10] 1226 	ld	bc, #0x641d
   0563 C5            [11] 1227 	push	bc
   0564 E5            [11] 1228 	push	hl
   0565 CDrA8r02      [17] 1229 	call	_PrintText
   0568 F1            [10] 1230 	pop	af
   0569 F1            [10] 1231 	pop	af
                           1232 ;src/main.c:570: key = ReturnKeyPressed();
   056A CDrE5r04      [17] 1233 	call	_ReturnKeyPressed
                           1234 ;src/main.c:571: Wait4Key(key);
   056D E5            [11] 1235 	push	hl
   056E CDr43r05      [17] 1236 	call	_Wait4Key
   0571 3E 02         [ 7] 1237 	ld	a, #0x02
   0573 F5            [11] 1238 	push	af
   0574 33            [ 6] 1239 	inc	sp
   0575 01 00 00      [10] 1240 	ld	bc, #0x0000
   0578 C5            [11] 1241 	push	bc
   0579 01 29 00      [10] 1242 	ld	bc, #0x0029
   057C C5            [11] 1243 	push	bc
   057D 01 02 0F      [10] 1244 	ld	bc, #0x0f02
   0580 C5            [11] 1245 	push	bc
   0581 CDr00r00      [17] 1246 	call	_cpct_akp_SFXPlay
   0584 21 07 00      [10] 1247 	ld	hl, #7
   0587 39            [11] 1248 	add	hl, sp
   0588 F9            [ 6] 1249 	ld	sp, hl
   0589 E1            [10] 1250 	pop	hl
                           1251 ;src/main.c:573: return key;    
   058A C9            [10] 1252 	ret
                           1253 ;src/main.c:590: void PrintObject(u8 ident, u8 x, u8 y) {
                           1254 ;	---------------------------------
                           1255 ; Function PrintObject
                           1256 ; ---------------------------------
   058B                    1257 _PrintObject::
   058B DD E5         [15] 1258 	push	ix
   058D DD 21 00 00   [14] 1259 	ld	ix,#0
   0591 DD 39         [15] 1260 	add	ix,sp
                           1261 ;src/main.c:592: OBJ_W, OBJ_H, g_maskTable);
                           1262 ;src/main.c:591: cpct_drawSpriteMaskedAlignedTable(g_objects[ident], cpct_getScreenPtr(CPCT_VMEM_START, x, y),
   0593 DD 66 06      [19] 1263 	ld	h, 6 (ix)
   0596 DD 6E 05      [19] 1264 	ld	l, 5 (ix)
   0599 E5            [11] 1265 	push	hl
   059A 21 00 C0      [10] 1266 	ld	hl, #0xc000
   059D E5            [11] 1267 	push	hl
   059E CDr00r00      [17] 1268 	call	_cpct_getScreenPtr
   05A1 4D            [ 4] 1269 	ld	c, l
   05A2 44            [ 4] 1270 	ld	b, h
   05A3 DD 5E 04      [19] 1271 	ld	e,4 (ix)
   05A6 16 00         [ 7] 1272 	ld	d,#0x00
   05A8 6B            [ 4] 1273 	ld	l, e
   05A9 62            [ 4] 1274 	ld	h, d
   05AA 29            [11] 1275 	add	hl, hl
   05AB 19            [11] 1276 	add	hl, de
   05AC 29            [11] 1277 	add	hl, hl
   05AD 29            [11] 1278 	add	hl, hl
   05AE 29            [11] 1279 	add	hl, hl
   05AF 29            [11] 1280 	add	hl, hl
   05B0 29            [11] 1281 	add	hl, hl
   05B1 11r00r00      [10] 1282 	ld	de, #_g_objects
   05B4 19            [11] 1283 	add	hl, de
   05B5 11r00r01      [10] 1284 	ld	de, #_g_maskTable
   05B8 D5            [11] 1285 	push	de
   05B9 11 06 10      [10] 1286 	ld	de, #0x1006
   05BC D5            [11] 1287 	push	de
   05BD C5            [11] 1288 	push	bc
   05BE E5            [11] 1289 	push	hl
   05BF CDr00r00      [17] 1290 	call	_cpct_drawSpriteMaskedAlignedTable
   05C2 DD E1         [14] 1291 	pop	ix
   05C4 C9            [10] 1292 	ret
                           1293 ;src/main.c:597: void DeleteObject(TObj *pObj) __z88dk_fastcall {
                           1294 ;	---------------------------------
                           1295 ; Function DeleteObject
                           1296 ; ---------------------------------
   05C5                    1297 _DeleteObject::
   05C5 DD E5         [15] 1298 	push	ix
   05C7 DD 21 00 00   [14] 1299 	ld	ix,#0
   05CB DD 39         [15] 1300 	add	ix,sp
   05CD 3B            [ 6] 1301 	dec	sp
                           1302 ;src/main.c:599: 4 + (pObj->x & 1),	4 + (pObj->y & 3 ? 1 : 0),	
   05CE 4D            [ 4] 1303 	ld	c,l
   05CF 44            [ 4] 1304 	ld	b,h
   05D0 23            [ 6] 1305 	inc	hl
   05D1 5E            [ 7] 1306 	ld	e, (hl)
   05D2 7B            [ 4] 1307 	ld	a, e
   05D3 E6 03         [ 7] 1308 	and	a, #0x03
   05D5 28 04         [12] 1309 	jr	Z,00103$
   05D7 16 01         [ 7] 1310 	ld	d, #0x01
   05D9 18 02         [12] 1311 	jr	00104$
   05DB                    1312 00103$:
   05DB 16 00         [ 7] 1313 	ld	d, #0x00
   05DD                    1314 00104$:
   05DD 14            [ 4] 1315 	inc	d
   05DE 14            [ 4] 1316 	inc	d
   05DF 14            [ 4] 1317 	inc	d
   05E0 14            [ 4] 1318 	inc	d
   05E1 0A            [ 7] 1319 	ld	a, (bc)
   05E2 4F            [ 4] 1320 	ld	c,a
   05E3 E6 01         [ 7] 1321 	and	a, #0x01
   05E5 C6 04         [ 7] 1322 	add	a, #0x04
   05E7 DD 77 FF      [19] 1323 	ld	-1 (ix), a
                           1324 ;src/main.c:598: cpct_etm_drawTileBox2x4(pObj->x / 2, (pObj->y - ORIG_MAP_Y) / 4, 
   05EA 06 00         [ 7] 1325 	ld	b, #0x00
   05EC 6B            [ 4] 1326 	ld	l, e
   05ED 60            [ 4] 1327 	ld	h, b
   05EE CB 78         [ 8] 1328 	bit	7, b
   05F0 28 05         [12] 1329 	jr	Z,00105$
   05F2 6B            [ 4] 1330 	ld	l, e
   05F3 60            [ 4] 1331 	ld	h, b
   05F4 23            [ 6] 1332 	inc	hl
   05F5 23            [ 6] 1333 	inc	hl
   05F6 23            [ 6] 1334 	inc	hl
   05F7                    1335 00105$:
   05F7 CB 2C         [ 8] 1336 	sra	h
   05F9 CB 1D         [ 8] 1337 	rr	l
   05FB CB 2C         [ 8] 1338 	sra	h
   05FD CB 1D         [ 8] 1339 	rr	l
   05FF 5D            [ 4] 1340 	ld	e, l
   0600 CB 39         [ 8] 1341 	srl	c
   0602 21 31 10      [10] 1342 	ld	hl, #0x1031
   0605 E5            [11] 1343 	push	hl
   0606 21 00 C0      [10] 1344 	ld	hl, #0xc000
   0609 E5            [11] 1345 	push	hl
   060A 3E 28         [ 7] 1346 	ld	a, #0x28
   060C F5            [11] 1347 	push	af
   060D 33            [ 6] 1348 	inc	sp
   060E D5            [11] 1349 	push	de
   060F 33            [ 6] 1350 	inc	sp
   0610 DD 56 FF      [19] 1351 	ld	d, -1 (ix)
   0613 D5            [11] 1352 	push	de
   0614 79            [ 4] 1353 	ld	a, c
   0615 F5            [11] 1354 	push	af
   0616 33            [ 6] 1355 	inc	sp
   0617 CDr00r00      [17] 1356 	call	_cpct_etm_drawTileBox2x4
   061A 33            [ 6] 1357 	inc	sp
   061B DD E1         [14] 1358 	pop	ix
   061D C9            [10] 1359 	ret
                           1360 ;src/main.c:605: void DeleteObjectScoreboard() {
                           1361 ;	---------------------------------
                           1362 ; Function DeleteObjectScoreboard
                           1363 ; ---------------------------------
   061E                    1364 _DeleteObjectScoreboard::
                           1365 ;src/main.c:606: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 68, 12), cpct_px2byteM0(1,1), 6, 16);
   061E 21 01 01      [10] 1366 	ld	hl, #0x0101
   0621 E5            [11] 1367 	push	hl
   0622 CDr00r00      [17] 1368 	call	_cpct_px2byteM0
   0625 26 00         [ 7] 1369 	ld	h, #0x00
   0627 01 06 10      [10] 1370 	ld	bc, #0x1006
   062A C5            [11] 1371 	push	bc
   062B E5            [11] 1372 	push	hl
   062C 21 94 E0      [10] 1373 	ld	hl, #0xe094
   062F E5            [11] 1374 	push	hl
   0630 CDr00r00      [17] 1375 	call	_cpct_drawSolidBox
   0633 C9            [10] 1376 	ret
                           1377 ;src/main.c:611: void ReprintObjects() {
                           1378 ;	---------------------------------
                           1379 ; Function ReprintObjects
                           1380 ; ---------------------------------
   0634                    1381 _ReprintObjects::
                           1382 ;src/main.c:612: ct = 0;
   0634 21r07r00      [10] 1383 	ld	hl,#_ct + 0
   0637 36 00         [10] 1384 	ld	(hl), #0x00
                           1385 ;src/main.c:613: while (ct < N_MAX_OBJ) {
   0639                    1386 00104$:
   0639 3Ar07r00      [13] 1387 	ld	a,(#_ct + 0)
   063C D6 08         [ 7] 1388 	sub	a, #0x08
   063E D0            [11] 1389 	ret	NC
                           1390 ;src/main.c:614: if (obj[ct].mapNumber == mapNumber && obj[ct].taken == FALSE)
   063F ED 4Br07r00   [20] 1391 	ld	bc, (_ct)
   0643 06 00         [ 7] 1392 	ld	b, #0x00
   0645 69            [ 4] 1393 	ld	l, c
   0646 60            [ 4] 1394 	ld	h, b
   0647 29            [11] 1395 	add	hl, hl
   0648 29            [11] 1396 	add	hl, hl
   0649 09            [11] 1397 	add	hl, bc
   064A 01r80r00      [10] 1398 	ld	bc,#_obj
   064D 09            [11] 1399 	add	hl,bc
   064E 4D            [ 4] 1400 	ld	c,l
   064F 44            [ 4] 1401 	ld	b,h
   0650 23            [ 6] 1402 	inc	hl
   0651 23            [ 6] 1403 	inc	hl
   0652 5E            [ 7] 1404 	ld	e, (hl)
   0653 3Ar00r00      [13] 1405 	ld	a,(#_mapNumber + 0)
   0656 93            [ 4] 1406 	sub	a, e
   0657 20 1A         [12] 1407 	jr	NZ,00102$
   0659 69            [ 4] 1408 	ld	l, c
   065A 60            [ 4] 1409 	ld	h, b
   065B 23            [ 6] 1410 	inc	hl
   065C 23            [ 6] 1411 	inc	hl
   065D 23            [ 6] 1412 	inc	hl
   065E 7E            [ 7] 1413 	ld	a, (hl)
   065F B7            [ 4] 1414 	or	a, a
   0660 20 11         [12] 1415 	jr	NZ,00102$
                           1416 ;src/main.c:615: PrintObject(ct, obj[ct].x, obj[ct].y);
   0662 69            [ 4] 1417 	ld	l, c
   0663 60            [ 4] 1418 	ld	h, b
   0664 23            [ 6] 1419 	inc	hl
   0665 56            [ 7] 1420 	ld	d, (hl)
   0666 0A            [ 7] 1421 	ld	a, (bc)
   0667 5F            [ 4] 1422 	ld	e,a
   0668 D5            [11] 1423 	push	de
   0669 3Ar07r00      [13] 1424 	ld	a, (_ct)
   066C F5            [11] 1425 	push	af
   066D 33            [ 6] 1426 	inc	sp
   066E CDr8Br05      [17] 1427 	call	_PrintObject
   0671 F1            [10] 1428 	pop	af
   0672 33            [ 6] 1429 	inc	sp
   0673                    1430 00102$:
                           1431 ;src/main.c:616: ct++;
   0673 21r07r00      [10] 1432 	ld	hl, #_ct+0
   0676 34            [11] 1433 	inc	(hl)
   0677 18 C0         [12] 1434 	jr	00104$
                           1435 ;src/main.c:622: void CheckObjects() {
                           1436 ;	---------------------------------
                           1437 ; Function CheckObjects
                           1438 ; ---------------------------------
   0679                    1439 _CheckObjects::
   0679 DD E5         [15] 1440 	push	ix
   067B DD 21 00 00   [14] 1441 	ld	ix,#0
   067F DD 39         [15] 1442 	add	ix,sp
   0681 F5            [11] 1443 	push	af
                           1444 ;src/main.c:623: ct = 0;
   0682 21r07r00      [10] 1445 	ld	hl,#_ct + 0
   0685 36 00         [10] 1446 	ld	(hl), #0x00
                           1447 ;src/main.c:624: Wait4Key(ctlDown);
   0687 2Ar0Ar00      [16] 1448 	ld	hl, (_ctlDown)
   068A CDr43r05      [17] 1449 	call	_Wait4Key
                           1450 ;src/main.c:625: while (ct < N_MAX_OBJ) {
   068D                    1451 00122$:
   068D 3Ar07r00      [13] 1452 	ld	a,(#_ct + 0)
   0690 D6 08         [ 7] 1453 	sub	a, #0x08
   0692 D2r41r08      [10] 1454 	jp	NC, 00125$
                           1455 ;src/main.c:626: if (obj[ct].mapNumber == mapNumber) { // if the object is on the screen ...
   0695 ED 4Br07r00   [20] 1456 	ld	bc, (_ct)
   0699 06 00         [ 7] 1457 	ld	b, #0x00
   069B 69            [ 4] 1458 	ld	l, c
   069C 60            [ 4] 1459 	ld	h, b
   069D 29            [11] 1460 	add	hl, hl
   069E 29            [11] 1461 	add	hl, hl
   069F 09            [11] 1462 	add	hl, bc
   06A0 01r80r00      [10] 1463 	ld	bc,#_obj
   06A3 09            [11] 1464 	add	hl,bc
   06A4 E3            [19] 1465 	ex	(sp), hl
   06A5 E1            [10] 1466 	pop	hl
   06A6 E5            [11] 1467 	push	hl
   06A7 23            [ 6] 1468 	inc	hl
   06A8 23            [ 6] 1469 	inc	hl
   06A9 4E            [ 7] 1470 	ld	c, (hl)
   06AA 3Ar00r00      [13] 1471 	ld	a,(#_mapNumber + 0)
   06AD 91            [ 4] 1472 	sub	a, c
   06AE C2r3Ar08      [10] 1473 	jp	NZ,00121$
                           1474 ;src/main.c:628: if (spr[0].x >= obj[ct].x - 3 && spr[0].x <= obj[ct].x + 3 &&	
   06B1 21r18r00      [10] 1475 	ld	hl, #_spr + 0
   06B4 4E            [ 7] 1476 	ld	c, (hl)
   06B5 E1            [10] 1477 	pop	hl
   06B6 E5            [11] 1478 	push	hl
   06B7 5E            [ 7] 1479 	ld	e, (hl)
   06B8 16 00         [ 7] 1480 	ld	d, #0x00
   06BA 7B            [ 4] 1481 	ld	a, e
   06BB C6 FD         [ 7] 1482 	add	a, #0xfd
   06BD 6F            [ 4] 1483 	ld	l, a
   06BE 7A            [ 4] 1484 	ld	a, d
   06BF CE FF         [ 7] 1485 	adc	a, #0xff
   06C1 67            [ 4] 1486 	ld	h, a
   06C2 06 00         [ 7] 1487 	ld	b, #0x00
   06C4 79            [ 4] 1488 	ld	a, c
   06C5 95            [ 4] 1489 	sub	a, l
   06C6 78            [ 4] 1490 	ld	a, b
   06C7 9C            [ 4] 1491 	sbc	a, h
   06C8 E2rCDr06      [10] 1492 	jp	PO, 00181$
   06CB EE 80         [ 7] 1493 	xor	a, #0x80
   06CD                    1494 00181$:
   06CD FAr3Ar08      [10] 1495 	jp	M, 00121$
   06D0 13            [ 6] 1496 	inc	de
   06D1 13            [ 6] 1497 	inc	de
   06D2 13            [ 6] 1498 	inc	de
   06D3 6A            [ 4] 1499 	ld	l, d
   06D4 7B            [ 4] 1500 	ld	a, e
   06D5 91            [ 4] 1501 	sub	a, c
   06D6 7D            [ 4] 1502 	ld	a, l
   06D7 98            [ 4] 1503 	sbc	a, b
   06D8 E2rDDr06      [10] 1504 	jp	PO, 00182$
   06DB EE 80         [ 7] 1505 	xor	a, #0x80
   06DD                    1506 00182$:
   06DD FAr3Ar08      [10] 1507 	jp	M, 00121$
                           1508 ;src/main.c:629: spr[0].y >= obj[ct].y - 4 && spr[0].y <= obj[ct].y + 4) {
   06E0 21r19r00      [10] 1509 	ld	hl, #_spr + 1
   06E3 4E            [ 7] 1510 	ld	c, (hl)
   06E4 E1            [10] 1511 	pop	hl
   06E5 E5            [11] 1512 	push	hl
   06E6 23            [ 6] 1513 	inc	hl
   06E7 5E            [ 7] 1514 	ld	e, (hl)
   06E8 16 00         [ 7] 1515 	ld	d, #0x00
   06EA 7B            [ 4] 1516 	ld	a, e
   06EB C6 FC         [ 7] 1517 	add	a, #0xfc
   06ED 6F            [ 4] 1518 	ld	l, a
   06EE 7A            [ 4] 1519 	ld	a, d
   06EF CE FF         [ 7] 1520 	adc	a, #0xff
   06F1 47            [ 4] 1521 	ld	b, a
   06F2 26 00         [ 7] 1522 	ld	h, #0x00
   06F4 79            [ 4] 1523 	ld	a, c
   06F5 95            [ 4] 1524 	sub	a, l
   06F6 7C            [ 4] 1525 	ld	a, h
   06F7 98            [ 4] 1526 	sbc	a, b
   06F8 E2rFDr06      [10] 1527 	jp	PO, 00183$
   06FB EE 80         [ 7] 1528 	xor	a, #0x80
   06FD                    1529 00183$:
   06FD FAr3Ar08      [10] 1530 	jp	M, 00121$
   0700 13            [ 6] 1531 	inc	de
   0701 13            [ 6] 1532 	inc	de
   0702 13            [ 6] 1533 	inc	de
   0703 13            [ 6] 1534 	inc	de
   0704 7B            [ 4] 1535 	ld	a, e
   0705 91            [ 4] 1536 	sub	a, c
   0706 7A            [ 4] 1537 	ld	a, d
   0707 9C            [ 4] 1538 	sbc	a, h
   0708 E2r0Dr07      [10] 1539 	jp	PO, 00184$
   070B EE 80         [ 7] 1540 	xor	a, #0x80
   070D                    1541 00184$:
   070D FAr3Ar08      [10] 1542 	jp	M, 00121$
                           1543 ;src/main.c:630: if (ct > 5) { // first aid kit or ammunition					
   0710 3E 05         [ 7] 1544 	ld	a, #0x05
   0712 FD 21r07r00   [14] 1545 	ld	iy, #_ct
   0716 FD 96 00      [19] 1546 	sub	a, 0 (iy)
   0719 30 62         [12] 1547 	jr	NC,00113$
                           1548 ;src/main.c:631: if (obj[ct].taken == FALSE) {
   071B E1            [10] 1549 	pop	hl
   071C E5            [11] 1550 	push	hl
   071D 23            [ 6] 1551 	inc	hl
   071E 23            [ 6] 1552 	inc	hl
   071F 23            [ 6] 1553 	inc	hl
   0720 7E            [ 7] 1554 	ld	a, (hl)
   0721 B7            [ 4] 1555 	or	a, a
   0722 C2r35r08      [10] 1556 	jp	NZ, 00114$
                           1557 ;src/main.c:632: cpct_akp_SFXPlay (6, 12, 41, 0, 0, AY_CHANNEL_A);
   0725 3E 01         [ 7] 1558 	ld	a, #0x01
   0727 F5            [11] 1559 	push	af
   0728 33            [ 6] 1560 	inc	sp
   0729 21 00 00      [10] 1561 	ld	hl, #0x0000
   072C E5            [11] 1562 	push	hl
   072D 2E 29         [ 7] 1563 	ld	l, #0x29
   072F E5            [11] 1564 	push	hl
   0730 21 06 0C      [10] 1565 	ld	hl, #0x0c06
   0733 E5            [11] 1566 	push	hl
   0734 CDr00r00      [17] 1567 	call	_cpct_akp_SFXPlay
   0737 21 07 00      [10] 1568 	ld	hl, #7
   073A 39            [11] 1569 	add	hl, sp
   073B F9            [ 6] 1570 	ld	sp, hl
                           1571 ;src/main.c:633: if (ct == 6) spr[0].lives = 9; // first aid kit
   073C 3Ar07r00      [13] 1572 	ld	a,(#_ct + 0)
   073F D6 06         [ 7] 1573 	sub	a, #0x06
   0741 20 05         [12] 1574 	jr	NZ,00102$
   0743 21r21r00      [10] 1575 	ld	hl, #(_spr + 0x0009)
   0746 36 09         [10] 1576 	ld	(hl), #0x09
   0748                    1577 00102$:
                           1578 ;src/main.c:634: if (ct == 7) ammo = 99; // ammunition
   0748 3Ar07r00      [13] 1579 	ld	a,(#_ct + 0)
   074B D6 07         [ 7] 1580 	sub	a, #0x07
   074D 20 05         [12] 1581 	jr	NZ,00104$
   074F 21r04r00      [10] 1582 	ld	hl,#_ammo + 0
   0752 36 63         [10] 1583 	ld	(hl), #0x63
   0754                    1584 00104$:
                           1585 ;src/main.c:635: DeleteObject(&obj[ct]); 
   0754 ED 4Br07r00   [20] 1586 	ld	bc, (_ct)
   0758 06 00         [ 7] 1587 	ld	b, #0x00
   075A 69            [ 4] 1588 	ld	l, c
   075B 60            [ 4] 1589 	ld	h, b
   075C 29            [11] 1590 	add	hl, hl
   075D 29            [11] 1591 	add	hl, hl
   075E 09            [11] 1592 	add	hl, bc
   075F 11r80r00      [10] 1593 	ld	de, #_obj
   0762 19            [11] 1594 	add	hl, de
   0763 CDrC5r05      [17] 1595 	call	_DeleteObject
                           1596 ;src/main.c:637: obj[ct].taken = TRUE;
   0766 ED 4Br07r00   [20] 1597 	ld	bc, (_ct)
   076A 06 00         [ 7] 1598 	ld	b, #0x00
   076C 69            [ 4] 1599 	ld	l, c
   076D 60            [ 4] 1600 	ld	h, b
   076E 29            [11] 1601 	add	hl, hl
   076F 29            [11] 1602 	add	hl, hl
   0770 09            [11] 1603 	add	hl, bc
   0771 11r80r00      [10] 1604 	ld	de, #_obj
   0774 19            [11] 1605 	add	hl, de
   0775 23            [ 6] 1606 	inc	hl
   0776 23            [ 6] 1607 	inc	hl
   0777 23            [ 6] 1608 	inc	hl
   0778 36 01         [10] 1609 	ld	(hl), #0x01
   077A C3r35r08      [10] 1610 	jp	00114$
   077D                    1611 00113$:
                           1612 ;src/main.c:641: else if (spr[0].object != ct) {
   077D 21r24r00      [10] 1613 	ld	hl, #(_spr + 0x000c) + 0
   0780 4E            [ 7] 1614 	ld	c, (hl)
   0781 3Ar07r00      [13] 1615 	ld	a,(#_ct + 0)
   0784 91            [ 4] 1616 	sub	a, c
   0785 28 5B         [12] 1617 	jr	Z,00110$
                           1618 ;src/main.c:643: if (spr[0].object == 255) {	
   0787 0C            [ 4] 1619 	inc	c
   0788 C2r35r08      [10] 1620 	jp	NZ,00114$
                           1621 ;src/main.c:644: cpct_akp_SFXPlay(8, 15, 45, 0, 0, AY_CHANNEL_A);
   078B 3E 01         [ 7] 1622 	ld	a, #0x01
   078D F5            [11] 1623 	push	af
   078E 33            [ 6] 1624 	inc	sp
   078F 21 00 00      [10] 1625 	ld	hl, #0x0000
   0792 E5            [11] 1626 	push	hl
   0793 2E 2D         [ 7] 1627 	ld	l, #0x2d
   0795 E5            [11] 1628 	push	hl
   0796 21 08 0F      [10] 1629 	ld	hl, #0x0f08
   0799 E5            [11] 1630 	push	hl
   079A CDr00r00      [17] 1631 	call	_cpct_akp_SFXPlay
   079D 21 07 00      [10] 1632 	ld	hl, #7
   07A0 39            [11] 1633 	add	hl, sp
   07A1 F9            [ 6] 1634 	ld	sp, hl
                           1635 ;src/main.c:645: spr[0].object = ct;
   07A2 21r24r00      [10] 1636 	ld	hl, #(_spr + 0x000c)
   07A5 3Ar07r00      [13] 1637 	ld	a,(#_ct + 0)
   07A8 77            [ 7] 1638 	ld	(hl), a
                           1639 ;src/main.c:646: obj[ct].taken = TRUE;
   07A9 ED 4Br07r00   [20] 1640 	ld	bc, (_ct)
   07AD 06 00         [ 7] 1641 	ld	b, #0x00
   07AF 69            [ 4] 1642 	ld	l, c
   07B0 60            [ 4] 1643 	ld	h, b
   07B1 29            [11] 1644 	add	hl, hl
   07B2 29            [11] 1645 	add	hl, hl
   07B3 09            [11] 1646 	add	hl, bc
   07B4 11r80r00      [10] 1647 	ld	de, #_obj
   07B7 19            [11] 1648 	add	hl, de
   07B8 23            [ 6] 1649 	inc	hl
   07B9 23            [ 6] 1650 	inc	hl
   07BA 23            [ 6] 1651 	inc	hl
   07BB 36 01         [10] 1652 	ld	(hl), #0x01
                           1653 ;src/main.c:647: DeleteObject(&obj[ct]); 
   07BD ED 4Br07r00   [20] 1654 	ld	bc, (_ct)
   07C1 06 00         [ 7] 1655 	ld	b, #0x00
   07C3 69            [ 4] 1656 	ld	l, c
   07C4 60            [ 4] 1657 	ld	h, b
   07C5 29            [11] 1658 	add	hl, hl
   07C6 29            [11] 1659 	add	hl, hl
   07C7 09            [11] 1660 	add	hl, bc
   07C8 11r80r00      [10] 1661 	ld	de, #_obj
   07CB 19            [11] 1662 	add	hl, de
   07CC CDrC5r05      [17] 1663 	call	_DeleteObject
                           1664 ;src/main.c:649: DeleteObjectScoreboard(); PrintObject(ct, 68, 12); 
   07CF CDr1Er06      [17] 1665 	call	_DeleteObjectScoreboard
   07D2 21 44 0C      [10] 1666 	ld	hl, #0x0c44
   07D5 E5            [11] 1667 	push	hl
   07D6 3Ar07r00      [13] 1668 	ld	a, (_ct)
   07D9 F5            [11] 1669 	push	af
   07DA 33            [ 6] 1670 	inc	sp
   07DB CDr8Br05      [17] 1671 	call	_PrintObject
   07DE F1            [10] 1672 	pop	af
   07DF 33            [ 6] 1673 	inc	sp
   07E0 18 53         [12] 1674 	jr	00114$
   07E2                    1675 00110$:
                           1676 ;src/main.c:653: cpct_akp_SFXPlay(7, 15, 45, 0, 0, AY_CHANNEL_A);
   07E2 3E 01         [ 7] 1677 	ld	a, #0x01
   07E4 F5            [11] 1678 	push	af
   07E5 33            [ 6] 1679 	inc	sp
   07E6 21 00 00      [10] 1680 	ld	hl, #0x0000
   07E9 E5            [11] 1681 	push	hl
   07EA 2E 2D         [ 7] 1682 	ld	l, #0x2d
   07EC E5            [11] 1683 	push	hl
   07ED 21 07 0F      [10] 1684 	ld	hl, #0x0f07
   07F0 E5            [11] 1685 	push	hl
   07F1 CDr00r00      [17] 1686 	call	_cpct_akp_SFXPlay
   07F4 21 07 00      [10] 1687 	ld	hl, #7
   07F7 39            [11] 1688 	add	hl, sp
   07F8 F9            [ 6] 1689 	ld	sp, hl
                           1690 ;src/main.c:655: PrintObject(ct, obj[ct].x, obj[ct].y);	
   07F9 ED 4Br07r00   [20] 1691 	ld	bc, (_ct)
   07FD 06 00         [ 7] 1692 	ld	b, #0x00
   07FF 69            [ 4] 1693 	ld	l, c
   0800 60            [ 4] 1694 	ld	h, b
   0801 29            [11] 1695 	add	hl, hl
   0802 29            [11] 1696 	add	hl, hl
   0803 09            [11] 1697 	add	hl, bc
   0804 01r80r00      [10] 1698 	ld	bc,#_obj
   0807 09            [11] 1699 	add	hl,bc
   0808 4D            [ 4] 1700 	ld	c,l
   0809 44            [ 4] 1701 	ld	b,h
   080A 23            [ 6] 1702 	inc	hl
   080B 56            [ 7] 1703 	ld	d, (hl)
   080C 0A            [ 7] 1704 	ld	a, (bc)
   080D 5F            [ 4] 1705 	ld	e,a
   080E D5            [11] 1706 	push	de
   080F 3Ar07r00      [13] 1707 	ld	a, (_ct)
   0812 F5            [11] 1708 	push	af
   0813 33            [ 6] 1709 	inc	sp
   0814 CDr8Br05      [17] 1710 	call	_PrintObject
   0817 F1            [10] 1711 	pop	af
   0818 33            [ 6] 1712 	inc	sp
                           1713 ;src/main.c:656: DeleteObjectScoreboard();
   0819 CDr1Er06      [17] 1714 	call	_DeleteObjectScoreboard
                           1715 ;src/main.c:657: spr[0].object = 255;
   081C 21r24r00      [10] 1716 	ld	hl, #(_spr + 0x000c)
   081F 36 FF         [10] 1717 	ld	(hl), #0xff
                           1718 ;src/main.c:658: obj[ct].taken = FALSE;
   0821 ED 4Br07r00   [20] 1719 	ld	bc, (_ct)
   0825 06 00         [ 7] 1720 	ld	b, #0x00
   0827 69            [ 4] 1721 	ld	l, c
   0828 60            [ 4] 1722 	ld	h, b
   0829 29            [11] 1723 	add	hl, hl
   082A 29            [11] 1724 	add	hl, hl
   082B 09            [11] 1725 	add	hl, bc
   082C 11r80r00      [10] 1726 	ld	de, #_obj
   082F 19            [11] 1727 	add	hl, de
   0830 23            [ 6] 1728 	inc	hl
   0831 23            [ 6] 1729 	inc	hl
   0832 23            [ 6] 1730 	inc	hl
   0833 36 00         [10] 1731 	ld	(hl), #0x00
   0835                    1732 00114$:
                           1733 ;src/main.c:661: ct = N_MAX_OBJ;
   0835 21r07r00      [10] 1734 	ld	hl,#_ct + 0
   0838 36 08         [10] 1735 	ld	(hl), #0x08
   083A                    1736 00121$:
                           1737 ;src/main.c:664: ct++;
   083A 21r07r00      [10] 1738 	ld	hl, #_ct+0
   083D 34            [11] 1739 	inc	(hl)
   083E C3r8Dr06      [10] 1740 	jp	00122$
   0841                    1741 00125$:
   0841 DD F9         [10] 1742 	ld	sp, ix
   0843 DD E1         [14] 1743 	pop	ix
   0845 C9            [10] 1744 	ret
                           1745 ;src/main.c:679: void InitObjects() {
                           1746 ;	---------------------------------
                           1747 ; Function InitObjects
                           1748 ; ---------------------------------
   0846                    1749 _InitObjects::
                           1750 ;src/main.c:671: obj[objNum].x = x; 
   0846 21r80r00      [10] 1751 	ld	hl, #_obj
   0849 36 18         [10] 1752 	ld	(hl), #0x18
                           1753 ;src/main.c:672: obj[objNum].y = y;
   084B 21r81r00      [10] 1754 	ld	hl, #(_obj + 0x0001)
   084E 36 60         [10] 1755 	ld	(hl), #0x60
                           1756 ;src/main.c:673: obj[objNum].mapNumber = mapNum;
   0850 21r82r00      [10] 1757 	ld	hl, #(_obj + 0x0002)
   0853 36 00         [10] 1758 	ld	(hl), #0x00
                           1759 ;src/main.c:671: obj[objNum].x = x; 
   0855 21r85r00      [10] 1760 	ld	hl, #(_obj + 0x0005)
   0858 36 00         [10] 1761 	ld	(hl), #0x00
                           1762 ;src/main.c:672: obj[objNum].y = y;
   085A 21r86r00      [10] 1763 	ld	hl, #(_obj + 0x0006)
   085D 36 00         [10] 1764 	ld	(hl), #0x00
                           1765 ;src/main.c:673: obj[objNum].mapNumber = mapNum;
   085F 21r87r00      [10] 1766 	ld	hl, #(_obj + 0x0007)
   0862 36 FF         [10] 1767 	ld	(hl), #0xff
                           1768 ;src/main.c:671: obj[objNum].x = x; 
   0864 21r8Ar00      [10] 1769 	ld	hl, #(_obj + 0x000a)
   0867 36 2C         [10] 1770 	ld	(hl), #0x2c
                           1771 ;src/main.c:672: obj[objNum].y = y;
   0869 21r8Br00      [10] 1772 	ld	hl, #(_obj + 0x000b)
   086C 36 40         [10] 1773 	ld	(hl), #0x40
                           1774 ;src/main.c:673: obj[objNum].mapNumber = mapNum;
   086E 21r8Cr00      [10] 1775 	ld	hl, #(_obj + 0x000c)
   0871 36 02         [10] 1776 	ld	(hl), #0x02
                           1777 ;src/main.c:671: obj[objNum].x = x; 
   0873 21r8Fr00      [10] 1778 	ld	hl, #(_obj + 0x000f)
   0876 36 08         [10] 1779 	ld	(hl), #0x08
                           1780 ;src/main.c:672: obj[objNum].y = y;
   0878 21r90r00      [10] 1781 	ld	hl, #(_obj + 0x0010)
   087B 36 3C         [10] 1782 	ld	(hl), #0x3c
                           1783 ;src/main.c:673: obj[objNum].mapNumber = mapNum;
   087D 21r91r00      [10] 1784 	ld	hl, #(_obj + 0x0011)
   0880 36 01         [10] 1785 	ld	(hl), #0x01
                           1786 ;src/main.c:671: obj[objNum].x = x; 
   0882 21r94r00      [10] 1787 	ld	hl, #(_obj + 0x0014)
   0885 36 00         [10] 1788 	ld	(hl), #0x00
                           1789 ;src/main.c:672: obj[objNum].y = y;
   0887 21r95r00      [10] 1790 	ld	hl, #(_obj + 0x0015)
   088A 36 00         [10] 1791 	ld	(hl), #0x00
                           1792 ;src/main.c:673: obj[objNum].mapNumber = mapNum;
   088C 21r96r00      [10] 1793 	ld	hl, #(_obj + 0x0016)
   088F 36 FF         [10] 1794 	ld	(hl), #0xff
                           1795 ;src/main.c:671: obj[objNum].x = x; 
   0891 21r99r00      [10] 1796 	ld	hl, #(_obj + 0x0019)
   0894 36 00         [10] 1797 	ld	(hl), #0x00
                           1798 ;src/main.c:672: obj[objNum].y = y;
   0896 21r9Ar00      [10] 1799 	ld	hl, #(_obj + 0x001a)
   0899 36 00         [10] 1800 	ld	(hl), #0x00
                           1801 ;src/main.c:673: obj[objNum].mapNumber = mapNum;
   089B 21r9Br00      [10] 1802 	ld	hl, #(_obj + 0x001b)
   089E 36 FF         [10] 1803 	ld	(hl), #0xff
                           1804 ;src/main.c:671: obj[objNum].x = x; 
   08A0 21r9Er00      [10] 1805 	ld	hl, #(_obj + 0x001e)
   08A3 36 42         [10] 1806 	ld	(hl), #0x42
                           1807 ;src/main.c:672: obj[objNum].y = y;
   08A5 21r9Fr00      [10] 1808 	ld	hl, #(_obj + 0x001f)
   08A8 36 80         [10] 1809 	ld	(hl), #0x80
                           1810 ;src/main.c:673: obj[objNum].mapNumber = mapNum;
   08AA 21rA0r00      [10] 1811 	ld	hl, #(_obj + 0x0020)
   08AD 36 01         [10] 1812 	ld	(hl), #0x01
                           1813 ;src/main.c:671: obj[objNum].x = x; 
   08AF 21rA3r00      [10] 1814 	ld	hl, #(_obj + 0x0023)
   08B2 36 44         [10] 1815 	ld	(hl), #0x44
                           1816 ;src/main.c:672: obj[objNum].y = y;
   08B4 21rA4r00      [10] 1817 	ld	hl, #(_obj + 0x0024)
   08B7 36 40         [10] 1818 	ld	(hl), #0x40
                           1819 ;src/main.c:673: obj[objNum].mapNumber = mapNum;
   08B9 21rA5r00      [10] 1820 	ld	hl, #(_obj + 0x0025)
   08BC 36 02         [10] 1821 	ld	(hl), #0x02
                           1822 ;src/main.c:688: SetObjectParams(7, 68,  64,   2); // Ammunition
   08BE C9            [10] 1823 	ret
                           1824 ;src/main.c:703: void PrintSprite(TSpr *pSpr) __z88dk_fastcall {
                           1825 ;	---------------------------------
                           1826 ; Function PrintSprite
                           1827 ; ---------------------------------
   08BF                    1828 _PrintSprite::
                           1829 ;src/main.c:706: SPR_W, SPR_H, g_maskTable);
                           1830 ;src/main.c:705: cpct_getScreenPtr(CPCT_VMEM_START, pSpr->x, pSpr->y), 
   08BF 4D            [ 4] 1831 	ld	c,l
   08C0 44            [ 4] 1832 	ld	b,h
   08C1 23            [ 6] 1833 	inc	hl
   08C2 56            [ 7] 1834 	ld	d, (hl)
   08C3 0A            [ 7] 1835 	ld	a, (bc)
   08C4 C5            [11] 1836 	push	bc
   08C5 5F            [ 4] 1837 	ld	e, a
   08C6 D5            [11] 1838 	push	de
   08C7 21 00 C0      [10] 1839 	ld	hl, #0xc000
   08CA E5            [11] 1840 	push	hl
   08CB CDr00r00      [17] 1841 	call	_cpct_getScreenPtr
   08CE EB            [ 4] 1842 	ex	de,hl
   08CF FD E1         [14] 1843 	pop	iy
   08D1 FD 6E 05      [19] 1844 	ld	l, 5 (iy)
   08D4 FD 66 06      [19] 1845 	ld	h, 6 (iy)
   08D7 23            [ 6] 1846 	inc	hl
   08D8 4E            [ 7] 1847 	ld	c, (hl)
   08D9 23            [ 6] 1848 	inc	hl
   08DA 46            [ 7] 1849 	ld	b, (hl)
   08DB 21r00r01      [10] 1850 	ld	hl, #_g_maskTable
   08DE E5            [11] 1851 	push	hl
   08DF 21 08 10      [10] 1852 	ld	hl, #0x1008
   08E2 E5            [11] 1853 	push	hl
   08E3 D5            [11] 1854 	push	de
   08E4 C5            [11] 1855 	push	bc
   08E5 CDr00r00      [17] 1856 	call	_cpct_drawSpriteMaskedAlignedTable
   08E8 C9            [10] 1857 	ret
                           1858 ;src/main.c:711: void DeleteSprite(TSpr *pSpr) __z88dk_fastcall {
                           1859 ;	---------------------------------
                           1860 ; Function DeleteSprite
                           1861 ; ---------------------------------
   08E9                    1862 _DeleteSprite::
   08E9 DD E5         [15] 1863 	push	ix
   08EB DD 21 00 00   [14] 1864 	ld	ix,#0
   08EF DD 39         [15] 1865 	add	ix,sp
   08F1 3B            [ 6] 1866 	dec	sp
                           1867 ;src/main.c:713: 4 + (pSpr->px & 1), 4 + (pSpr->py & 3 ? 1 : 0),	
   08F2 4D            [ 4] 1868 	ld	c,l
   08F3 44            [ 4] 1869 	ld	b,h
   08F4 23            [ 6] 1870 	inc	hl
   08F5 23            [ 6] 1871 	inc	hl
   08F6 23            [ 6] 1872 	inc	hl
   08F7 5E            [ 7] 1873 	ld	e, (hl)
   08F8 7B            [ 4] 1874 	ld	a, e
   08F9 E6 03         [ 7] 1875 	and	a, #0x03
   08FB 28 04         [12] 1876 	jr	Z,00103$
   08FD 16 01         [ 7] 1877 	ld	d, #0x01
   08FF 18 02         [12] 1878 	jr	00104$
   0901                    1879 00103$:
   0901 16 00         [ 7] 1880 	ld	d, #0x00
   0903                    1881 00104$:
   0903 14            [ 4] 1882 	inc	d
   0904 14            [ 4] 1883 	inc	d
   0905 14            [ 4] 1884 	inc	d
   0906 14            [ 4] 1885 	inc	d
   0907 69            [ 4] 1886 	ld	l, c
   0908 60            [ 4] 1887 	ld	h, b
   0909 23            [ 6] 1888 	inc	hl
   090A 23            [ 6] 1889 	inc	hl
   090B 4E            [ 7] 1890 	ld	c, (hl)
   090C 79            [ 4] 1891 	ld	a, c
   090D E6 01         [ 7] 1892 	and	a, #0x01
   090F C6 04         [ 7] 1893 	add	a, #0x04
   0911 DD 77 FF      [19] 1894 	ld	-1 (ix), a
                           1895 ;src/main.c:712: cpct_etm_drawTileBox2x4(pSpr->px / 2, (pSpr->py - ORIG_MAP_Y) / 4, 
   0914 06 00         [ 7] 1896 	ld	b, #0x00
   0916 6B            [ 4] 1897 	ld	l, e
   0917 60            [ 4] 1898 	ld	h, b
   0918 CB 78         [ 8] 1899 	bit	7, b
   091A 28 05         [12] 1900 	jr	Z,00105$
   091C 6B            [ 4] 1901 	ld	l, e
   091D 60            [ 4] 1902 	ld	h, b
   091E 23            [ 6] 1903 	inc	hl
   091F 23            [ 6] 1904 	inc	hl
   0920 23            [ 6] 1905 	inc	hl
   0921                    1906 00105$:
   0921 CB 2C         [ 8] 1907 	sra	h
   0923 CB 1D         [ 8] 1908 	rr	l
   0925 CB 2C         [ 8] 1909 	sra	h
   0927 CB 1D         [ 8] 1910 	rr	l
   0929 5D            [ 4] 1911 	ld	e, l
   092A CB 39         [ 8] 1912 	srl	c
   092C 21 31 10      [10] 1913 	ld	hl, #0x1031
   092F E5            [11] 1914 	push	hl
   0930 21 00 C0      [10] 1915 	ld	hl, #0xc000
   0933 E5            [11] 1916 	push	hl
   0934 3E 28         [ 7] 1917 	ld	a, #0x28
   0936 F5            [11] 1918 	push	af
   0937 33            [ 6] 1919 	inc	sp
   0938 D5            [11] 1920 	push	de
   0939 33            [ 6] 1921 	inc	sp
   093A DD 56 FF      [19] 1922 	ld	d, -1 (ix)
   093D D5            [11] 1923 	push	de
   093E 79            [ 4] 1924 	ld	a, c
   093F F5            [11] 1925 	push	af
   0940 33            [ 6] 1926 	inc	sp
   0941 CDr00r00      [17] 1927 	call	_cpct_etm_drawTileBox2x4
   0944 33            [ 6] 1928 	inc	sp
   0945 DD E1         [14] 1929 	pop	ix
   0947 C9            [10] 1930 	ret
                           1931 ;src/main.c:719: void PrintExplosion(TSpr *pSpr, u8 frame) {
                           1932 ;	---------------------------------
                           1933 ; Function PrintExplosion
                           1934 ; ---------------------------------
   0948                    1935 _PrintExplosion::
   0948 DD E5         [15] 1936 	push	ix
   094A DD 21 00 00   [14] 1937 	ld	ix,#0
   094E DD 39         [15] 1938 	add	ix,sp
                           1939 ;src/main.c:722: SPR_W, SPR_H, g_maskTable);
                           1940 ;src/main.c:721: cpct_getScreenPtr(CPCT_VMEM_START, pSpr->x, pSpr->y), 
   0950 DD 4E 04      [19] 1941 	ld	c,4 (ix)
   0953 DD 46 05      [19] 1942 	ld	b,5 (ix)
   0956 69            [ 4] 1943 	ld	l, c
   0957 60            [ 4] 1944 	ld	h, b
   0958 23            [ 6] 1945 	inc	hl
   0959 56            [ 7] 1946 	ld	d, (hl)
   095A 0A            [ 7] 1947 	ld	a, (bc)
   095B 5F            [ 4] 1948 	ld	e,a
   095C D5            [11] 1949 	push	de
   095D 21 00 C0      [10] 1950 	ld	hl, #0xc000
   0960 E5            [11] 1951 	push	hl
   0961 CDr00r00      [17] 1952 	call	_cpct_getScreenPtr
   0964 4D            [ 4] 1953 	ld	c, l
   0965 44            [ 4] 1954 	ld	b, h
                           1955 ;src/main.c:720: cpct_drawSpriteMaskedAlignedTable(g_explosion[frame], 
   0966 11r00r00      [10] 1956 	ld	de, #_g_explosion+0
   0969 DD 6E 06      [19] 1957 	ld	l, 6 (ix)
   096C 26 00         [ 7] 1958 	ld	h, #0x00
   096E 29            [11] 1959 	add	hl, hl
   096F 29            [11] 1960 	add	hl, hl
   0970 29            [11] 1961 	add	hl, hl
   0971 29            [11] 1962 	add	hl, hl
   0972 29            [11] 1963 	add	hl, hl
   0973 29            [11] 1964 	add	hl, hl
   0974 29            [11] 1965 	add	hl, hl
   0975 19            [11] 1966 	add	hl, de
   0976 11r00r01      [10] 1967 	ld	de, #_g_maskTable
   0979 D5            [11] 1968 	push	de
   097A 11 08 10      [10] 1969 	ld	de, #0x1008
   097D D5            [11] 1970 	push	de
   097E C5            [11] 1971 	push	bc
   097F E5            [11] 1972 	push	hl
   0980 CDr00r00      [17] 1973 	call	_cpct_drawSpriteMaskedAlignedTable
   0983 DD E1         [14] 1974 	pop	ix
   0985 C9            [10] 1975 	ret
                           1976 ;src/main.c:727: void SelectSpriteFrame(TSpr *pSpr) __z88dk_fastcall {
                           1977 ;	---------------------------------
                           1978 ; Function SelectSpriteFrame
                           1979 ; ---------------------------------
   0986                    1980 _SelectSpriteFrame::
   0986 DD E5         [15] 1981 	push	ix
   0988 DD 21 00 00   [14] 1982 	ld	ix,#0
   098C DD 39         [15] 1983 	add	ix,sp
   098E 3B            [ 6] 1984 	dec	sp
                           1985 ;src/main.c:728: if (ctMainLoop % ANIM_PAUSE == 0) {
   098F E5            [11] 1986 	push	hl
   0990 3E 03         [ 7] 1987 	ld	a, #0x03
   0992 F5            [11] 1988 	push	af
   0993 33            [ 6] 1989 	inc	sp
   0994 3Ar06r00      [13] 1990 	ld	a, (_ctMainLoop)
   0997 F5            [11] 1991 	push	af
   0998 33            [ 6] 1992 	inc	sp
   0999 CDr00r00      [17] 1993 	call	__moduchar
   099C F1            [10] 1994 	pop	af
   099D C1            [10] 1995 	pop	bc
   099E 7D            [ 4] 1996 	ld	a, l
   099F B7            [ 4] 1997 	or	a, a
   09A0 20 59         [12] 1998 	jr	NZ,00109$
                           1999 ;src/main.c:729: if (pSpr->ident == PELUSOID)
   09A2 69            [ 4] 2000 	ld	l, c
   09A3 60            [ 4] 2001 	ld	h, b
   09A4 11 12 00      [10] 2002 	ld	de, #0x0012
   09A7 19            [11] 2003 	add	hl, de
   09A8 7E            [ 7] 2004 	ld	a, (hl)
   09A9 DD 77 FF      [19] 2005 	ld	-1 (ix), a
                           2006 ;src/main.c:730: pSpr->frm = anim_pelusoid[pSpr->nFrm / ANIM_PAUSE];
   09AC 21 05 00      [10] 2007 	ld	hl, #0x0005
   09AF 09            [11] 2008 	add	hl,bc
   09B0 EB            [ 4] 2009 	ex	de,hl
   09B1 C5            [11] 2010 	push	bc
   09B2 FD E1         [14] 2011 	pop	iy
   09B4 FD 46 07      [19] 2012 	ld	b, 7 (iy)
   09B7 D5            [11] 2013 	push	de
   09B8 3E 03         [ 7] 2014 	ld	a, #0x03
   09BA F5            [11] 2015 	push	af
   09BB 33            [ 6] 2016 	inc	sp
   09BC C5            [11] 2017 	push	bc
   09BD 33            [ 6] 2018 	inc	sp
   09BE CDr00r00      [17] 2019 	call	__divuchar
   09C1 F1            [10] 2020 	pop	af
   09C2 D1            [10] 2021 	pop	de
   09C3 26 00         [ 7] 2022 	ld	h, #0x00
   09C5 29            [11] 2023 	add	hl, hl
                           2024 ;src/main.c:729: if (pSpr->ident == PELUSOID)
   09C6 DD 7E FF      [19] 2025 	ld	a, -1 (ix)
   09C9 3D            [ 4] 2026 	dec	a
   09CA 20 0E         [12] 2027 	jr	NZ,00105$
                           2028 ;src/main.c:730: pSpr->frm = anim_pelusoid[pSpr->nFrm / ANIM_PAUSE];
   09CC 01r50r00      [10] 2029 	ld	bc, #_anim_pelusoid+0
   09CF 09            [11] 2030 	add	hl, bc
   09D0 4E            [ 7] 2031 	ld	c, (hl)
   09D1 23            [ 6] 2032 	inc	hl
   09D2 46            [ 7] 2033 	ld	b, (hl)
   09D3 79            [ 4] 2034 	ld	a, c
   09D4 12            [ 7] 2035 	ld	(de), a
   09D5 13            [ 6] 2036 	inc	de
   09D6 78            [ 4] 2037 	ld	a, b
   09D7 12            [ 7] 2038 	ld	(de), a
   09D8 18 21         [12] 2039 	jr	00109$
   09DA                    2040 00105$:
                           2041 ;src/main.c:731: else if (pSpr->ident == ARACNOVIRUS)
   09DA DD 7E FF      [19] 2042 	ld	a, -1 (ix)
   09DD D6 02         [ 7] 2043 	sub	a, #0x02
   09DF 20 0E         [12] 2044 	jr	NZ,00102$
                           2045 ;src/main.c:732: pSpr->frm = anim_aracnovirus[pSpr->nFrm / ANIM_PAUSE];
   09E1 01r54r00      [10] 2046 	ld	bc, #_anim_aracnovirus+0
   09E4 09            [11] 2047 	add	hl, bc
   09E5 4E            [ 7] 2048 	ld	c, (hl)
   09E6 23            [ 6] 2049 	inc	hl
   09E7 46            [ 7] 2050 	ld	b, (hl)
   09E8 79            [ 4] 2051 	ld	a, c
   09E9 12            [ 7] 2052 	ld	(de), a
   09EA 13            [ 6] 2053 	inc	de
   09EB 78            [ 4] 2054 	ld	a, b
   09EC 12            [ 7] 2055 	ld	(de), a
   09ED 18 0C         [12] 2056 	jr	00109$
   09EF                    2057 00102$:
                           2058 ;src/main.c:734: pSpr->frm = anim_infected[pSpr->nFrm / ANIM_PAUSE];
   09EF 01r58r00      [10] 2059 	ld	bc, #_anim_infected+0
   09F2 09            [11] 2060 	add	hl, bc
   09F3 4E            [ 7] 2061 	ld	c, (hl)
   09F4 23            [ 6] 2062 	inc	hl
   09F5 46            [ 7] 2063 	ld	b, (hl)
   09F6 79            [ 4] 2064 	ld	a, c
   09F7 12            [ 7] 2065 	ld	(de), a
   09F8 13            [ 6] 2066 	inc	de
   09F9 78            [ 4] 2067 	ld	a, b
   09FA 12            [ 7] 2068 	ld	(de), a
   09FB                    2069 00109$:
   09FB 33            [ 6] 2070 	inc	sp
   09FC DD E1         [14] 2071 	pop	ix
   09FE C9            [10] 2072 	ret
                           2073 ;src/main.c:740: void EnemyWalkAnim(TSpr *pSpr) __z88dk_fastcall {
                           2074 ;	---------------------------------
                           2075 ; Function EnemyWalkAnim
                           2076 ; ---------------------------------
   09FF                    2077 _EnemyWalkAnim::
                           2078 ;src/main.c:741: if(++pSpr->nFrm == 2 * ANIM_PAUSE) pSpr->nFrm = 0;
   09FF 01 07 00      [10] 2079 	ld	bc, #0x0007
   0A02 09            [11] 2080 	add	hl, bc
   0A03 7E            [ 7] 2081 	ld	a, (hl)
   0A04 3C            [ 4] 2082 	inc	a
   0A05 77            [ 7] 2083 	ld	(hl), a
   0A06 D6 06         [ 7] 2084 	sub	a,#0x06
   0A08 C0            [11] 2085 	ret	NZ
   0A09 77            [ 7] 2086 	ld	(hl),a
   0A0A C9            [10] 2087 	ret
                           2088 ;src/main.c:746: void CheckEnemyCollision(TSpr *pSpr) { // __z88dk_fastcall
                           2089 ;	---------------------------------
                           2090 ; Function CheckEnemyCollision
                           2091 ; ---------------------------------
   0A0B                    2092 _CheckEnemyCollision::
   0A0B DD E5         [15] 2093 	push	ix
   0A0D DD 21 00 00   [14] 2094 	ld	ix,#0
   0A11 DD 39         [15] 2095 	add	ix,sp
   0A13 21 F8 FF      [10] 2096 	ld	hl, #-8
   0A16 39            [11] 2097 	add	hl, sp
   0A17 F9            [ 6] 2098 	ld	sp, hl
                           2099 ;src/main.c:748: if ((spr[0].x + SPR_W) > (pSpr->x + 2) && (spr[0].x + 2) < (pSpr->x + SPR_W))
   0A18 3Ar18r00      [13] 2100 	ld	a, (#_spr + 0)
   0A1B DD 77 FE      [19] 2101 	ld	-2 (ix), a
   0A1E DD 36 FF 00   [19] 2102 	ld	-1 (ix), #0x00
   0A22 DD 7E FE      [19] 2103 	ld	a, -2 (ix)
   0A25 C6 08         [ 7] 2104 	add	a, #0x08
   0A27 4F            [ 4] 2105 	ld	c, a
   0A28 DD 7E FF      [19] 2106 	ld	a, -1 (ix)
   0A2B CE 00         [ 7] 2107 	adc	a, #0x00
   0A2D 47            [ 4] 2108 	ld	b, a
   0A2E DD 7E 04      [19] 2109 	ld	a, 4 (ix)
   0A31 DD 77 FC      [19] 2110 	ld	-4 (ix), a
   0A34 DD 7E 05      [19] 2111 	ld	a, 5 (ix)
   0A37 DD 77 FD      [19] 2112 	ld	-3 (ix), a
   0A3A DD 6E FC      [19] 2113 	ld	l,-4 (ix)
   0A3D DD 66 FD      [19] 2114 	ld	h,-3 (ix)
   0A40 5E            [ 7] 2115 	ld	e, (hl)
   0A41 DD 73 FA      [19] 2116 	ld	-6 (ix), e
   0A44 DD 36 FB 00   [19] 2117 	ld	-5 (ix), #0x00
   0A48 16 00         [ 7] 2118 	ld	d, #0x00
   0A4A 13            [ 6] 2119 	inc	de
   0A4B 13            [ 6] 2120 	inc	de
                           2121 ;src/main.c:750: if ((spr[0].y + SPR_H) > (pSpr->y + 2) && (spr[0].y + 2) < (pSpr->y + SPR_H))
   0A4C DD 7E FC      [19] 2122 	ld	a, -4 (ix)
   0A4F C6 01         [ 7] 2123 	add	a, #0x01
   0A51 DD 77 F8      [19] 2124 	ld	-8 (ix), a
   0A54 DD 7E FD      [19] 2125 	ld	a, -3 (ix)
   0A57 CE 00         [ 7] 2126 	adc	a, #0x00
   0A59 DD 77 F9      [19] 2127 	ld	-7 (ix), a
                           2128 ;src/main.c:748: if ((spr[0].x + SPR_W) > (pSpr->x + 2) && (spr[0].x + 2) < (pSpr->x + SPR_W))
   0A5C 7B            [ 4] 2129 	ld	a, e
   0A5D 91            [ 4] 2130 	sub	a, c
   0A5E 7A            [ 4] 2131 	ld	a, d
   0A5F 98            [ 4] 2132 	sbc	a, b
   0A60 E2r65r0A      [10] 2133 	jp	PO, 00160$
   0A63 EE 80         [ 7] 2134 	xor	a, #0x80
   0A65                    2135 00160$:
   0A65 F2rD5r0A      [10] 2136 	jp	P, 00115$
   0A68 DD 4E FE      [19] 2137 	ld	c,-2 (ix)
   0A6B DD 46 FF      [19] 2138 	ld	b,-1 (ix)
   0A6E 03            [ 6] 2139 	inc	bc
   0A6F 03            [ 6] 2140 	inc	bc
   0A70 DD 7E FA      [19] 2141 	ld	a, -6 (ix)
   0A73 C6 08         [ 7] 2142 	add	a, #0x08
   0A75 5F            [ 4] 2143 	ld	e, a
   0A76 DD 7E FB      [19] 2144 	ld	a, -5 (ix)
   0A79 CE 00         [ 7] 2145 	adc	a, #0x00
   0A7B 57            [ 4] 2146 	ld	d, a
   0A7C 79            [ 4] 2147 	ld	a, c
   0A7D 93            [ 4] 2148 	sub	a, e
   0A7E 78            [ 4] 2149 	ld	a, b
   0A7F 9A            [ 4] 2150 	sbc	a, d
   0A80 E2r85r0A      [10] 2151 	jp	PO, 00161$
   0A83 EE 80         [ 7] 2152 	xor	a, #0x80
   0A85                    2153 00161$:
   0A85 F2rD5r0A      [10] 2154 	jp	P, 00115$
                           2155 ;src/main.c:750: if ((spr[0].y + SPR_H) > (pSpr->y + 2) && (spr[0].y + 2) < (pSpr->y + SPR_H))
   0A88 21r19r00      [10] 2156 	ld	hl, #_spr + 1
   0A8B 4E            [ 7] 2157 	ld	c, (hl)
   0A8C 06 00         [ 7] 2158 	ld	b, #0x00
   0A8E 21 10 00      [10] 2159 	ld	hl, #0x0010
   0A91 09            [11] 2160 	add	hl,bc
   0A92 DD 75 FE      [19] 2161 	ld	-2 (ix), l
   0A95 DD 74 FF      [19] 2162 	ld	-1 (ix), h
   0A98 E1            [10] 2163 	pop	hl
   0A99 E5            [11] 2164 	push	hl
   0A9A 5E            [ 7] 2165 	ld	e, (hl)
   0A9B 16 00         [ 7] 2166 	ld	d, #0x00
   0A9D 6B            [ 4] 2167 	ld	l, e
   0A9E 62            [ 4] 2168 	ld	h, d
   0A9F 23            [ 6] 2169 	inc	hl
   0AA0 23            [ 6] 2170 	inc	hl
   0AA1 7D            [ 4] 2171 	ld	a, l
   0AA2 DD 96 FE      [19] 2172 	sub	a, -2 (ix)
   0AA5 7C            [ 4] 2173 	ld	a, h
   0AA6 DD 9E FF      [19] 2174 	sbc	a, -1 (ix)
   0AA9 E2rAEr0A      [10] 2175 	jp	PO, 00162$
   0AAC EE 80         [ 7] 2176 	xor	a, #0x80
   0AAE                    2177 00162$:
   0AAE F2rBBr0B      [10] 2178 	jp	P, 00118$
   0AB1 03            [ 6] 2179 	inc	bc
   0AB2 03            [ 6] 2180 	inc	bc
   0AB3 21 10 00      [10] 2181 	ld	hl, #0x0010
   0AB6 19            [11] 2182 	add	hl, de
   0AB7 79            [ 4] 2183 	ld	a, c
   0AB8 95            [ 4] 2184 	sub	a, l
   0AB9 78            [ 4] 2185 	ld	a, b
   0ABA 9C            [ 4] 2186 	sbc	a, h
   0ABB E2rC0r0A      [10] 2187 	jp	PO, 00163$
   0ABE EE 80         [ 7] 2188 	xor	a, #0x80
   0AC0                    2189 00163$:
   0AC0 F2rBBr0B      [10] 2190 	jp	P, 00118$
                           2191 ;src/main.c:753: spr[0].lives--;
   0AC3 21r21r00      [10] 2192 	ld	hl, #_spr + 9
   0AC6 4E            [ 7] 2193 	ld	c, (hl)
   0AC7 0D            [ 4] 2194 	dec	c
   0AC8 71            [ 7] 2195 	ld	(hl), c
                           2196 ;src/main.c:754: ExplodePlayer();
   0AC9 CDrDEr10      [17] 2197 	call	_ExplodePlayer
                           2198 ;src/main.c:755: ExplodeEnemies();
   0ACC CDr4Er17      [17] 2199 	call	_ExplodeEnemies
                           2200 ;src/main.c:756: GameOver();
   0ACF CDrF5r1B      [17] 2201 	call	_GameOver
   0AD2 C3rBBr0B      [10] 2202 	jp	00118$
   0AD5                    2203 00115$:
                           2204 ;src/main.c:760: else if (shot.active == TRUE)
   0AD5 3Ar69r00      [13] 2205 	ld	a, (#(_shot + 0x0005) + 0)
   0AD8 3D            [ 4] 2206 	dec	a
   0AD9 C2rBBr0B      [10] 2207 	jp	NZ,00118$
                           2208 ;src/main.c:762: if ((shot.x + SHOT_W) > (pSpr->x + 1) && shot.x < (pSpr->x + SHOT_W))
   0ADC 21r64r00      [10] 2209 	ld	hl, #_shot + 0
   0ADF 4E            [ 7] 2210 	ld	c, (hl)
   0AE0 06 00         [ 7] 2211 	ld	b, #0x00
   0AE2 21 04 00      [10] 2212 	ld	hl, #0x0004
   0AE5 09            [11] 2213 	add	hl, bc
   0AE6 DD 5E FA      [19] 2214 	ld	e,-6 (ix)
   0AE9 DD 56 FB      [19] 2215 	ld	d,-5 (ix)
   0AEC 13            [ 6] 2216 	inc	de
   0AED 7B            [ 4] 2217 	ld	a, e
   0AEE 95            [ 4] 2218 	sub	a, l
   0AEF 7A            [ 4] 2219 	ld	a, d
   0AF0 9C            [ 4] 2220 	sbc	a, h
   0AF1 E2rF6r0A      [10] 2221 	jp	PO, 00166$
   0AF4 EE 80         [ 7] 2222 	xor	a, #0x80
   0AF6                    2223 00166$:
   0AF6 F2rBBr0B      [10] 2224 	jp	P, 00118$
   0AF9 DD 7E FA      [19] 2225 	ld	a, -6 (ix)
   0AFC C6 04         [ 7] 2226 	add	a, #0x04
   0AFE 5F            [ 4] 2227 	ld	e, a
   0AFF DD 7E FB      [19] 2228 	ld	a, -5 (ix)
   0B02 CE 00         [ 7] 2229 	adc	a, #0x00
   0B04 57            [ 4] 2230 	ld	d, a
   0B05 79            [ 4] 2231 	ld	a, c
   0B06 93            [ 4] 2232 	sub	a, e
   0B07 78            [ 4] 2233 	ld	a, b
   0B08 9A            [ 4] 2234 	sbc	a, d
   0B09 E2r0Er0B      [10] 2235 	jp	PO, 00167$
   0B0C EE 80         [ 7] 2236 	xor	a, #0x80
   0B0E                    2237 00167$:
   0B0E F2rBBr0B      [10] 2238 	jp	P, 00118$
                           2239 ;src/main.c:764: if ((shot.y + SHOT_H) > (pSpr->y - 1) && (shot.y - 1) < (pSpr->y + SHOT_H))
   0B11 21r66r00      [10] 2240 	ld	hl, #_shot + 2
   0B14 4E            [ 7] 2241 	ld	c, (hl)
   0B15 06 00         [ 7] 2242 	ld	b, #0x00
   0B17 21 08 00      [10] 2243 	ld	hl, #0x0008
   0B1A 09            [11] 2244 	add	hl,bc
   0B1B DD 75 FA      [19] 2245 	ld	-6 (ix), l
   0B1E DD 74 FB      [19] 2246 	ld	-5 (ix), h
   0B21 E1            [10] 2247 	pop	hl
   0B22 E5            [11] 2248 	push	hl
   0B23 5E            [ 7] 2249 	ld	e, (hl)
   0B24 16 00         [ 7] 2250 	ld	d, #0x00
   0B26 6B            [ 4] 2251 	ld	l, e
   0B27 62            [ 4] 2252 	ld	h, d
   0B28 2B            [ 6] 2253 	dec	hl
   0B29 7D            [ 4] 2254 	ld	a, l
   0B2A DD 96 FA      [19] 2255 	sub	a, -6 (ix)
   0B2D 7C            [ 4] 2256 	ld	a, h
   0B2E DD 9E FB      [19] 2257 	sbc	a, -5 (ix)
   0B31 E2r36r0B      [10] 2258 	jp	PO, 00168$
   0B34 EE 80         [ 7] 2259 	xor	a, #0x80
   0B36                    2260 00168$:
   0B36 F2rBBr0B      [10] 2261 	jp	P, 00118$
   0B39 0B            [ 6] 2262 	dec	bc
   0B3A 21 08 00      [10] 2263 	ld	hl, #0x0008
   0B3D 19            [11] 2264 	add	hl, de
   0B3E 79            [ 4] 2265 	ld	a, c
   0B3F 95            [ 4] 2266 	sub	a, l
   0B40 78            [ 4] 2267 	ld	a, b
   0B41 9C            [ 4] 2268 	sbc	a, h
   0B42 E2r47r0B      [10] 2269 	jp	PO, 00169$
   0B45 EE 80         [ 7] 2270 	xor	a, #0x80
   0B47                    2271 00169$:
   0B47 F2rBBr0B      [10] 2272 	jp	P, 00118$
                           2273 ;src/main.c:766: cpct_akp_SFXPlay (4, 15, 40, 0, 0, AY_CHANNEL_A); // explosion
   0B4A 3E 01         [ 7] 2274 	ld	a, #0x01
   0B4C F5            [11] 2275 	push	af
   0B4D 33            [ 6] 2276 	inc	sp
   0B4E 21 00 00      [10] 2277 	ld	hl, #0x0000
   0B51 E5            [11] 2278 	push	hl
   0B52 2E 28         [ 7] 2279 	ld	l, #0x28
   0B54 E5            [11] 2280 	push	hl
   0B55 21 04 0F      [10] 2281 	ld	hl, #0x0f04
   0B58 E5            [11] 2282 	push	hl
   0B59 CDr00r00      [17] 2283 	call	_cpct_akp_SFXPlay
   0B5C 21 07 00      [10] 2284 	ld	hl, #7
   0B5F 39            [11] 2285 	add	hl, sp
   0B60 F9            [ 6] 2286 	ld	sp, hl
                           2287 ;src/main.c:769: pSpr->lives--;
   0B61 DD 7E FC      [19] 2288 	ld	a, -4 (ix)
   0B64 C6 09         [ 7] 2289 	add	a, #0x09
   0B66 6F            [ 4] 2290 	ld	l, a
   0B67 DD 7E FD      [19] 2291 	ld	a, -3 (ix)
   0B6A CE 00         [ 7] 2292 	adc	a, #0x00
   0B6C 67            [ 4] 2293 	ld	h, a
   0B6D 4E            [ 7] 2294 	ld	c, (hl)
   0B6E 0D            [ 4] 2295 	dec	c
   0B6F 71            [ 7] 2296 	ld	(hl), c
                           2297 ;src/main.c:770: pSpr->touched = 10;
   0B70 DD 7E FC      [19] 2298 	ld	a, -4 (ix)
   0B73 C6 0A         [ 7] 2299 	add	a, #0x0a
   0B75 6F            [ 4] 2300 	ld	l, a
   0B76 DD 7E FD      [19] 2301 	ld	a, -3 (ix)
   0B79 CE 00         [ 7] 2302 	adc	a, #0x00
   0B7B 67            [ 4] 2303 	ld	h, a
   0B7C 36 0A         [10] 2304 	ld	(hl), #0x0a
                           2305 ;src/main.c:771: pSpr->status = S_touched;
   0B7E DD 7E FC      [19] 2306 	ld	a, -4 (ix)
   0B81 C6 04         [ 7] 2307 	add	a, #0x04
   0B83 6F            [ 4] 2308 	ld	l, a
   0B84 DD 7E FD      [19] 2309 	ld	a, -3 (ix)
   0B87 CE 00         [ 7] 2310 	adc	a, #0x00
   0B89 67            [ 4] 2311 	ld	h, a
   0B8A 36 08         [10] 2312 	ld	(hl), #0x08
                           2313 ;src/main.c:772: shot.active = FALSE;
   0B8C 21r69r00      [10] 2314 	ld	hl, #(_shot + 0x0005)
   0B8F 36 00         [10] 2315 	ld	(hl), #0x00
                           2316 ;src/main.c:775: score += 25;
   0B91 21r00r00      [10] 2317 	ld	hl, #_score
   0B94 7E            [ 7] 2318 	ld	a, (hl)
   0B95 C6 19         [ 7] 2319 	add	a, #0x19
   0B97 77            [ 7] 2320 	ld	(hl), a
   0B98 23            [ 6] 2321 	inc	hl
   0B99 7E            [ 7] 2322 	ld	a, (hl)
   0B9A CE 00         [ 7] 2323 	adc	a, #0x00
   0B9C 77            [ 7] 2324 	ld	(hl), a
                           2325 ;src/main.c:776: if (highScore < score) highScore = score;
   0B9D 21r00r00      [10] 2326 	ld	hl, #_score
   0BA0 FD 21r02r00   [14] 2327 	ld	iy, #_highScore
   0BA4 FD 7E 00      [19] 2328 	ld	a, 0 (iy)
   0BA7 96            [ 7] 2329 	sub	a, (hl)
   0BA8 FD 7E 01      [19] 2330 	ld	a, 1 (iy)
   0BAB 23            [ 6] 2331 	inc	hl
   0BAC 9E            [ 7] 2332 	sbc	a, (hl)
   0BAD 30 06         [12] 2333 	jr	NC,00105$
   0BAF 2Ar00r00      [16] 2334 	ld	hl, (_score)
   0BB2 22r02r00      [16] 2335 	ld	(_highScore), hl
   0BB5                    2336 00105$:
                           2337 ;src/main.c:778: DeleteShot(&shot);
   0BB5 21r64r00      [10] 2338 	ld	hl, #_shot
   0BB8 CDr32r11      [17] 2339 	call	_DeleteShot
   0BBB                    2340 00118$:
   0BBB DD F9         [10] 2341 	ld	sp, ix
   0BBD DD E1         [14] 2342 	pop	ix
   0BBF C9            [10] 2343 	ret
                           2344 ;src/main.c:797: void AssignFrame(TFrm **anim) __z88dk_fastcall {
                           2345 ;	---------------------------------
                           2346 ; Function AssignFrame
                           2347 ; ---------------------------------
   0BC0                    2348 _AssignFrame::
   0BC0 4D            [ 4] 2349 	ld	c, l
   0BC1 44            [ 4] 2350 	ld	b, h
                           2351 ;src/main.c:798: spr[0].frm = anim[spr[0].nFrm / ANIM_PAUSE];
   0BC2 21r1Fr00      [10] 2352 	ld	hl, #_spr + 7
   0BC5 56            [ 7] 2353 	ld	d, (hl)
   0BC6 C5            [11] 2354 	push	bc
   0BC7 3E 03         [ 7] 2355 	ld	a, #0x03
   0BC9 F5            [11] 2356 	push	af
   0BCA 33            [ 6] 2357 	inc	sp
   0BCB D5            [11] 2358 	push	de
   0BCC 33            [ 6] 2359 	inc	sp
   0BCD CDr00r00      [17] 2360 	call	__divuchar
   0BD0 F1            [10] 2361 	pop	af
   0BD1 C1            [10] 2362 	pop	bc
   0BD2 26 00         [ 7] 2363 	ld	h, #0x00
   0BD4 29            [11] 2364 	add	hl, hl
   0BD5 09            [11] 2365 	add	hl, bc
   0BD6 4E            [ 7] 2366 	ld	c, (hl)
   0BD7 23            [ 6] 2367 	inc	hl
   0BD8 46            [ 7] 2368 	ld	b, (hl)
   0BD9 ED 43r1Dr00   [20] 2369 	ld	((_spr + 0x0005)), bc
   0BDD C9            [10] 2370 	ret
                           2371 ;src/main.c:803: void SelectFrame() {
                           2372 ;	---------------------------------
                           2373 ; Function SelectFrame
                           2374 ; ---------------------------------
   0BDE                    2375 _SelectFrame::
                           2376 ;src/main.c:805: switch(spr[0].status) {
   0BDE 21r1Cr00      [10] 2377 	ld	hl, #(_spr + 0x0004) + 0
   0BE1 4E            [ 7] 2378 	ld	c, (hl)
                           2379 ;src/main.c:806: case S_stopped:			{spr[0].frm = &frm_player[0]; break;}
                           2380 ;src/main.c:805: switch(spr[0].status) {
   0BE2 3E 07         [ 7] 2381 	ld	a, #0x07
   0BE4 91            [ 4] 2382 	sub	a, c
   0BE5 38 5F         [12] 2383 	jr	C,00109$
   0BE7 06 00         [ 7] 2384 	ld	b, #0x00
   0BE9 21rF0r0B      [10] 2385 	ld	hl, #00127$
   0BEC 09            [11] 2386 	add	hl, bc
   0BED 09            [11] 2387 	add	hl, bc
   0BEE 09            [11] 2388 	add	hl, bc
   0BEF E9            [ 4] 2389 	jp	(hl)
   0BF0                    2390 00127$:
   0BF0 C3r08r0C      [10] 2391 	jp	00101$
   0BF3 C3r10r0C      [10] 2392 	jp	00102$
   0BF6 C3r20r0C      [10] 2393 	jp	00104$
   0BF9 C3r28r0C      [10] 2394 	jp	00105$
   0BFC C3r18r0C      [10] 2395 	jp	00103$
   0BFF C3r30r0C      [10] 2396 	jp	00106$
   0C02 C3r38r0C      [10] 2397 	jp	00107$
   0C05 C3r40r0C      [10] 2398 	jp	00108$
                           2399 ;src/main.c:806: case S_stopped:			{spr[0].frm = &frm_player[0]; break;}
   0C08                    2400 00101$:
   0C08 21r13r00      [10] 2401 	ld	hl, #_frm_player
   0C0B 22r1Dr00      [16] 2402 	ld	((_spr + 0x0005)), hl
   0C0E 18 36         [12] 2403 	jr	00109$
                           2404 ;src/main.c:807: case S_walking:			{AssignFrame(animWalk); break;}	// 0,1,0,2
   0C10                    2405 00102$:
   0C10 21r2Er00      [10] 2406 	ld	hl, #_animWalk
   0C13 CDrC0r0B      [17] 2407 	call	_AssignFrame
   0C16 18 2E         [12] 2408 	jr	00109$
                           2409 ;src/main.c:808: case S_climbing:		{AssignFrame(animClimb); break;} // 6,7,6,8
   0C18                    2410 00103$:
   0C18 21r36r00      [10] 2411 	ld	hl, #_animClimb
   0C1B CDrC0r0B      [17] 2412 	call	_AssignFrame
   0C1E 18 26         [12] 2413 	jr	00109$
                           2414 ;src/main.c:809: case S_preJump:			{spr[0].frm = &frm_player[1]; break;}
   0C20                    2415 00104$:
   0C20 21r16r00      [10] 2416 	ld	hl, #(_frm_player + 0x0003)
   0C23 22r1Dr00      [16] 2417 	ld	((_spr + 0x0005)), hl
   0C26 18 1E         [12] 2418 	jr	00109$
                           2419 ;src/main.c:810: case S_jumping:			{spr[0].frm = &frm_player[3]; break;}
   0C28                    2420 00105$:
   0C28 21r1Cr00      [10] 2421 	ld	hl, #(_frm_player + 0x0009)
   0C2B 22r1Dr00      [16] 2422 	ld	((_spr + 0x0005)), hl
   0C2E 18 16         [12] 2423 	jr	00109$
                           2424 ;src/main.c:811: case S_falling:			{spr[0].frm = &frm_player[4]; break;}
   0C30                    2425 00106$:
   0C30 21r1Fr00      [10] 2426 	ld	hl, #(_frm_player + 0x000c)
   0C33 22r1Dr00      [16] 2427 	ld	((_spr + 0x0005)), hl
   0C36 18 0E         [12] 2428 	jr	00109$
                           2429 ;src/main.c:812: case S_landing:			{spr[0].frm = &frm_player[1]; break;}
   0C38                    2430 00107$:
   0C38 21r16r00      [10] 2431 	ld	hl, #(_frm_player + 0x0003)
   0C3B 22r1Dr00      [16] 2432 	ld	((_spr + 0x0005)), hl
   0C3E 18 06         [12] 2433 	jr	00109$
                           2434 ;src/main.c:813: case S_firing:			{spr[0].frm = &frm_player[5]; }
   0C40                    2435 00108$:
   0C40 21r22r00      [10] 2436 	ld	hl, #(_frm_player + 0x000f)
   0C43 22r1Dr00      [16] 2437 	ld	((_spr + 0x0005)), hl
                           2438 ;src/main.c:814: }
   0C46                    2439 00109$:
                           2440 ;src/main.c:816: f = spr[0].frm;
   0C46 ED 4Br1Dr00   [20] 2441 	ld	bc, (#(_spr + 0x0005) + 0)
                           2442 ;src/main.c:818: if (f->dir != spr[0].dir && spr[0].status != S_climbing) {
   0C4A 0A            [ 7] 2443 	ld	a, (bc)
   0C4B 5F            [ 4] 2444 	ld	e, a
   0C4C 3Ar20r00      [13] 2445 	ld	a, (#(_spr + 0x0008) + 0)
   0C4F 93            [ 4] 2446 	sub	a, e
   0C50 C8            [11] 2447 	ret	Z
   0C51 3Ar1Cr00      [13] 2448 	ld	a, (#(_spr + 0x0004) + 0)
   0C54 D6 04         [ 7] 2449 	sub	a, #0x04
   0C56 C8            [11] 2450 	ret	Z
                           2451 ;src/main.c:819: cpct_hflipSpriteM0(SPR_W, SPR_H, f->spr);         
   0C57 69            [ 4] 2452 	ld	l, c
   0C58 60            [ 4] 2453 	ld	h, b
   0C59 23            [ 6] 2454 	inc	hl
   0C5A 5E            [ 7] 2455 	ld	e, (hl)
   0C5B 23            [ 6] 2456 	inc	hl
   0C5C 56            [ 7] 2457 	ld	d, (hl)
   0C5D C5            [11] 2458 	push	bc
   0C5E D5            [11] 2459 	push	de
   0C5F 21 08 10      [10] 2460 	ld	hl, #0x1008
   0C62 E5            [11] 2461 	push	hl
   0C63 CDr00r00      [17] 2462 	call	_cpct_hflipSpriteM0
   0C66 C1            [10] 2463 	pop	bc
                           2464 ;src/main.c:820: f->dir = spr[0].dir; // save position to compare with next call
   0C67 3Ar20r00      [13] 2465 	ld	a, (#(_spr + 0x0008) + 0)
   0C6A 02            [ 7] 2466 	ld	(bc), a
   0C6B C9            [10] 2467 	ret
                           2468 ;src/main.c:825: void MoveUp() { 
                           2469 ;	---------------------------------
                           2470 ; Function MoveUp
                           2471 ; ---------------------------------
   0C6C                    2472 _MoveUp::
                           2473 ;src/main.c:826: if (spr[0].y > ORIG_MAP_Y) spr[0].y--;
   0C6C 01r19r00      [10] 2474 	ld	bc, #_spr+1
   0C6F 0A            [ 7] 2475 	ld	a, (bc)
   0C70 B7            [ 4] 2476 	or	a, a
   0C71 C8            [11] 2477 	ret	Z
   0C72 C6 FF         [ 7] 2478 	add	a, #0xff
   0C74 02            [ 7] 2479 	ld	(bc), a
   0C75 C9            [10] 2480 	ret
                           2481 ;src/main.c:830: void MoveDown() {
                           2482 ;	---------------------------------
                           2483 ; Function MoveDown
                           2484 ; ---------------------------------
   0C76                    2485 _MoveDown::
                           2486 ;src/main.c:831: if (spr[0].y + SPR_H < GLOBAL_MAX_Y) spr[0].y++;
   0C76 21r19r00      [10] 2487 	ld	hl, #(_spr + 0x0001) + 0
   0C79 4E            [ 7] 2488 	ld	c, (hl)
   0C7A 59            [ 4] 2489 	ld	e, c
   0C7B 16 00         [ 7] 2490 	ld	d, #0x00
   0C7D 21 10 00      [10] 2491 	ld	hl, #0x0010
   0C80 19            [11] 2492 	add	hl, de
   0C81 11 C0 80      [10] 2493 	ld	de, #0x80c0
   0C84 29            [11] 2494 	add	hl, hl
   0C85 3F            [ 4] 2495 	ccf
   0C86 CB 1C         [ 8] 2496 	rr	h
   0C88 CB 1D         [ 8] 2497 	rr	l
   0C8A ED 52         [15] 2498 	sbc	hl, de
   0C8C D0            [11] 2499 	ret	NC
   0C8D 0C            [ 4] 2500 	inc	c
   0C8E 21r19r00      [10] 2501 	ld	hl, #(_spr + 0x0001)
   0C91 71            [ 7] 2502 	ld	(hl), c
   0C92 C9            [10] 2503 	ret
                           2504 ;src/main.c:835: void MoveLeft() {
                           2505 ;	---------------------------------
                           2506 ; Function MoveLeft
                           2507 ; ---------------------------------
   0C93                    2508 _MoveLeft::
                           2509 ;src/main.c:836: if (spr[0].x > 0) {
   0C93 3Ar18r00      [13] 2510 	ld	a, (#_spr + 0)
   0C96 B7            [ 4] 2511 	or	a, a
   0C97 CArF1r03      [10] 2512 	jp	Z,_MoveLeftMap
                           2513 ;src/main.c:837: if (!FacingWall(spr[0].dir)) {
   0C9A 21r20r00      [10] 2514 	ld	hl, #(_spr + 0x0008) + 0
   0C9D 6E            [ 7] 2515 	ld	l, (hl)
   0C9E CDrA7r04      [17] 2516 	call	_FacingWall
   0CA1 7D            [ 4] 2517 	ld	a, l
   0CA2 B7            [ 4] 2518 	or	a, a
   0CA3 C0            [11] 2519 	ret	NZ
                           2520 ;src/main.c:838: spr[0].x--;
   0CA4 21r18r00      [10] 2521 	ld	hl, #_spr + 0
   0CA7 4E            [ 7] 2522 	ld	c, (hl)
   0CA8 0D            [ 4] 2523 	dec	c
   0CA9 21r18r00      [10] 2524 	ld	hl, #_spr
   0CAC 71            [ 7] 2525 	ld	(hl), c
                           2526 ;src/main.c:839: spr[0].dir = D_left;
   0CAD 21r20r00      [10] 2527 	ld	hl, #(_spr + 0x0008)
   0CB0 36 02         [10] 2528 	ld	(hl), #0x02
   0CB2 C9            [10] 2529 	ret
                           2530 ;src/main.c:843: MoveLeftMap(); 
   0CB3 C3rF1r03      [10] 2531 	jp  _MoveLeftMap
                           2532 ;src/main.c:847: void MoveRight() { 
                           2533 ;	---------------------------------
                           2534 ; Function MoveRight
                           2535 ; ---------------------------------
   0CB6                    2536 _MoveRight::
                           2537 ;src/main.c:848: if (spr[0].x + SPR_W < GLOBAL_MAX_X) {
   0CB6 21r18r00      [10] 2538 	ld	hl, #_spr + 0
   0CB9 4E            [ 7] 2539 	ld	c, (hl)
   0CBA 06 00         [ 7] 2540 	ld	b, #0x00
   0CBC 21 08 00      [10] 2541 	ld	hl, #0x0008
   0CBF 09            [11] 2542 	add	hl, bc
   0CC0 11 50 80      [10] 2543 	ld	de, #0x8050
   0CC3 29            [11] 2544 	add	hl, hl
   0CC4 3F            [ 4] 2545 	ccf
   0CC5 CB 1C         [ 8] 2546 	rr	h
   0CC7 CB 1D         [ 8] 2547 	rr	l
   0CC9 ED 52         [15] 2548 	sbc	hl, de
   0CCB D2rD7r03      [10] 2549 	jp	NC,_MoveRightMap
                           2550 ;src/main.c:849: if (!FacingWall(spr[0].dir)) {
   0CCE 21r20r00      [10] 2551 	ld	hl, #(_spr + 0x0008) + 0
   0CD1 6E            [ 7] 2552 	ld	l, (hl)
   0CD2 CDrA7r04      [17] 2553 	call	_FacingWall
   0CD5 7D            [ 4] 2554 	ld	a, l
   0CD6 B7            [ 4] 2555 	or	a, a
   0CD7 C0            [11] 2556 	ret	NZ
                           2557 ;src/main.c:850: spr[0].x++;
   0CD8 3Ar18r00      [13] 2558 	ld	a, (#_spr + 0)
   0CDB 3C            [ 4] 2559 	inc	a
   0CDC 32r18r00      [13] 2560 	ld	(#_spr),a
                           2561 ;src/main.c:851: spr[0].dir = D_right;
   0CDF 21r20r00      [10] 2562 	ld	hl, #(_spr + 0x0008)
   0CE2 36 03         [10] 2563 	ld	(hl), #0x03
   0CE4 C9            [10] 2564 	ret
                           2565 ;src/main.c:855: MoveRightMap();
   0CE5 C3rD7r03      [10] 2566 	jp  _MoveRightMap
                           2567 ;src/main.c:860: void WalkIn(u8 dir) __z88dk_fastcall {
                           2568 ;	---------------------------------
                           2569 ; Function WalkIn
                           2570 ; ---------------------------------
   0CE8                    2571 _WalkIn::
   0CE8 4D            [ 4] 2572 	ld	c, l
                           2573 ;src/main.c:861: spr[0].nFrm = 0;
   0CE9 21r1Fr00      [10] 2574 	ld	hl, #(_spr + 0x0007)
   0CEC 36 00         [10] 2575 	ld	(hl), #0x00
                           2576 ;src/main.c:862: spr[0].status = S_walking;
   0CEE 21r1Cr00      [10] 2577 	ld	hl, #(_spr + 0x0004)
   0CF1 36 01         [10] 2578 	ld	(hl), #0x01
                           2579 ;src/main.c:863: spr[0].dir = dir;
   0CF3 21r20r00      [10] 2580 	ld	hl, #(_spr + 0x0008)
   0CF6 71            [ 7] 2581 	ld	(hl), c
   0CF7 C9            [10] 2582 	ret
                           2583 ;src/main.c:868: void ClimbIn() {
                           2584 ;	---------------------------------
                           2585 ; Function ClimbIn
                           2586 ; ---------------------------------
   0CF8                    2587 _ClimbIn::
                           2588 ;src/main.c:869: spr[0].nFrm = 0;
   0CF8 21r1Fr00      [10] 2589 	ld	hl, #(_spr + 0x0007)
   0CFB 36 00         [10] 2590 	ld	(hl), #0x00
                           2591 ;src/main.c:870: spr[0].status = S_climbing;
   0CFD 21r1Cr00      [10] 2592 	ld	hl, #(_spr + 0x0004)
   0D00 36 04         [10] 2593 	ld	(hl), #0x04
   0D02 C9            [10] 2594 	ret
                           2595 ;src/main.c:875: void PreJumpIn() {
                           2596 ;	---------------------------------
                           2597 ; Function PreJumpIn
                           2598 ; ---------------------------------
   0D03                    2599 _PreJumpIn::
                           2600 ;src/main.c:876: spr[0].nFrm = 0;
   0D03 21r1Fr00      [10] 2601 	ld	hl, #(_spr + 0x0007)
   0D06 36 00         [10] 2602 	ld	(hl), #0x00
                           2603 ;src/main.c:877: spr[0].status = S_preJump;
   0D08 21r1Cr00      [10] 2604 	ld	hl, #(_spr + 0x0004)
   0D0B 36 02         [10] 2605 	ld	(hl), #0x02
   0D0D C9            [10] 2606 	ret
                           2607 ;src/main.c:882: void FallIn() {
                           2608 ;	---------------------------------
                           2609 ; Function FallIn
                           2610 ; ---------------------------------
   0D0E                    2611 _FallIn::
                           2612 ;src/main.c:883: spr[0].status = S_falling;
   0D0E 21r1Cr00      [10] 2613 	ld	hl, #(_spr + 0x0004)
   0D11 36 05         [10] 2614 	ld	(hl), #0x05
                           2615 ;src/main.c:884: spr[0].jump  = JUMP_STEPS - 3;
   0D13 21r23r00      [10] 2616 	ld	hl, #(_spr + 0x000b)
   0D16 36 09         [10] 2617 	ld	(hl), #0x09
   0D18 C9            [10] 2618 	ret
                           2619 ;src/main.c:889: void LandIn() {
                           2620 ;	---------------------------------
                           2621 ; Function LandIn
                           2622 ; ---------------------------------
   0D19                    2623 _LandIn::
                           2624 ;src/main.c:890: spr[0].nFrm = 0;
   0D19 21r1Fr00      [10] 2625 	ld	hl, #(_spr + 0x0007)
   0D1C 36 00         [10] 2626 	ld	(hl), #0x00
                           2627 ;src/main.c:891: spr[0].status = S_landing;
   0D1E 21r1Cr00      [10] 2628 	ld	hl, #(_spr + 0x0004)
   0D21 36 06         [10] 2629 	ld	(hl), #0x06
   0D23 C9            [10] 2630 	ret
                           2631 ;src/main.c:896: void PreShotIn() 
                           2632 ;	---------------------------------
                           2633 ; Function PreShotIn
                           2634 ; ---------------------------------
   0D24                    2635 _PreShotIn::
                           2636 ;src/main.c:898: if (shot.active == FALSE && ammo != 0) { // if enough ammo and no shot active on screen
   0D24 01r69r00      [10] 2637 	ld	bc, #_shot + 5
   0D27 0A            [ 7] 2638 	ld	a, (bc)
   0D28 B7            [ 4] 2639 	or	a, a
   0D29 C0            [11] 2640 	ret	NZ
   0D2A FD 21r04r00   [14] 2641 	ld	iy, #_ammo
   0D2E FD 7E 00      [19] 2642 	ld	a, 0 (iy)
   0D31 B7            [ 4] 2643 	or	a, a
   0D32 C8            [11] 2644 	ret	Z
                           2645 ;src/main.c:899: shot.active = TRUE;
   0D33 3E 01         [ 7] 2646 	ld	a, #0x01
   0D35 02            [ 7] 2647 	ld	(bc), a
                           2648 ;src/main.c:900: shot.dir = spr[0].dir; // the direction of the shot is that of the player
   0D36 01r67r00      [10] 2649 	ld	bc, #_shot + 3
   0D39 3Ar20r00      [13] 2650 	ld	a, (#_spr + 8)
   0D3C 02            [ 7] 2651 	ld	(bc), a
                           2652 ;src/main.c:901: ammo--; // subtract a bullet from the available ammunition		
   0D3D FD 35 00      [23] 2653 	dec	0 (iy)
                           2654 ;src/main.c:902: shot.y = spr[0].y + 5; // adjusts to the player's height
   0D40 11r66r00      [10] 2655 	ld	de, #_shot + 2
   0D43 3Ar19r00      [13] 2656 	ld	a, (#_spr + 1)
   0D46 C6 05         [ 7] 2657 	add	a, #0x05
   0D48 12            [ 7] 2658 	ld	(de), a
                           2659 ;src/main.c:905: if (shot.dir == D_right)
   0D49 0A            [ 7] 2660 	ld	a, (bc)
   0D4A 5F            [ 4] 2661 	ld	e, a
                           2662 ;src/main.c:906: shot.x = shot.px = spr[0].x + SPR_W;
   0D4B 01r65r00      [10] 2663 	ld	bc, #_shot + 1
   0D4E 21r18r00      [10] 2664 	ld	hl, #_spr + 0
   0D51 56            [ 7] 2665 	ld	d, (hl)
                           2666 ;src/main.c:905: if (shot.dir == D_right)
   0D52 7B            [ 4] 2667 	ld	a, e
   0D53 D6 03         [ 7] 2668 	sub	a, #0x03
   0D55 20 09         [12] 2669 	jr	NZ,00102$
                           2670 ;src/main.c:906: shot.x = shot.px = spr[0].x + SPR_W;
   0D57 7A            [ 4] 2671 	ld	a, d
   0D58 C6 08         [ 7] 2672 	add	a, #0x08
   0D5A 02            [ 7] 2673 	ld	(bc), a
   0D5B 32r64r00      [13] 2674 	ld	(#_shot),a
   0D5E 18 07         [12] 2675 	jr	00103$
   0D60                    2676 00102$:
                           2677 ;src/main.c:908: shot.x = shot.px = spr[0].x - SHOT_W;
   0D60 7A            [ 4] 2678 	ld	a, d
   0D61 C6 FC         [ 7] 2679 	add	a, #0xfc
   0D63 02            [ 7] 2680 	ld	(bc), a
   0D64 32r64r00      [13] 2681 	ld	(#_shot),a
   0D67                    2682 00103$:
                           2683 ;src/main.c:910: shot.status = spr[0].status; // backup player status before shooting
   0D67 01r1Cr00      [10] 2684 	ld	bc, #_spr + 4
   0D6A 0A            [ 7] 2685 	ld	a, (bc)
   0D6B 32r68r00      [13] 2686 	ld	(#(_shot + 0x0004)),a
                           2687 ;src/main.c:911: spr[0].status = S_firing;
   0D6E 3E 07         [ 7] 2688 	ld	a, #0x07
   0D70 02            [ 7] 2689 	ld	(bc), a
                           2690 ;src/main.c:912: cpct_akp_SFXPlay(2, 15, 40, 0, 0, AY_CHANNEL_A); // laser
   0D71 3E 01         [ 7] 2691 	ld	a, #0x01
   0D73 F5            [11] 2692 	push	af
   0D74 33            [ 6] 2693 	inc	sp
   0D75 21 00 00      [10] 2694 	ld	hl, #0x0000
   0D78 E5            [11] 2695 	push	hl
   0D79 2E 28         [ 7] 2696 	ld	l, #0x28
   0D7B E5            [11] 2697 	push	hl
   0D7C 21 02 0F      [10] 2698 	ld	hl, #0x0f02
   0D7F E5            [11] 2699 	push	hl
   0D80 CDr00r00      [17] 2700 	call	_cpct_akp_SFXPlay
   0D83 21 07 00      [10] 2701 	ld	hl, #7
   0D86 39            [11] 2702 	add	hl, sp
   0D87 F9            [ 6] 2703 	ld	sp, hl
   0D88 C9            [10] 2704 	ret
                           2705 ;src/main.c:918: void Falling() {
                           2706 ;	---------------------------------
                           2707 ; Function Falling
                           2708 ; ---------------------------------
   0D89                    2709 _Falling::
                           2710 ;src/main.c:919: cpct_scanKeyboard_f(); // check the pressed keys
   0D89 CDr00r00      [17] 2711 	call	_cpct_scanKeyboard_f
                           2712 ;src/main.c:921: if(cpct_isKeyPressed(ctlDown)) CheckObjects();
   0D8C 2Ar0Ar00      [16] 2713 	ld	hl, (_ctlDown)
   0D8F CDr00r00      [17] 2714 	call	_cpct_isKeyPressed
   0D92 7D            [ 4] 2715 	ld	a, l
   0D93 B7            [ 4] 2716 	or	a, a
   0D94 28 05         [12] 2717 	jr	Z,00110$
   0D96 CDr79r06      [17] 2718 	call	_CheckObjects
   0D99 18 2B         [12] 2719 	jr	00111$
   0D9B                    2720 00110$:
                           2721 ;src/main.c:922: else if (cpct_isKeyPressed(ctlFire)) PreShotIn();
   0D9B 2Ar10r00      [16] 2722 	ld	hl, (_ctlFire)
   0D9E CDr00r00      [17] 2723 	call	_cpct_isKeyPressed
   0DA1 7D            [ 4] 2724 	ld	a, l
   0DA2 B7            [ 4] 2725 	or	a, a
   0DA3 28 05         [12] 2726 	jr	Z,00107$
   0DA5 CDr24r0D      [17] 2727 	call	_PreShotIn
   0DA8 18 1C         [12] 2728 	jr	00111$
   0DAA                    2729 00107$:
                           2730 ;src/main.c:923: else if (cpct_isKeyPressed(ctlLeft)) MoveLeft();
   0DAA 2Ar0Cr00      [16] 2731 	ld	hl, (_ctlLeft)
   0DAD CDr00r00      [17] 2732 	call	_cpct_isKeyPressed
   0DB0 7D            [ 4] 2733 	ld	a, l
   0DB1 B7            [ 4] 2734 	or	a, a
   0DB2 28 05         [12] 2735 	jr	Z,00104$
   0DB4 CDr93r0C      [17] 2736 	call	_MoveLeft
   0DB7 18 0D         [12] 2737 	jr	00111$
   0DB9                    2738 00104$:
                           2739 ;src/main.c:924: else if (cpct_isKeyPressed(ctlRight)) MoveRight();
   0DB9 2Ar0Er00      [16] 2740 	ld	hl, (_ctlRight)
   0DBC CDr00r00      [17] 2741 	call	_cpct_isKeyPressed
   0DBF 7D            [ 4] 2742 	ld	a, l
   0DC0 B7            [ 4] 2743 	or	a, a
   0DC1 28 03         [12] 2744 	jr	Z,00111$
   0DC3 CDrB6r0C      [17] 2745 	call	_MoveRight
   0DC6                    2746 00111$:
                           2747 ;src/main.c:927: spr[0].y += cpct_get2Bits(g_jumpTable, spr[0].jump);	
   0DC6 21r19r00      [10] 2748 	ld	hl, #(_spr + 0x0001) + 0
   0DC9 4E            [ 7] 2749 	ld	c, (hl)
   0DCA 21r23r00      [10] 2750 	ld	hl, #(_spr + 0x000b) + 0
   0DCD 5E            [ 7] 2751 	ld	e, (hl)
   0DCE 16 00         [ 7] 2752 	ld	d, #0x00
   0DD0 C5            [11] 2753 	push	bc
   0DD1 D5            [11] 2754 	push	de
   0DD2 21r5Cr00      [10] 2755 	ld	hl, #_g_jumpTable
   0DD5 E5            [11] 2756 	push	hl
   0DD6 CDr00r00      [17] 2757 	call	_cpct_get2Bits
   0DD9 C1            [10] 2758 	pop	bc
   0DDA 79            [ 4] 2759 	ld	a, c
   0DDB 85            [ 4] 2760 	add	a, l
   0DDC 32r19r00      [13] 2761 	ld	(#(_spr + 0x0001)),a
                           2762 ;src/main.c:928: if (spr[0].jump > 1) spr[0].jump--;
   0DDF 21r23r00      [10] 2763 	ld	hl, #(_spr + 0x000b) + 0
   0DE2 4E            [ 7] 2764 	ld	c, (hl)
   0DE3 3E 01         [ 7] 2765 	ld	a, #0x01
   0DE5 91            [ 4] 2766 	sub	a, c
   0DE6 30 05         [12] 2767 	jr	NC,00113$
   0DE8 0D            [ 4] 2768 	dec	c
   0DE9 21r23r00      [10] 2769 	ld	hl, #(_spr + 0x000b)
   0DEC 71            [ 7] 2770 	ld	(hl), c
   0DED                    2771 00113$:
                           2772 ;src/main.c:930: if (OnPlatform(&spr[0]) || OnStairs()) { // if the player is on a platform ...
   0DED 21r18r00      [10] 2773 	ld	hl, #_spr
   0DF0 CDr45r04      [17] 2774 	call	_OnPlatform
   0DF3 7D            [ 4] 2775 	ld	a, l
   0DF4 B7            [ 4] 2776 	or	a, a
   0DF5 20 06         [12] 2777 	jr	NZ,00114$
   0DF7 CDr5Fr04      [17] 2778 	call	_OnStairs
   0DFA 7D            [ 4] 2779 	ld	a, l
   0DFB B7            [ 4] 2780 	or	a, a
   0DFC C8            [11] 2781 	ret	Z
                           2782 ;src/main.c:931: while ((spr[0].y + 1) % 4 != 0) spr[0].y--; // adjust to the ground			
   0DFD                    2783 00114$:
                           2784 ;src/main.c:927: spr[0].y += cpct_get2Bits(g_jumpTable, spr[0].jump);	
   0DFD 21r19r00      [10] 2785 	ld	hl, #(_spr + 0x0001) + 0
   0E00 4E            [ 7] 2786 	ld	c, (hl)
                           2787 ;src/main.c:931: while ((spr[0].y + 1) % 4 != 0) spr[0].y--; // adjust to the ground			
   0E01 59            [ 4] 2788 	ld	e, c
   0E02 16 00         [ 7] 2789 	ld	d, #0x00
   0E04 13            [ 6] 2790 	inc	de
   0E05 C5            [11] 2791 	push	bc
   0E06 21 04 00      [10] 2792 	ld	hl, #0x0004
   0E09 E5            [11] 2793 	push	hl
   0E0A D5            [11] 2794 	push	de
   0E0B CDr00r00      [17] 2795 	call	__modsint
   0E0E F1            [10] 2796 	pop	af
   0E0F F1            [10] 2797 	pop	af
   0E10 C1            [10] 2798 	pop	bc
   0E11 7C            [ 4] 2799 	ld	a, h
   0E12 B5            [ 4] 2800 	or	a,l
   0E13 28 07         [12] 2801 	jr	Z,00116$
   0E15 0D            [ 4] 2802 	dec	c
   0E16 21r19r00      [10] 2803 	ld	hl, #(_spr + 0x0001)
   0E19 71            [ 7] 2804 	ld	(hl), c
   0E1A 18 E1         [12] 2805 	jr	00114$
   0E1C                    2806 00116$:
                           2807 ;src/main.c:932: LandIn(); // prepare the landing
   0E1C CDr19r0D      [17] 2808 	call	_LandIn
   0E1F C9            [10] 2809 	ret
                           2810 ;src/main.c:938: void StopIn() {
                           2811 ;	---------------------------------
                           2812 ; Function StopIn
                           2813 ; ---------------------------------
   0E20                    2814 _StopIn::
                           2815 ;src/main.c:939: spr[0].status = S_stopped;
   0E20 21r1Cr00      [10] 2816 	ld	hl, #(_spr + 0x0004)
   0E23 36 00         [10] 2817 	ld	(hl), #0x00
   0E25 C9            [10] 2818 	ret
                           2819 ;src/main.c:944: void Stopped() {
                           2820 ;	---------------------------------
                           2821 ; Function Stopped
                           2822 ; ---------------------------------
   0E26                    2823 _Stopped::
                           2824 ;src/main.c:945: cpct_scanKeyboard_f(); // check the pressed keys
   0E26 CDr00r00      [17] 2825 	call	_cpct_scanKeyboard_f
                           2826 ;src/main.c:946: if(cpct_isKeyPressed(ctlUp)) {
   0E29 2Ar08r00      [16] 2827 	ld	hl, (_ctlUp)
   0E2C CDr00r00      [17] 2828 	call	_cpct_isKeyPressed
   0E2F 7D            [ 4] 2829 	ld	a, l
   0E30 B7            [ 4] 2830 	or	a, a
   0E31 28 0B         [12] 2831 	jr	Z,00134$
                           2832 ;src/main.c:947: if(OnStairs()) ClimbIn(); // going to climb a ladder
   0E33 CDr5Fr04      [17] 2833 	call	_OnStairs
   0E36 7D            [ 4] 2834 	ld	a, l
   0E37 B7            [ 4] 2835 	or	a, a
   0E38 C2rF8r0C      [10] 2836 	jp	NZ,_ClimbIn
                           2837 ;src/main.c:948: else PreJumpIn(); // going to jump
   0E3B C3r03r0D      [10] 2838 	jp  _PreJumpIn
   0E3E                    2839 00134$:
                           2840 ;src/main.c:950: else if(cpct_isKeyPressed(ctlDown)) {
   0E3E 2Ar0Ar00      [16] 2841 	ld	hl, (_ctlDown)
   0E41 CDr00r00      [17] 2842 	call	_cpct_isKeyPressed
   0E44 7D            [ 4] 2843 	ld	a, l
   0E45 B7            [ 4] 2844 	or	a, a
   0E46 28 0B         [12] 2845 	jr	Z,00131$
                           2846 ;src/main.c:951: if(OnStairs()) ClimbIn(); // going down a ladder
   0E48 CDr5Fr04      [17] 2847 	call	_OnStairs
   0E4B 7D            [ 4] 2848 	ld	a, l
   0E4C B7            [ 4] 2849 	or	a, a
   0E4D C2rF8r0C      [10] 2850 	jp	NZ,_ClimbIn
                           2851 ;src/main.c:952: else CheckObjects(); // going to grab / drop an object (if it is on an object)
   0E50 C3r79r06      [10] 2852 	jp  _CheckObjects
   0E53                    2853 00131$:
                           2854 ;src/main.c:954: else if(cpct_isKeyPressed(ctlLeft)) WalkIn(D_left);
   0E53 2Ar0Cr00      [16] 2855 	ld	hl, (_ctlLeft)
   0E56 CDr00r00      [17] 2856 	call	_cpct_isKeyPressed
   0E59 7D            [ 4] 2857 	ld	a, l
   0E5A B7            [ 4] 2858 	or	a, a
   0E5B 28 05         [12] 2859 	jr	Z,00128$
   0E5D 2E 02         [ 7] 2860 	ld	l, #0x02
   0E5F C3rE8r0C      [10] 2861 	jp  _WalkIn
   0E62                    2862 00128$:
                           2863 ;src/main.c:955: else if(cpct_isKeyPressed(ctlRight)) WalkIn(D_right);
   0E62 2Ar0Er00      [16] 2864 	ld	hl, (_ctlRight)
   0E65 CDr00r00      [17] 2865 	call	_cpct_isKeyPressed
   0E68 7D            [ 4] 2866 	ld	a, l
   0E69 B7            [ 4] 2867 	or	a, a
   0E6A 28 05         [12] 2868 	jr	Z,00125$
   0E6C 2E 03         [ 7] 2869 	ld	l, #0x03
   0E6E C3rE8r0C      [10] 2870 	jp  _WalkIn
   0E71                    2871 00125$:
                           2872 ;src/main.c:956: else if(cpct_isKeyPressed(ctlFire)) PreShotIn();
   0E71 2Ar10r00      [16] 2873 	ld	hl, (_ctlFire)
   0E74 CDr00r00      [17] 2874 	call	_cpct_isKeyPressed
   0E77 7D            [ 4] 2875 	ld	a, l
   0E78 B7            [ 4] 2876 	or	a, a
   0E79 C2r24r0D      [10] 2877 	jp	NZ,_PreShotIn
                           2878 ;src/main.c:958: else if(cpct_isKeyPressed(ctlAbort)) {
   0E7C 2Ar14r00      [16] 2879 	ld	hl, (_ctlAbort)
   0E7F CDr00r00      [17] 2880 	call	_cpct_isKeyPressed
   0E82 7D            [ 4] 2881 	ld	a, l
   0E83 B7            [ 4] 2882 	or	a, a
   0E84 28 0E         [12] 2883 	jr	Z,00119$
                           2884 ;src/main.c:959: spr[0].lives = 0; 
   0E86 21r21r00      [10] 2885 	ld	hl, #(_spr + 0x0009)
   0E89 36 00         [10] 2886 	ld	(hl), #0x00
                           2887 ;src/main.c:960: ExplodePlayer();
   0E8B CDrDEr10      [17] 2888 	call	_ExplodePlayer
                           2889 ;src/main.c:961: ExplodeEnemies();
   0E8E CDr4Er17      [17] 2890 	call	_ExplodeEnemies
                           2891 ;src/main.c:962: GameOver();
   0E91 C3rF5r1B      [10] 2892 	jp  _GameOver
   0E94                    2893 00119$:
                           2894 ;src/main.c:965: else if(cpct_isKeyPressed(ctlMusic)) {
   0E94 2Ar12r00      [16] 2895 	ld	hl, (_ctlMusic)
   0E97 CDr00r00      [17] 2896 	call	_cpct_isKeyPressed
   0E9A 7D            [ 4] 2897 	ld	a, l
   0E9B B7            [ 4] 2898 	or	a, a
   0E9C 28 2B         [12] 2899 	jr	Z,00116$
                           2900 ;src/main.c:966: Wait4Key(ctlMusic);
   0E9E 2Ar12r00      [16] 2901 	ld	hl, (_ctlMusic)
   0EA1 CDr43r05      [17] 2902 	call	_Wait4Key
                           2903 ;src/main.c:967: if (music == TRUE) { // if the music is playing ...
   0EA4 FD 21r05r00   [14] 2904 	ld	iy, #_music
   0EA8 FD 7E 00      [19] 2905 	ld	a, 0 (iy)
   0EAB 3D            [ 4] 2906 	dec	a
   0EAC 20 0D         [12] 2907 	jr	NZ,00108$
                           2908 ;src/main.c:968: music = FALSE;
   0EAE FD 36 00 00   [19] 2909 	ld	0 (iy), #0x00
                           2910 ;src/main.c:969: cpct_akp_musicInit(FX);
   0EB2 21r00r00      [10] 2911 	ld	hl, #_FX
   0EB5 E5            [11] 2912 	push	hl
   0EB6 CDr00r00      [17] 2913 	call	_cpct_akp_musicInit
   0EB9 F1            [10] 2914 	pop	af
   0EBA C9            [10] 2915 	ret
   0EBB                    2916 00108$:
                           2917 ;src/main.c:972: music = TRUE;			
   0EBB 21r05r00      [10] 2918 	ld	hl,#_music + 0
   0EBE 36 01         [10] 2919 	ld	(hl), #0x01
                           2920 ;src/main.c:973: cpct_akp_musicInit(Ingame1);
   0EC0 21r00r00      [10] 2921 	ld	hl, #_Ingame1
   0EC3 E5            [11] 2922 	push	hl
   0EC4 CDr00r00      [17] 2923 	call	_cpct_akp_musicInit
   0EC7 F1            [10] 2924 	pop	af
   0EC8 C9            [10] 2925 	ret
   0EC9                    2926 00116$:
                           2927 ;src/main.c:977: else if(cpct_isKeyPressed(ctlPause)) {
   0EC9 2Ar16r00      [16] 2928 	ld	hl, (_ctlPause)
   0ECC CDr00r00      [17] 2929 	call	_cpct_isKeyPressed
   0ECF 7D            [ 4] 2930 	ld	a, l
   0ED0 B7            [ 4] 2931 	or	a, a
   0ED1 C8            [11] 2932 	ret	Z
                           2933 ;src/main.c:978: Wait4Key(ctlPause);
   0ED2 2Ar16r00      [16] 2934 	ld	hl, (_ctlPause)
   0ED5 CDr43r05      [17] 2935 	call	_Wait4Key
                           2936 ;src/main.c:979: cpct_akp_musicInit(FX);
   0ED8 21r00r00      [10] 2937 	ld	hl, #_FX
   0EDB E5            [11] 2938 	push	hl
   0EDC CDr00r00      [17] 2939 	call	_cpct_akp_musicInit
   0EDF F1            [10] 2940 	pop	af
                           2941 ;src/main.c:980: while (!cpct_isAnyKeyPressed());
   0EE0                    2942 00110$:
   0EE0 CDr00r00      [17] 2943 	call	_cpct_isAnyKeyPressed
   0EE3 7D            [ 4] 2944 	ld	a, l
   0EE4 B7            [ 4] 2945 	or	a, a
   0EE5 28 F9         [12] 2946 	jr	Z,00110$
                           2947 ;src/main.c:981: Wait4Key(ctlPause);
   0EE7 2Ar16r00      [16] 2948 	ld	hl, (_ctlPause)
   0EEA CDr43r05      [17] 2949 	call	_Wait4Key
                           2950 ;src/main.c:982: cpct_akp_musicInit(Ingame1);
   0EED 21r00r00      [10] 2951 	ld	hl, #_Ingame1
   0EF0 E5            [11] 2952 	push	hl
   0EF1 CDr00r00      [17] 2953 	call	_cpct_akp_musicInit
   0EF4 F1            [10] 2954 	pop	af
   0EF5 C9            [10] 2955 	ret
                           2956 ;src/main.c:988: void JumpIn() {
                           2957 ;	---------------------------------
                           2958 ; Function JumpIn
                           2959 ; ---------------------------------
   0EF6                    2960 _JumpIn::
                           2961 ;src/main.c:989: spr[0].status = S_jumping;
   0EF6 21r1Cr00      [10] 2962 	ld	hl, #(_spr + 0x0004)
   0EF9 36 03         [10] 2963 	ld	(hl), #0x03
                           2964 ;src/main.c:990: spr[0].jump  = 0;
   0EFB 21r23r00      [10] 2965 	ld	hl, #(_spr + 0x000b)
   0EFE 36 00         [10] 2966 	ld	(hl), #0x00
                           2967 ;src/main.c:991: cpct_akp_SFXPlay(3, 15, 32, 0, 0, AY_CHANNEL_C);
   0F00 3E 04         [ 7] 2968 	ld	a, #0x04
   0F02 F5            [11] 2969 	push	af
   0F03 33            [ 6] 2970 	inc	sp
   0F04 21 00 00      [10] 2971 	ld	hl, #0x0000
   0F07 E5            [11] 2972 	push	hl
   0F08 2E 20         [ 7] 2973 	ld	l, #0x20
   0F0A E5            [11] 2974 	push	hl
   0F0B 21 03 0F      [10] 2975 	ld	hl, #0x0f03
   0F0E E5            [11] 2976 	push	hl
   0F0F CDr00r00      [17] 2977 	call	_cpct_akp_SFXPlay
   0F12 21 07 00      [10] 2978 	ld	hl, #7
   0F15 39            [11] 2979 	add	hl, sp
   0F16 F9            [ 6] 2980 	ld	sp, hl
   0F17 C9            [10] 2981 	ret
                           2982 ;src/main.c:995: void Jumping() {
                           2983 ;	---------------------------------
                           2984 ; Function Jumping
                           2985 ; ---------------------------------
   0F18                    2986 _Jumping::
                           2987 ;src/main.c:996: cpct_scanKeyboard_f(); // check the pressed keys
   0F18 CDr00r00      [17] 2988 	call	_cpct_scanKeyboard_f
                           2989 ;src/main.c:997: if(!cpct_isKeyPressed(ctlUp)) FallIn();
   0F1B 2Ar08r00      [16] 2990 	ld	hl, (_ctlUp)
   0F1E CDr00r00      [17] 2991 	call	_cpct_isKeyPressed
   0F21 7D            [ 4] 2992 	ld	a, l
   0F22 B7            [ 4] 2993 	or	a, a
   0F23 20 05         [12] 2994 	jr	NZ,00112$
   0F25 CDr0Er0D      [17] 2995 	call	_FallIn
   0F28 18 38         [12] 2996 	jr	00113$
   0F2A                    2997 00112$:
                           2998 ;src/main.c:999: if (cpct_isKeyPressed(ctlFire)) PreShotIn();
   0F2A 2Ar10r00      [16] 2999 	ld	hl, (_ctlFire)
   0F2D CDr00r00      [17] 3000 	call	_cpct_isKeyPressed
   0F30 7D            [ 4] 3001 	ld	a, l
   0F31 B7            [ 4] 3002 	or	a, a
   0F32 28 03         [12] 3003 	jr	Z,00102$
   0F34 CDr24r0D      [17] 3004 	call	_PreShotIn
   0F37                    3005 00102$:
                           3006 ;src/main.c:1000: if(cpct_isKeyPressed(ctlDown)) CheckObjects();
   0F37 2Ar0Ar00      [16] 3007 	ld	hl, (_ctlDown)
   0F3A CDr00r00      [17] 3008 	call	_cpct_isKeyPressed
   0F3D 7D            [ 4] 3009 	ld	a, l
   0F3E B7            [ 4] 3010 	or	a, a
   0F3F 28 05         [12] 3011 	jr	Z,00109$
   0F41 CDr79r06      [17] 3012 	call	_CheckObjects
   0F44 18 1C         [12] 3013 	jr	00113$
   0F46                    3014 00109$:
                           3015 ;src/main.c:1001: else if (cpct_isKeyPressed(ctlLeft)) MoveLeft();
   0F46 2Ar0Cr00      [16] 3016 	ld	hl, (_ctlLeft)
   0F49 CDr00r00      [17] 3017 	call	_cpct_isKeyPressed
   0F4C 7D            [ 4] 3018 	ld	a, l
   0F4D B7            [ 4] 3019 	or	a, a
   0F4E 28 05         [12] 3020 	jr	Z,00106$
   0F50 CDr93r0C      [17] 3021 	call	_MoveLeft
   0F53 18 0D         [12] 3022 	jr	00113$
   0F55                    3023 00106$:
                           3024 ;src/main.c:1002: else if (cpct_isKeyPressed(ctlRight)) MoveRight();
   0F55 2Ar0Er00      [16] 3025 	ld	hl, (_ctlRight)
   0F58 CDr00r00      [17] 3026 	call	_cpct_isKeyPressed
   0F5B 7D            [ 4] 3027 	ld	a, l
   0F5C B7            [ 4] 3028 	or	a, a
   0F5D 28 03         [12] 3029 	jr	Z,00113$
   0F5F CDrB6r0C      [17] 3030 	call	_MoveRight
   0F62                    3031 00113$:
                           3032 ;src/main.c:1005: spr[0].y -= cpct_get2Bits(g_jumpTable, spr[0].jump);
   0F62 21r19r00      [10] 3033 	ld	hl, #(_spr + 0x0001) + 0
   0F65 4E            [ 7] 3034 	ld	c, (hl)
   0F66 21r23r00      [10] 3035 	ld	hl, #(_spr + 0x000b) + 0
   0F69 5E            [ 7] 3036 	ld	e, (hl)
   0F6A 16 00         [ 7] 3037 	ld	d, #0x00
   0F6C C5            [11] 3038 	push	bc
   0F6D D5            [11] 3039 	push	de
   0F6E 21r5Cr00      [10] 3040 	ld	hl, #_g_jumpTable
   0F71 E5            [11] 3041 	push	hl
   0F72 CDr00r00      [17] 3042 	call	_cpct_get2Bits
   0F75 C1            [10] 3043 	pop	bc
   0F76 79            [ 4] 3044 	ld	a, c
   0F77 95            [ 4] 3045 	sub	a, l
   0F78 32r19r00      [13] 3046 	ld	(#(_spr + 0x0001)),a
                           3047 ;src/main.c:1009: if (++spr[0].jump == JUMP_STEPS)	FallIn();
   0F7B 3Ar23r00      [13] 3048 	ld	a, (#(_spr + 0x000b) + 0)
   0F7E 3C            [ 4] 3049 	inc	a
   0F7F 32r23r00      [13] 3050 	ld	(#(_spr + 0x000b)),a
   0F82 D6 0C         [ 7] 3051 	sub	a, #0x0c
   0F84 C0            [11] 3052 	ret	NZ
   0F85 CDr0Er0D      [17] 3053 	call	_FallIn
   0F88 C9            [10] 3054 	ret
                           3055 ;src/main.c:1013: void PreJump() {
                           3056 ;	---------------------------------
                           3057 ; Function PreJump
                           3058 ; ---------------------------------
   0F89                    3059 _PreJump::
                           3060 ;src/main.c:1014: cpct_scanKeyboard_f(); // check the pressed keys
   0F89 CDr00r00      [17] 3061 	call	_cpct_scanKeyboard_f
                           3062 ;src/main.c:1015: if(cpct_isKeyPressed(ctlUp)) JumpIn();
   0F8C 2Ar08r00      [16] 3063 	ld	hl, (_ctlUp)
   0F8F CDr00r00      [17] 3064 	call	_cpct_isKeyPressed
   0F92 7D            [ 4] 3065 	ld	a, l
   0F93 B7            [ 4] 3066 	or	a, a
   0F94 C2rF6r0E      [10] 3067 	jp	NZ,_JumpIn
                           3068 ;src/main.c:1016: else StopIn();	
   0F97 C3r20r0E      [10] 3069 	jp  _StopIn
                           3070 ;src/main.c:1027: void WalkAnim(u8 dir) __z88dk_fastcall {
                           3071 ;	---------------------------------
                           3072 ; Function WalkAnim
                           3073 ; ---------------------------------
   0F9A                    3074 _WalkAnim::
   0F9A 4D            [ 4] 3075 	ld	c, l
                           3076 ;src/main.c:1028: spr[0].dir  = dir;
   0F9B 21r20r00      [10] 3077 	ld	hl, #(_spr + 0x0008)
   0F9E 71            [ 7] 3078 	ld	(hl), c
                           3079 ;src/main.c:1029: if(++spr[0].nFrm == 4 * ANIM_PAUSE) spr[0].nFrm = 0;
   0F9F 01r1Fr00      [10] 3080 	ld	bc, #_spr + 7
   0FA2 0A            [ 7] 3081 	ld	a, (bc)
   0FA3 3C            [ 4] 3082 	inc	a
   0FA4 02            [ 7] 3083 	ld	(bc), a
   0FA5 D6 0C         [ 7] 3084 	sub	a, #0x0c
   0FA7 C0            [11] 3085 	ret	NZ
   0FA8 AF            [ 4] 3086 	xor	a, a
   0FA9 02            [ 7] 3087 	ld	(bc), a
   0FAA C9            [10] 3088 	ret
                           3089 ;src/main.c:1033: void Walking() {
                           3090 ;	---------------------------------
                           3091 ; Function Walking
                           3092 ; ---------------------------------
   0FAB                    3093 _Walking::
                           3094 ;src/main.c:1034: cpct_scanKeyboard_f(); // check the pressed keys
   0FAB CDr00r00      [17] 3095 	call	_cpct_scanKeyboard_f
                           3096 ;src/main.c:1035: if (cpct_isKeyPressed(ctlUp)) {
   0FAE 2Ar08r00      [16] 3097 	ld	hl, (_ctlUp)
   0FB1 CDr00r00      [17] 3098 	call	_cpct_isKeyPressed
   0FB4 7D            [ 4] 3099 	ld	a, l
   0FB5 B7            [ 4] 3100 	or	a, a
   0FB6 28 11         [12] 3101 	jr	Z,00120$
                           3102 ;src/main.c:1036: if (OnStairs()) ClimbIn(); // going to climb a ladder
   0FB8 CDr5Fr04      [17] 3103 	call	_OnStairs
   0FBB 7D            [ 4] 3104 	ld	a, l
   0FBC B7            [ 4] 3105 	or	a, a
   0FBD 28 05         [12] 3106 	jr	Z,00102$
   0FBF CDrF8r0C      [17] 3107 	call	_ClimbIn
   0FC2 18 5A         [12] 3108 	jr	00121$
   0FC4                    3109 00102$:
                           3110 ;src/main.c:1037: else PreJumpIn(); // going to jump
   0FC4 CDr03r0D      [17] 3111 	call	_PreJumpIn
   0FC7 18 55         [12] 3112 	jr	00121$
   0FC9                    3113 00120$:
                           3114 ;src/main.c:1039: else if (cpct_isKeyPressed(ctlDown)) {
   0FC9 2Ar0Ar00      [16] 3115 	ld	hl, (_ctlDown)
   0FCC CDr00r00      [17] 3116 	call	_cpct_isKeyPressed
   0FCF 7D            [ 4] 3117 	ld	a, l
   0FD0 B7            [ 4] 3118 	or	a, a
   0FD1 28 11         [12] 3119 	jr	Z,00117$
                           3120 ;src/main.c:1040: if (OnStairs()) ClimbIn(); // going down a ladder
   0FD3 CDr5Fr04      [17] 3121 	call	_OnStairs
   0FD6 7D            [ 4] 3122 	ld	a, l
   0FD7 B7            [ 4] 3123 	or	a, a
   0FD8 28 05         [12] 3124 	jr	Z,00105$
   0FDA CDrF8r0C      [17] 3125 	call	_ClimbIn
   0FDD 18 3F         [12] 3126 	jr	00121$
   0FDF                    3127 00105$:
                           3128 ;src/main.c:1041: else CheckObjects(); // going to grab / drop an object (if it is on an object)
   0FDF CDr79r06      [17] 3129 	call	_CheckObjects
   0FE2 18 3A         [12] 3130 	jr	00121$
   0FE4                    3131 00117$:
                           3132 ;src/main.c:1043: else if (cpct_isKeyPressed(ctlFire)) PreShotIn();
   0FE4 2Ar10r00      [16] 3133 	ld	hl, (_ctlFire)
   0FE7 CDr00r00      [17] 3134 	call	_cpct_isKeyPressed
   0FEA 7D            [ 4] 3135 	ld	a, l
   0FEB B7            [ 4] 3136 	or	a, a
   0FEC 28 05         [12] 3137 	jr	Z,00114$
   0FEE CDr24r0D      [17] 3138 	call	_PreShotIn
   0FF1 18 2B         [12] 3139 	jr	00121$
   0FF3                    3140 00114$:
                           3141 ;src/main.c:1044: else if (cpct_isKeyPressed(ctlLeft)) {MoveLeft(); WalkAnim(D_left);}
   0FF3 2Ar0Cr00      [16] 3142 	ld	hl, (_ctlLeft)
   0FF6 CDr00r00      [17] 3143 	call	_cpct_isKeyPressed
   0FF9 7D            [ 4] 3144 	ld	a, l
   0FFA B7            [ 4] 3145 	or	a, a
   0FFB 28 0A         [12] 3146 	jr	Z,00111$
   0FFD CDr93r0C      [17] 3147 	call	_MoveLeft
   1000 2E 02         [ 7] 3148 	ld	l, #0x02
   1002 CDr9Ar0F      [17] 3149 	call	_WalkAnim
   1005 18 17         [12] 3150 	jr	00121$
   1007                    3151 00111$:
                           3152 ;src/main.c:1045: else if (cpct_isKeyPressed(ctlRight)) {MoveRight(); WalkAnim(D_right);}
   1007 2Ar0Er00      [16] 3153 	ld	hl, (_ctlRight)
   100A CDr00r00      [17] 3154 	call	_cpct_isKeyPressed
   100D 7D            [ 4] 3155 	ld	a, l
   100E B7            [ 4] 3156 	or	a, a
   100F 28 0A         [12] 3157 	jr	Z,00108$
   1011 CDrB6r0C      [17] 3158 	call	_MoveRight
   1014 2E 03         [ 7] 3159 	ld	l, #0x03
   1016 CDr9Ar0F      [17] 3160 	call	_WalkAnim
   1019 18 03         [12] 3161 	jr	00121$
   101B                    3162 00108$:
                           3163 ;src/main.c:1046: else StopIn();
   101B CDr20r0E      [17] 3164 	call	_StopIn
   101E                    3165 00121$:
                           3166 ;src/main.c:1048: if (!OnPlatform(&spr[0])) // if it is not on a platform, it is also falling
   101E 21r18r00      [10] 3167 	ld	hl, #_spr
   1021 CDr45r04      [17] 3168 	call	_OnPlatform
   1024 7D            [ 4] 3169 	ld	a, l
   1025 B7            [ 4] 3170 	or	a, a
   1026 C0            [11] 3171 	ret	NZ
                           3172 ;src/main.c:1049: FallIn();
   1027 C3r0Er0D      [10] 3173 	jp  _FallIn
                           3174 ;src/main.c:1053: void Climbing() {
                           3175 ;	---------------------------------
                           3176 ; Function Climbing
                           3177 ; ---------------------------------
   102A                    3178 _Climbing::
                           3179 ;src/main.c:1054: cpct_scanKeyboard_f(); // check the pressed keys
   102A CDr00r00      [17] 3180 	call	_cpct_scanKeyboard_f
                           3181 ;src/main.c:1055: if(cpct_isKeyPressed(ctlUp)) {
   102D 2Ar08r00      [16] 3182 	ld	hl, (_ctlUp)
   1030 CDr00r00      [17] 3183 	call	_cpct_isKeyPressed
   1033 7D            [ 4] 3184 	ld	a, l
   1034 B7            [ 4] 3185 	or	a, a
   1035 28 0E         [12] 3186 	jr	Z,00120$
                           3187 ;src/main.c:1056: if(OnStairs()) {MoveUp(); WalkAnim(D_right);} 
   1037 CDr5Fr04      [17] 3188 	call	_OnStairs
   103A 7D            [ 4] 3189 	ld	a, l
   103B B7            [ 4] 3190 	or	a, a
   103C C8            [11] 3191 	ret	Z
   103D CDr6Cr0C      [17] 3192 	call	_MoveUp
   1040 2E 03         [ 7] 3193 	ld	l, #0x03
   1042 C3r9Ar0F      [10] 3194 	jp  _WalkAnim
   1045                    3195 00120$:
                           3196 ;src/main.c:1058: else if(cpct_isKeyPressed(ctlDown))	{
   1045 2Ar0Ar00      [16] 3197 	ld	hl, (_ctlDown)
   1048 CDr00r00      [17] 3198 	call	_cpct_isKeyPressed
   104B 7D            [ 4] 3199 	ld	a, l
   104C B7            [ 4] 3200 	or	a, a
   104D 28 0E         [12] 3201 	jr	Z,00117$
                           3202 ;src/main.c:1059: if(OnStairs()) {MoveDown(); WalkAnim(D_right);}
   104F CDr5Fr04      [17] 3203 	call	_OnStairs
   1052 7D            [ 4] 3204 	ld	a, l
   1053 B7            [ 4] 3205 	or	a, a
   1054 C8            [11] 3206 	ret	Z
   1055 CDr76r0C      [17] 3207 	call	_MoveDown
   1058 2E 03         [ 7] 3208 	ld	l, #0x03
   105A C3r9Ar0F      [10] 3209 	jp  _WalkAnim
   105D                    3210 00117$:
                           3211 ;src/main.c:1061: else if(cpct_isKeyPressed(ctlLeft)) {
   105D 2Ar0Cr00      [16] 3212 	ld	hl, (_ctlLeft)
   1060 CDr00r00      [17] 3213 	call	_cpct_isKeyPressed
   1063 7D            [ 4] 3214 	ld	a, l
   1064 B7            [ 4] 3215 	or	a, a
   1065 28 15         [12] 3216 	jr	Z,00114$
                           3217 ;src/main.c:1062: if(OnStairs()) {MoveLeft(); WalkAnim(D_left);} 
   1067 CDr5Fr04      [17] 3218 	call	_OnStairs
   106A 7D            [ 4] 3219 	ld	a, l
   106B B7            [ 4] 3220 	or	a, a
   106C 28 08         [12] 3221 	jr	Z,00106$
   106E CDr93r0C      [17] 3222 	call	_MoveLeft
   1071 2E 02         [ 7] 3223 	ld	l, #0x02
   1073 C3r9Ar0F      [10] 3224 	jp  _WalkAnim
   1076                    3225 00106$:
                           3226 ;src/main.c:1063: else spr[0].status = S_walking;
   1076 21r1Cr00      [10] 3227 	ld	hl, #(_spr + 0x0004)
   1079 36 01         [10] 3228 	ld	(hl), #0x01
   107B C9            [10] 3229 	ret
   107C                    3230 00114$:
                           3231 ;src/main.c:1065: else if(cpct_isKeyPressed(ctlRight)) {
   107C 2Ar0Er00      [16] 3232 	ld	hl, (_ctlRight)
   107F CDr00r00      [17] 3233 	call	_cpct_isKeyPressed
   1082 7D            [ 4] 3234 	ld	a, l
   1083 B7            [ 4] 3235 	or	a, a
   1084 C8            [11] 3236 	ret	Z
                           3237 ;src/main.c:1066: if(OnStairs()) {MoveRight(); WalkAnim(D_right);} 
   1085 CDr5Fr04      [17] 3238 	call	_OnStairs
   1088 7D            [ 4] 3239 	ld	a, l
   1089 B7            [ 4] 3240 	or	a, a
   108A 28 08         [12] 3241 	jr	Z,00109$
   108C CDrB6r0C      [17] 3242 	call	_MoveRight
   108F 2E 03         [ 7] 3243 	ld	l, #0x03
   1091 C3r9Ar0F      [10] 3244 	jp  _WalkAnim
   1094                    3245 00109$:
                           3246 ;src/main.c:1067: else spr[0].status = S_walking;
   1094 21r1Cr00      [10] 3247 	ld	hl, #(_spr + 0x0004)
   1097 36 01         [10] 3248 	ld	(hl), #0x01
   1099 C9            [10] 3249 	ret
                           3250 ;src/main.c:1073: void RunStatus() {
                           3251 ;	---------------------------------
                           3252 ; Function RunStatus
                           3253 ; ---------------------------------
   109A                    3254 _RunStatus::
                           3255 ;src/main.c:1074: switch(spr[0].status) {
   109A 01r1Cr00      [10] 3256 	ld	bc, #_spr+4
   109D 0A            [ 7] 3257 	ld	a, (bc)
   109E 5F            [ 4] 3258 	ld	e, a
   109F 3E 07         [ 7] 3259 	ld	a, #0x07
   10A1 93            [ 4] 3260 	sub	a, e
   10A2 D8            [11] 3261 	ret	C
   10A3 16 00         [ 7] 3262 	ld	d, #0x00
   10A5 21rACr10      [10] 3263 	ld	hl, #00117$
   10A8 19            [11] 3264 	add	hl, de
   10A9 19            [11] 3265 	add	hl, de
   10AA 19            [11] 3266 	add	hl, de
   10AB E9            [ 4] 3267 	jp	(hl)
   10AC                    3268 00117$:
   10AC C3r26r0E      [10] 3269 	jp	_Stopped
   10AF C3rABr0F      [10] 3270 	jp	_Walking
   10B2 C3r89r0F      [10] 3271 	jp	_PreJump
   10B5 C3r18r0F      [10] 3272 	jp	_Jumping
   10B8 C3r2Ar10      [10] 3273 	jp	_Climbing
   10BB C3r89r0D      [10] 3274 	jp	_Falling
   10BE C3r20r0E      [10] 3275 	jp	_StopIn
   10C1 C3rD9r10      [10] 3276 	jp	00108$
                           3277 ;src/main.c:1075: case S_stopped:       	Stopped();			break;
   10C4 C3r26r0E      [10] 3278 	jp  _Stopped
                           3279 ;src/main.c:1076: case S_walking:      	Walking();			break;
   10C7 C3rABr0F      [10] 3280 	jp  _Walking
                           3281 ;src/main.c:1077: case S_climbing:    	Climbing();			break;
   10CA C3r2Ar10      [10] 3282 	jp  _Climbing
                           3283 ;src/main.c:1078: case S_preJump:   		PreJump();			break;
   10CD C3r89r0F      [10] 3284 	jp  _PreJump
                           3285 ;src/main.c:1079: case S_jumping:     	Jumping();			break;
   10D0 C3r18r0F      [10] 3286 	jp  _Jumping
                           3287 ;src/main.c:1080: case S_falling:      	Falling();			break;
   10D3 C3r89r0D      [10] 3288 	jp  _Falling
                           3289 ;src/main.c:1081: case S_landing:  		StopIn();			break;
   10D6 C3r20r0E      [10] 3290 	jp  _StopIn
                           3291 ;src/main.c:1082: case S_firing:   		Firing();
   10D9                    3292 00108$:
                           3293 ;src/main.c:1022: spr[0].status = shot.status; 
   10D9 3Ar68r00      [13] 3294 	ld	a, (#(_shot + 0x0004) + 0)
   10DC 02            [ 7] 3295 	ld	(bc), a
                           3296 ;src/main.c:1083: }
   10DD C9            [10] 3297 	ret
                           3298 ;src/main.c:1088: void ExplodePlayer() {
                           3299 ;	---------------------------------
                           3300 ; Function ExplodePlayer
                           3301 ; ---------------------------------
   10DE                    3302 _ExplodePlayer::
                           3303 ;src/main.c:1090: cpct_akp_SFXPlay (4, 15, 40, 0, 0, AY_CHANNEL_A); // explosion
   10DE 3E 01         [ 7] 3304 	ld	a, #0x01
   10E0 F5            [11] 3305 	push	af
   10E1 33            [ 6] 3306 	inc	sp
   10E2 21 00 00      [10] 3307 	ld	hl, #0x0000
   10E5 E5            [11] 3308 	push	hl
   10E6 2E 28         [ 7] 3309 	ld	l, #0x28
   10E8 E5            [11] 3310 	push	hl
   10E9 21 04 0F      [10] 3311 	ld	hl, #0x0f04
   10EC E5            [11] 3312 	push	hl
   10ED CDr00r00      [17] 3313 	call	_cpct_akp_SFXPlay
   10F0 21 07 00      [10] 3314 	ld	hl, #7
   10F3 39            [11] 3315 	add	hl, sp
   10F4 F9            [ 6] 3316 	ld	sp, hl
                           3317 ;src/main.c:1091: PrintExplosion(&spr[0], 0); Pause(20);
   10F5 AF            [ 4] 3318 	xor	a, a
   10F6 F5            [11] 3319 	push	af
   10F7 33            [ 6] 3320 	inc	sp
   10F8 21r18r00      [10] 3321 	ld	hl, #_spr
   10FB E5            [11] 3322 	push	hl
   10FC CDr48r09      [17] 3323 	call	_PrintExplosion
   10FF F1            [10] 3324 	pop	af
   1100 33            [ 6] 3325 	inc	sp
   1101 21 14 00      [10] 3326 	ld	hl, #0x0014
   1104 CDrCCr01      [17] 3327 	call	_Pause
                           3328 ;src/main.c:1092: PrintExplosion(&spr[0], 1); Pause(20);
   1107 3E 01         [ 7] 3329 	ld	a, #0x01
   1109 F5            [11] 3330 	push	af
   110A 33            [ 6] 3331 	inc	sp
   110B 21r18r00      [10] 3332 	ld	hl, #_spr
   110E E5            [11] 3333 	push	hl
   110F CDr48r09      [17] 3334 	call	_PrintExplosion
   1112 F1            [10] 3335 	pop	af
   1113 33            [ 6] 3336 	inc	sp
   1114 21 14 00      [10] 3337 	ld	hl, #0x0014
   1117 CDrCCr01      [17] 3338 	call	_Pause
                           3339 ;src/main.c:1093: PrintExplosion(&spr[0], 0); Pause(20);
   111A AF            [ 4] 3340 	xor	a, a
   111B F5            [11] 3341 	push	af
   111C 33            [ 6] 3342 	inc	sp
   111D 21r18r00      [10] 3343 	ld	hl, #_spr
   1120 E5            [11] 3344 	push	hl
   1121 CDr48r09      [17] 3345 	call	_PrintExplosion
   1124 F1            [10] 3346 	pop	af
   1125 33            [ 6] 3347 	inc	sp
   1126 21 14 00      [10] 3348 	ld	hl, #0x0014
   1129 CDrCCr01      [17] 3349 	call	_Pause
                           3350 ;src/main.c:1094: DeleteSprite(&spr[0]);
   112C 21r18r00      [10] 3351 	ld	hl, #_spr
   112F C3rE9r08      [10] 3352 	jp  _DeleteSprite
                           3353 ;src/main.c:1111: void DeleteShot(TShot *pShot) __z88dk_fastcall {
                           3354 ;	---------------------------------
                           3355 ; Function DeleteShot
                           3356 ; ---------------------------------
   1132                    3357 _DeleteShot::
   1132 DD E5         [15] 3358 	push	ix
   1134 DD 21 00 00   [14] 3359 	ld	ix,#0
   1138 DD 39         [15] 3360 	add	ix,sp
   113A 3B            [ 6] 3361 	dec	sp
                           3362 ;src/main.c:1113: 2 + (pShot->px & 1), 2 + (pShot->y & 3 ? 1 : 0), 
   113B 4D            [ 4] 3363 	ld	c,l
   113C 44            [ 4] 3364 	ld	b,h
   113D 23            [ 6] 3365 	inc	hl
   113E 23            [ 6] 3366 	inc	hl
   113F 5E            [ 7] 3367 	ld	e, (hl)
   1140 7B            [ 4] 3368 	ld	a, e
   1141 E6 03         [ 7] 3369 	and	a, #0x03
   1143 28 04         [12] 3370 	jr	Z,00103$
   1145 16 01         [ 7] 3371 	ld	d, #0x01
   1147 18 02         [12] 3372 	jr	00104$
   1149                    3373 00103$:
   1149 16 00         [ 7] 3374 	ld	d, #0x00
   114B                    3375 00104$:
   114B 14            [ 4] 3376 	inc	d
   114C 14            [ 4] 3377 	inc	d
   114D 69            [ 4] 3378 	ld	l, c
   114E 60            [ 4] 3379 	ld	h, b
   114F 23            [ 6] 3380 	inc	hl
   1150 4E            [ 7] 3381 	ld	c, (hl)
   1151 79            [ 4] 3382 	ld	a, c
   1152 E6 01         [ 7] 3383 	and	a, #0x01
   1154 C6 02         [ 7] 3384 	add	a, #0x02
   1156 DD 77 FF      [19] 3385 	ld	-1 (ix), a
                           3386 ;src/main.c:1112: cpct_etm_drawTileBox2x4(pShot->px / 2, (pShot->y - ORIG_MAP_Y) / 4, 
   1159 06 00         [ 7] 3387 	ld	b, #0x00
   115B 6B            [ 4] 3388 	ld	l, e
   115C 60            [ 4] 3389 	ld	h, b
   115D CB 78         [ 8] 3390 	bit	7, b
   115F 28 05         [12] 3391 	jr	Z,00105$
   1161 6B            [ 4] 3392 	ld	l, e
   1162 60            [ 4] 3393 	ld	h, b
   1163 23            [ 6] 3394 	inc	hl
   1164 23            [ 6] 3395 	inc	hl
   1165 23            [ 6] 3396 	inc	hl
   1166                    3397 00105$:
   1166 CB 2C         [ 8] 3398 	sra	h
   1168 CB 1D         [ 8] 3399 	rr	l
   116A CB 2C         [ 8] 3400 	sra	h
   116C CB 1D         [ 8] 3401 	rr	l
   116E 5D            [ 4] 3402 	ld	e, l
   116F CB 39         [ 8] 3403 	srl	c
   1171 21 31 10      [10] 3404 	ld	hl, #0x1031
   1174 E5            [11] 3405 	push	hl
   1175 21 00 C0      [10] 3406 	ld	hl, #0xc000
   1178 E5            [11] 3407 	push	hl
   1179 3E 28         [ 7] 3408 	ld	a, #0x28
   117B F5            [11] 3409 	push	af
   117C 33            [ 6] 3410 	inc	sp
   117D D5            [11] 3411 	push	de
   117E 33            [ 6] 3412 	inc	sp
   117F DD 56 FF      [19] 3413 	ld	d, -1 (ix)
   1182 D5            [11] 3414 	push	de
   1183 79            [ 4] 3415 	ld	a, c
   1184 F5            [11] 3416 	push	af
   1185 33            [ 6] 3417 	inc	sp
   1186 CDr00r00      [17] 3418 	call	_cpct_etm_drawTileBox2x4
   1189 33            [ 6] 3419 	inc	sp
   118A DD E1         [14] 3420 	pop	ix
   118C C9            [10] 3421 	ret
                           3422 ;src/main.c:1119: void PrintShot(TShot *pShot, u8 frame) {
                           3423 ;	---------------------------------
                           3424 ; Function PrintShot
                           3425 ; ---------------------------------
   118D                    3426 _PrintShot::
   118D DD E5         [15] 3427 	push	ix
   118F DD 21 00 00   [14] 3428 	ld	ix,#0
   1193 DD 39         [15] 3429 	add	ix,sp
                           3430 ;src/main.c:1120: if (pShot->active == TRUE) {
   1195 DD 4E 04      [19] 3431 	ld	c,4 (ix)
   1198 DD 46 05      [19] 3432 	ld	b,5 (ix)
   119B C5            [11] 3433 	push	bc
   119C FD E1         [14] 3434 	pop	iy
   119E FD 5E 05      [19] 3435 	ld	e, 5 (iy)
   11A1 1D            [ 4] 3436 	dec	e
   11A2 20 33         [12] 3437 	jr	NZ,00103$
                           3438 ;src/main.c:1121: DeleteShot(pShot); // delete previous shot
   11A4 C5            [11] 3439 	push	bc
   11A5 69            [ 4] 3440 	ld	l, c
   11A6 60            [ 4] 3441 	ld	h, b
   11A7 CDr32r11      [17] 3442 	call	_DeleteShot
   11AA C1            [10] 3443 	pop	bc
                           3444 ;src/main.c:1124: SHOT_W, SHOT_H, g_maskTable);
                           3445 ;src/main.c:1123: cpct_getScreenPtr(CPCT_VMEM_START, pShot->x, pShot->y), 
   11AB 69            [ 4] 3446 	ld	l, c
   11AC 60            [ 4] 3447 	ld	h, b
   11AD 23            [ 6] 3448 	inc	hl
   11AE 23            [ 6] 3449 	inc	hl
   11AF 56            [ 7] 3450 	ld	d, (hl)
   11B0 0A            [ 7] 3451 	ld	a, (bc)
   11B1 5F            [ 4] 3452 	ld	e,a
   11B2 D5            [11] 3453 	push	de
   11B3 21 00 C0      [10] 3454 	ld	hl, #0xc000
   11B6 E5            [11] 3455 	push	hl
   11B7 CDr00r00      [17] 3456 	call	_cpct_getScreenPtr
   11BA 4D            [ 4] 3457 	ld	c, l
   11BB 44            [ 4] 3458 	ld	b, h
                           3459 ;src/main.c:1122: cpct_drawSpriteMaskedAlignedTable(g_shots[frame],
   11BC 11r00r00      [10] 3460 	ld	de, #_g_shots+0
   11BF DD 6E 06      [19] 3461 	ld	l, 6 (ix)
   11C2 26 00         [ 7] 3462 	ld	h, #0x00
   11C4 29            [11] 3463 	add	hl, hl
   11C5 29            [11] 3464 	add	hl, hl
   11C6 29            [11] 3465 	add	hl, hl
   11C7 29            [11] 3466 	add	hl, hl
   11C8 29            [11] 3467 	add	hl, hl
   11C9 19            [11] 3468 	add	hl, de
   11CA 11r00r01      [10] 3469 	ld	de, #_g_maskTable
   11CD D5            [11] 3470 	push	de
   11CE 11 04 08      [10] 3471 	ld	de, #0x0804
   11D1 D5            [11] 3472 	push	de
   11D2 C5            [11] 3473 	push	bc
   11D3 E5            [11] 3474 	push	hl
   11D4 CDr00r00      [17] 3475 	call	_cpct_drawSpriteMaskedAlignedTable
   11D7                    3476 00103$:
   11D7 DD E1         [14] 3477 	pop	ix
   11D9 C9            [10] 3478 	ret
                           3479 ;src/main.c:1130: void MoveShot(TShot *pShot, u8 speed) {
                           3480 ;	---------------------------------
                           3481 ; Function MoveShot
                           3482 ; ---------------------------------
   11DA                    3483 _MoveShot::
   11DA DD E5         [15] 3484 	push	ix
   11DC DD 21 00 00   [14] 3485 	ld	ix,#0
   11E0 DD 39         [15] 3486 	add	ix,sp
                           3487 ;src/main.c:1131: pShot->px = pShot->x; // save the current X coordinate
   11E2 DD 4E 04      [19] 3488 	ld	c,4 (ix)
   11E5 DD 46 05      [19] 3489 	ld	b,5 (ix)
   11E8 59            [ 4] 3490 	ld	e, c
   11E9 50            [ 4] 3491 	ld	d, b
   11EA 13            [ 6] 3492 	inc	de
   11EB 0A            [ 7] 3493 	ld	a, (bc)
   11EC 12            [ 7] 3494 	ld	(de), a
                           3495 ;src/main.c:1134: if (pShot->dir == D_right) 
   11ED 69            [ 4] 3496 	ld	l, c
   11EE 60            [ 4] 3497 	ld	h, b
   11EF 23            [ 6] 3498 	inc	hl
   11F0 23            [ 6] 3499 	inc	hl
   11F1 23            [ 6] 3500 	inc	hl
   11F2 56            [ 7] 3501 	ld	d, (hl)
                           3502 ;src/main.c:1131: pShot->px = pShot->x; // save the current X coordinate
   11F3 0A            [ 7] 3503 	ld	a, (bc)
   11F4 5F            [ 4] 3504 	ld	e, a
                           3505 ;src/main.c:1134: if (pShot->dir == D_right) 
   11F5 7A            [ 4] 3506 	ld	a, d
   11F6 D6 03         [ 7] 3507 	sub	a, #0x03
   11F8 20 07         [12] 3508 	jr	NZ,00102$
                           3509 ;src/main.c:1135: pShot->x = pShot->x + speed;
   11FA 7B            [ 4] 3510 	ld	a, e
   11FB DD 86 06      [19] 3511 	add	a, 6 (ix)
   11FE 02            [ 7] 3512 	ld	(bc), a
   11FF 18 05         [12] 3513 	jr	00103$
   1201                    3514 00102$:
                           3515 ;src/main.c:1137: pShot->x = pShot->x - speed;
   1201 7B            [ 4] 3516 	ld	a, e
   1202 DD 96 06      [19] 3517 	sub	a, 6 (ix)
   1205 02            [ 7] 3518 	ld	(bc), a
   1206                    3519 00103$:
                           3520 ;src/main.c:1131: pShot->px = pShot->x; // save the current X coordinate
   1206 0A            [ 7] 3521 	ld	a, (bc)
   1207 5F            [ 4] 3522 	ld	e, a
                           3523 ;src/main.c:1140: if (pShot->x + SHOT_W >= GLOBAL_MAX_X || pShot->x <= 0) {
   1208 6B            [ 4] 3524 	ld	l, e
   1209 26 00         [ 7] 3525 	ld	h, #0x00
   120B 23            [ 6] 3526 	inc	hl
   120C 23            [ 6] 3527 	inc	hl
   120D 23            [ 6] 3528 	inc	hl
   120E 23            [ 6] 3529 	inc	hl
   120F 7D            [ 4] 3530 	ld	a, l
   1210 D6 50         [ 7] 3531 	sub	a, #0x50
   1212 7C            [ 4] 3532 	ld	a, h
   1213 17            [ 4] 3533 	rla
   1214 3F            [ 4] 3534 	ccf
   1215 1F            [ 4] 3535 	rra
   1216 DE 80         [ 7] 3536 	sbc	a, #0x80
   1218 30 04         [12] 3537 	jr	NC,00104$
   121A 7B            [ 4] 3538 	ld	a, e
   121B B7            [ 4] 3539 	or	a, a
   121C 20 0B         [12] 3540 	jr	NZ,00107$
   121E                    3541 00104$:
                           3542 ;src/main.c:1141: pShot->active = FALSE;
   121E 21 05 00      [10] 3543 	ld	hl, #0x0005
   1221 09            [11] 3544 	add	hl, bc
   1222 36 00         [10] 3545 	ld	(hl), #0x00
                           3546 ;src/main.c:1143: DeleteShot(pShot); 
   1224 69            [ 4] 3547 	ld	l, c
   1225 60            [ 4] 3548 	ld	h, b
   1226 CDr32r11      [17] 3549 	call	_DeleteShot
   1229                    3550 00107$:
   1229 DD E1         [14] 3551 	pop	ix
   122B C9            [10] 3552 	ret
                           3553 ;src/main.c:1161: void MoveEnemy(TSpr *pSpr) { //__z88dk_fastcall
                           3554 ;	---------------------------------
                           3555 ; Function MoveEnemy
                           3556 ; ---------------------------------
   122C                    3557 _MoveEnemy::
   122C DD E5         [15] 3558 	push	ix
   122E DD 21 00 00   [14] 3559 	ld	ix,#0
   1232 DD 39         [15] 3560 	add	ix,sp
   1234 21 F7 FF      [10] 3561 	ld	hl, #-9
   1237 39            [11] 3562 	add	hl, sp
   1238 F9            [ 6] 3563 	ld	sp, hl
                           3564 ;src/main.c:1162: switch(pSpr->movType) 
   1239 DD 4E 04      [19] 3565 	ld	c,4 (ix)
   123C DD 46 05      [19] 3566 	ld	b,5 (ix)
   123F C5            [11] 3567 	push	bc
   1240 FD E1         [14] 3568 	pop	iy
   1242 FD 6E 11      [19] 3569 	ld	l, 17 (iy)
                           3570 ;src/main.c:1166: if (pSpr->dir == D_right) {
   1245 79            [ 4] 3571 	ld	a, c
   1246 C6 08         [ 7] 3572 	add	a, #0x08
   1248 5F            [ 4] 3573 	ld	e, a
   1249 78            [ 4] 3574 	ld	a, b
   124A CE 00         [ 7] 3575 	adc	a, #0x00
   124C 57            [ 4] 3576 	ld	d, a
                           3577 ;src/main.c:1167: if (pSpr->x < pSpr->xMax) pSpr->x++;
   124D 79            [ 4] 3578 	ld	a, c
   124E C6 0E         [ 7] 3579 	add	a, #0x0e
   1250 DD 77 FE      [19] 3580 	ld	-2 (ix), a
   1253 78            [ 4] 3581 	ld	a, b
   1254 CE 00         [ 7] 3582 	adc	a, #0x00
   1256 DD 77 FF      [19] 3583 	ld	-1 (ix), a
                           3584 ;src/main.c:1171: if (pSpr->x > pSpr->xMin) pSpr->x--;
   1259 79            [ 4] 3585 	ld	a, c
   125A C6 0D         [ 7] 3586 	add	a, #0x0d
   125C DD 77 FC      [19] 3587 	ld	-4 (ix), a
   125F 78            [ 4] 3588 	ld	a, b
   1260 CE 00         [ 7] 3589 	adc	a, #0x00
   1262 DD 77 FD      [19] 3590 	ld	-3 (ix), a
                           3591 ;src/main.c:1162: switch(pSpr->movType) 
   1265 7D            [ 4] 3592 	ld	a, l
   1266 B7            [ 4] 3593 	or	a, a
   1267 28 30         [12] 3594 	jr	Z,00101$
                           3595 ;src/main.c:1179: if (pSpr->y < pSpr->yMax) pSpr->y += 2;
   1269 79            [ 4] 3596 	ld	a, c
   126A C6 01         [ 7] 3597 	add	a, #0x01
   126C DD 77 FA      [19] 3598 	ld	-6 (ix), a
   126F 78            [ 4] 3599 	ld	a, b
   1270 CE 00         [ 7] 3600 	adc	a, #0x00
   1272 DD 77 FB      [19] 3601 	ld	-5 (ix), a
   1275 FD 21 10 00   [14] 3602 	ld	iy, #0x0010
   1279 FD 09         [15] 3603 	add	iy, bc
                           3604 ;src/main.c:1183: if (pSpr->y > pSpr->yMin) pSpr->y -= 2;
   127B 79            [ 4] 3605 	ld	a, c
   127C C6 0F         [ 7] 3606 	add	a, #0x0f
   127E DD 77 F8      [19] 3607 	ld	-8 (ix), a
   1281 78            [ 4] 3608 	ld	a, b
   1282 CE 00         [ 7] 3609 	adc	a, #0x00
   1284 DD 77 F9      [19] 3610 	ld	-7 (ix), a
                           3611 ;src/main.c:1162: switch(pSpr->movType) 
   1287 7D            [ 4] 3612 	ld	a, l
   1288 3D            [ 4] 3613 	dec	a
   1289 28 4E         [12] 3614 	jr	Z,00111$
   128B 7D            [ 4] 3615 	ld	a,l
   128C FE 02         [ 7] 3616 	cp	a,#0x02
   128E CAr18r13      [10] 3617 	jp	Z,00121$
   1291 D6 03         [ 7] 3618 	sub	a, #0x03
   1293 CAr31r14      [10] 3619 	jp	Z,00161$
   1296 C3r94r14      [10] 3620 	jp	00172$
                           3621 ;src/main.c:1165: case M_linear_X:
   1299                    3622 00101$:
                           3623 ;src/main.c:1166: if (pSpr->dir == D_right) {
   1299 1A            [ 7] 3624 	ld	a, (de)
                           3625 ;src/main.c:1167: if (pSpr->x < pSpr->xMax) pSpr->x++;
   129A F5            [11] 3626 	push	af
   129B 0A            [ 7] 3627 	ld	a, (bc)
   129C DD 77 F7      [19] 3628 	ld	-9 (ix), a
   129F F1            [10] 3629 	pop	af
                           3630 ;src/main.c:1166: if (pSpr->dir == D_right) {
   12A0 D6 03         [ 7] 3631 	sub	a, #0x03
   12A2 20 1A         [12] 3632 	jr	NZ,00109$
                           3633 ;src/main.c:1167: if (pSpr->x < pSpr->xMax) pSpr->x++;
   12A4 DD 6E FE      [19] 3634 	ld	l,-2 (ix)
   12A7 DD 66 FF      [19] 3635 	ld	h,-1 (ix)
   12AA DD 7E F7      [19] 3636 	ld	a,-9 (ix)
   12AD 96            [ 7] 3637 	sub	a,(hl)
   12AE 30 08         [12] 3638 	jr	NC,00103$
   12B0 DD 7E F7      [19] 3639 	ld	a, -9 (ix)
   12B3 3C            [ 4] 3640 	inc	a
   12B4 02            [ 7] 3641 	ld	(bc), a
   12B5 C3r94r14      [10] 3642 	jp	00172$
   12B8                    3643 00103$:
                           3644 ;src/main.c:1168: else pSpr->dir = D_left;
   12B8 3E 02         [ 7] 3645 	ld	a, #0x02
   12BA 12            [ 7] 3646 	ld	(de), a
   12BB C3r94r14      [10] 3647 	jp	00172$
   12BE                    3648 00109$:
                           3649 ;src/main.c:1171: if (pSpr->x > pSpr->xMin) pSpr->x--;
   12BE DD 6E FC      [19] 3650 	ld	l,-4 (ix)
   12C1 DD 66 FD      [19] 3651 	ld	h,-3 (ix)
   12C4 7E            [ 7] 3652 	ld	a, (hl)
   12C5 DD 96 F7      [19] 3653 	sub	a, -9 (ix)
   12C8 30 09         [12] 3654 	jr	NC,00106$
   12CA DD 5E F7      [19] 3655 	ld	e, -9 (ix)
   12CD 1D            [ 4] 3656 	dec	e
   12CE 7B            [ 4] 3657 	ld	a, e
   12CF 02            [ 7] 3658 	ld	(bc), a
   12D0 C3r94r14      [10] 3659 	jp	00172$
   12D3                    3660 00106$:
                           3661 ;src/main.c:1172: else pSpr->dir = D_right; 
   12D3 3E 03         [ 7] 3662 	ld	a, #0x03
   12D5 12            [ 7] 3663 	ld	(de), a
                           3664 ;src/main.c:1174: break;
   12D6 C3r94r14      [10] 3665 	jp	00172$
                           3666 ;src/main.c:1177: case M_linear_Y:
   12D9                    3667 00111$:
                           3668 ;src/main.c:1178: if (pSpr->dir == D_down) {
   12D9 1A            [ 7] 3669 	ld	a, (de)
                           3670 ;src/main.c:1194: if (pSpr->y < pSpr->yMax && !OnPlatform(pSpr)) pSpr->y++;
   12DA DD 6E FA      [19] 3671 	ld	l,-6 (ix)
   12DD DD 66 FB      [19] 3672 	ld	h,-5 (ix)
   12E0 4E            [ 7] 3673 	ld	c, (hl)
                           3674 ;src/main.c:1178: if (pSpr->dir == D_down) {
   12E1 3D            [ 4] 3675 	dec	a
   12E2 20 18         [12] 3676 	jr	NZ,00119$
                           3677 ;src/main.c:1179: if (pSpr->y < pSpr->yMax) pSpr->y += 2;
   12E4 FD 46 00      [19] 3678 	ld	b, 0 (iy)
   12E7 79            [ 4] 3679 	ld	a, c
   12E8 90            [ 4] 3680 	sub	a, b
   12E9 30 0C         [12] 3681 	jr	NC,00113$
   12EB 0C            [ 4] 3682 	inc	c
   12EC 0C            [ 4] 3683 	inc	c
   12ED DD 6E FA      [19] 3684 	ld	l,-6 (ix)
   12F0 DD 66 FB      [19] 3685 	ld	h,-5 (ix)
   12F3 71            [ 7] 3686 	ld	(hl), c
   12F4 C3r94r14      [10] 3687 	jp	00172$
   12F7                    3688 00113$:
                           3689 ;src/main.c:1180: else pSpr->dir = D_up;
   12F7 AF            [ 4] 3690 	xor	a, a
   12F8 12            [ 7] 3691 	ld	(de), a
   12F9 C3r94r14      [10] 3692 	jp	00172$
   12FC                    3693 00119$:
                           3694 ;src/main.c:1183: if (pSpr->y > pSpr->yMin) pSpr->y -= 2;
   12FC DD 6E F8      [19] 3695 	ld	l,-8 (ix)
   12FF DD 66 F9      [19] 3696 	ld	h,-7 (ix)
   1302 7E            [ 7] 3697 	ld	a, (hl)
   1303 91            [ 4] 3698 	sub	a, c
   1304 30 0C         [12] 3699 	jr	NC,00116$
   1306 0D            [ 4] 3700 	dec	c
   1307 0D            [ 4] 3701 	dec	c
   1308 DD 6E FA      [19] 3702 	ld	l,-6 (ix)
   130B DD 66 FB      [19] 3703 	ld	h,-5 (ix)
   130E 71            [ 7] 3704 	ld	(hl), c
   130F C3r94r14      [10] 3705 	jp	00172$
   1312                    3706 00116$:
                           3707 ;src/main.c:1184: else pSpr->dir = D_down; 
   1312 3E 01         [ 7] 3708 	ld	a, #0x01
   1314 12            [ 7] 3709 	ld	(de), a
                           3710 ;src/main.c:1186: break;
   1315 C3r94r14      [10] 3711 	jp	00172$
                           3712 ;src/main.c:1189: case M_diagonal:
   1318                    3713 00121$:
                           3714 ;src/main.c:1191: if (pSpr->dir == D_right_down || pSpr->dir == D_right) {
   1318 1A            [ 7] 3715 	ld	a, (de)
   1319 FE 07         [ 7] 3716 	cp	a, #0x07
   131B 28 04         [12] 3717 	jr	Z,00157$
   131D FE 03         [ 7] 3718 	cp	a, #0x03
   131F 20 43         [12] 3719 	jr	NZ,00158$
   1321                    3720 00157$:
                           3721 ;src/main.c:1192: if (pSpr->x < pSpr->xMax) {
   1321 0A            [ 7] 3722 	ld	a, (bc)
   1322 DD 6E FE      [19] 3723 	ld	l,-2 (ix)
   1325 DD 66 FF      [19] 3724 	ld	h,-1 (ix)
   1328 6E            [ 7] 3725 	ld	l, (hl)
   1329 BD            [ 4] 3726 	cp	a, l
   132A 30 32         [12] 3727 	jr	NC,00127$
                           3728 ;src/main.c:1193: pSpr->x++;					
   132C 3C            [ 4] 3729 	inc	a
   132D 02            [ 7] 3730 	ld	(bc), a
                           3731 ;src/main.c:1194: if (pSpr->y < pSpr->yMax && !OnPlatform(pSpr)) pSpr->y++;
   132E DD 6E FA      [19] 3732 	ld	l,-6 (ix)
   1331 DD 66 FB      [19] 3733 	ld	h,-5 (ix)
   1334 7E            [ 7] 3734 	ld	a, (hl)
   1335 FD 6E 00      [19] 3735 	ld	l, 0 (iy)
   1338 95            [ 4] 3736 	sub	a, l
   1339 30 1D         [12] 3737 	jr	NC,00123$
   133B D5            [11] 3738 	push	de
   133C 69            [ 4] 3739 	ld	l, c
   133D 60            [ 4] 3740 	ld	h, b
   133E CDr45r04      [17] 3741 	call	_OnPlatform
   1341 D1            [10] 3742 	pop	de
   1342 7D            [ 4] 3743 	ld	a, l
   1343 B7            [ 4] 3744 	or	a, a
   1344 20 12         [12] 3745 	jr	NZ,00123$
   1346 DD 6E FA      [19] 3746 	ld	l,-6 (ix)
   1349 DD 66 FB      [19] 3747 	ld	h,-5 (ix)
   134C 4E            [ 7] 3748 	ld	c, (hl)
   134D 0C            [ 4] 3749 	inc	c
   134E DD 6E FA      [19] 3750 	ld	l,-6 (ix)
   1351 DD 66 FB      [19] 3751 	ld	h,-5 (ix)
   1354 71            [ 7] 3752 	ld	(hl), c
   1355 C3r94r14      [10] 3753 	jp	00172$
   1358                    3754 00123$:
                           3755 ;src/main.c:1195: else pSpr->dir = D_right_up;
   1358 3E 06         [ 7] 3756 	ld	a, #0x06
   135A 12            [ 7] 3757 	ld	(de), a
   135B C3r94r14      [10] 3758 	jp	00172$
   135E                    3759 00127$:
                           3760 ;src/main.c:1197: else pSpr->dir = D_left_down;
   135E 3E 05         [ 7] 3761 	ld	a, #0x05
   1360 12            [ 7] 3762 	ld	(de), a
   1361 C3r94r14      [10] 3763 	jp	00172$
   1364                    3764 00158$:
                           3765 ;src/main.c:1200: else if (pSpr->dir == D_right_up) {
   1364 FE 06         [ 7] 3766 	cp	a, #0x06
   1366 20 35         [12] 3767 	jr	NZ,00155$
                           3768 ;src/main.c:1201: if (pSpr->x < pSpr->xMax) {
   1368 0A            [ 7] 3769 	ld	a, (bc)
   1369 DD 6E FE      [19] 3770 	ld	l,-2 (ix)
   136C DD 66 FF      [19] 3771 	ld	h,-1 (ix)
   136F 6E            [ 7] 3772 	ld	l, (hl)
   1370 BD            [ 4] 3773 	cp	a, l
   1371 30 24         [12] 3774 	jr	NC,00133$
                           3775 ;src/main.c:1202: pSpr->x++;
   1373 3C            [ 4] 3776 	inc	a
   1374 02            [ 7] 3777 	ld	(bc), a
                           3778 ;src/main.c:1203: if (pSpr->y > pSpr->yMin) pSpr->y--;
   1375 DD 6E FA      [19] 3779 	ld	l,-6 (ix)
   1378 DD 66 FB      [19] 3780 	ld	h,-5 (ix)
   137B 4E            [ 7] 3781 	ld	c, (hl)
   137C DD 6E F8      [19] 3782 	ld	l,-8 (ix)
   137F DD 66 F9      [19] 3783 	ld	h,-7 (ix)
   1382 7E            [ 7] 3784 	ld	a, (hl)
   1383 91            [ 4] 3785 	sub	a, c
   1384 30 0B         [12] 3786 	jr	NC,00130$
   1386 0D            [ 4] 3787 	dec	c
   1387 DD 6E FA      [19] 3788 	ld	l,-6 (ix)
   138A DD 66 FB      [19] 3789 	ld	h,-5 (ix)
   138D 71            [ 7] 3790 	ld	(hl), c
   138E C3r94r14      [10] 3791 	jp	00172$
   1391                    3792 00130$:
                           3793 ;src/main.c:1204: else pSpr->dir = D_right_down;
   1391 3E 07         [ 7] 3794 	ld	a, #0x07
   1393 12            [ 7] 3795 	ld	(de), a
   1394 C3r94r14      [10] 3796 	jp	00172$
   1397                    3797 00133$:
                           3798 ;src/main.c:1206: else pSpr->dir = D_left_up;
   1397 3E 04         [ 7] 3799 	ld	a, #0x04
   1399 12            [ 7] 3800 	ld	(de), a
   139A C3r94r14      [10] 3801 	jp	00172$
   139D                    3802 00155$:
                           3803 ;src/main.c:1209: else if (pSpr->dir == D_left_up || pSpr->dir == D_left)	{
   139D FE 04         [ 7] 3804 	cp	a, #0x04
   139F 28 04         [12] 3805 	jr	Z,00150$
   13A1 FE 02         [ 7] 3806 	cp	a, #0x02
   13A3 20 3E         [12] 3807 	jr	NZ,00151$
   13A5                    3808 00150$:
                           3809 ;src/main.c:1210: if (pSpr->x > pSpr->xMin) {
   13A5 0A            [ 7] 3810 	ld	a, (bc)
   13A6 DD 77 F7      [19] 3811 	ld	-9 (ix), a
   13A9 DD 6E FC      [19] 3812 	ld	l,-4 (ix)
   13AC DD 66 FD      [19] 3813 	ld	h,-3 (ix)
   13AF 7E            [ 7] 3814 	ld	a, (hl)
   13B0 DD 96 F7      [19] 3815 	sub	a, -9 (ix)
   13B3 30 28         [12] 3816 	jr	NC,00139$
                           3817 ;src/main.c:1211: pSpr->x--;
   13B5 DD 7E F7      [19] 3818 	ld	a, -9 (ix)
   13B8 C6 FF         [ 7] 3819 	add	a, #0xff
   13BA 02            [ 7] 3820 	ld	(bc), a
                           3821 ;src/main.c:1212: if (pSpr->y > pSpr->yMin) pSpr->y--;
   13BB DD 6E FA      [19] 3822 	ld	l,-6 (ix)
   13BE DD 66 FB      [19] 3823 	ld	h,-5 (ix)
   13C1 4E            [ 7] 3824 	ld	c, (hl)
   13C2 DD 6E F8      [19] 3825 	ld	l,-8 (ix)
   13C5 DD 66 F9      [19] 3826 	ld	h,-7 (ix)
   13C8 7E            [ 7] 3827 	ld	a, (hl)
   13C9 91            [ 4] 3828 	sub	a, c
   13CA 30 0B         [12] 3829 	jr	NC,00136$
   13CC 0D            [ 4] 3830 	dec	c
   13CD DD 6E FA      [19] 3831 	ld	l,-6 (ix)
   13D0 DD 66 FB      [19] 3832 	ld	h,-5 (ix)
   13D3 71            [ 7] 3833 	ld	(hl), c
   13D4 C3r94r14      [10] 3834 	jp	00172$
   13D7                    3835 00136$:
                           3836 ;src/main.c:1213: else pSpr->dir = D_left_down;
   13D7 3E 05         [ 7] 3837 	ld	a, #0x05
   13D9 12            [ 7] 3838 	ld	(de), a
   13DA C3r94r14      [10] 3839 	jp	00172$
   13DD                    3840 00139$:
                           3841 ;src/main.c:1215: else pSpr->dir = D_right_up; 
   13DD 3E 06         [ 7] 3842 	ld	a, #0x06
   13DF 12            [ 7] 3843 	ld	(de), a
   13E0 C3r94r14      [10] 3844 	jp	00172$
   13E3                    3845 00151$:
                           3846 ;src/main.c:1218: else if (pSpr->dir == D_left_down) {
   13E3 D6 05         [ 7] 3847 	sub	a, #0x05
   13E5 C2r94r14      [10] 3848 	jp	NZ,00172$
                           3849 ;src/main.c:1219: if (pSpr->x > pSpr->xMin) {
   13E8 0A            [ 7] 3850 	ld	a, (bc)
   13E9 DD 77 F7      [19] 3851 	ld	-9 (ix), a
   13EC DD 6E FC      [19] 3852 	ld	l,-4 (ix)
   13EF DD 66 FD      [19] 3853 	ld	h,-3 (ix)
   13F2 7E            [ 7] 3854 	ld	a, (hl)
   13F3 DD 96 F7      [19] 3855 	sub	a, -9 (ix)
   13F6 30 34         [12] 3856 	jr	NC,00146$
                           3857 ;src/main.c:1220: pSpr->x--;
   13F8 DD 7E F7      [19] 3858 	ld	a, -9 (ix)
   13FB C6 FF         [ 7] 3859 	add	a, #0xff
   13FD 02            [ 7] 3860 	ld	(bc), a
                           3861 ;src/main.c:1221: if (pSpr->y < pSpr->yMax && !OnPlatform(pSpr)) pSpr->y++;
   13FE DD 6E FA      [19] 3862 	ld	l,-6 (ix)
   1401 DD 66 FB      [19] 3863 	ld	h,-5 (ix)
   1404 7E            [ 7] 3864 	ld	a, (hl)
   1405 FD 6E 00      [19] 3865 	ld	l, 0 (iy)
   1408 95            [ 4] 3866 	sub	a, l
   1409 30 1C         [12] 3867 	jr	NC,00142$
   140B D5            [11] 3868 	push	de
   140C 69            [ 4] 3869 	ld	l, c
   140D 60            [ 4] 3870 	ld	h, b
   140E CDr45r04      [17] 3871 	call	_OnPlatform
   1411 D1            [10] 3872 	pop	de
   1412 7D            [ 4] 3873 	ld	a, l
   1413 B7            [ 4] 3874 	or	a, a
   1414 20 11         [12] 3875 	jr	NZ,00142$
   1416 DD 6E FA      [19] 3876 	ld	l,-6 (ix)
   1419 DD 66 FB      [19] 3877 	ld	h,-5 (ix)
   141C 4E            [ 7] 3878 	ld	c, (hl)
   141D 0C            [ 4] 3879 	inc	c
   141E DD 6E FA      [19] 3880 	ld	l,-6 (ix)
   1421 DD 66 FB      [19] 3881 	ld	h,-5 (ix)
   1424 71            [ 7] 3882 	ld	(hl), c
   1425 18 6D         [12] 3883 	jr	00172$
   1427                    3884 00142$:
                           3885 ;src/main.c:1222: else pSpr->dir = D_left_up;
   1427 3E 04         [ 7] 3886 	ld	a, #0x04
   1429 12            [ 7] 3887 	ld	(de), a
   142A 18 68         [12] 3888 	jr	00172$
   142C                    3889 00146$:
                           3890 ;src/main.c:1224: else pSpr->dir = D_right_down;
   142C 3E 07         [ 7] 3891 	ld	a, #0x07
   142E 12            [ 7] 3892 	ld	(de), a
                           3893 ;src/main.c:1226: break;
   142F 18 63         [12] 3894 	jr	00172$
                           3895 ;src/main.c:1229: case M_chaser:
   1431                    3896 00161$:
                           3897 ;src/main.c:1230: if (ctMainLoop % 3 == 0) { // slow motion, moves one in three iterations
   1431 C5            [11] 3898 	push	bc
   1432 D5            [11] 3899 	push	de
   1433 3E 03         [ 7] 3900 	ld	a, #0x03
   1435 F5            [11] 3901 	push	af
   1436 33            [ 6] 3902 	inc	sp
   1437 3Ar06r00      [13] 3903 	ld	a, (_ctMainLoop)
   143A F5            [11] 3904 	push	af
   143B 33            [ 6] 3905 	inc	sp
   143C CDr00r00      [17] 3906 	call	__moduchar
   143F F1            [10] 3907 	pop	af
   1440 D1            [10] 3908 	pop	de
   1441 C1            [10] 3909 	pop	bc
   1442 7D            [ 4] 3910 	ld	a, l
   1443 B7            [ 4] 3911 	or	a, a
   1444 20 4E         [12] 3912 	jr	NZ,00172$
                           3913 ;src/main.c:1231: if (pSpr->x <= spr[0].x) { // is to the player's left
   1446 0A            [ 7] 3914 	ld	a, (bc)
   1447 DD 77 F7      [19] 3915 	ld	-9 (ix), a
   144A 3Ar18r00      [13] 3916 	ld	a, (#_spr+0)
   144D DD 96 F7      [19] 3917 	sub	a, -9 (ix)
   1450 38 0A         [12] 3918 	jr	C,00163$
                           3919 ;src/main.c:1232: pSpr->x++;
   1452 DD 7E F7      [19] 3920 	ld	a, -9 (ix)
   1455 3C            [ 4] 3921 	inc	a
   1456 02            [ 7] 3922 	ld	(bc), a
                           3923 ;src/main.c:1233: pSpr->dir = D_right;
   1457 3E 03         [ 7] 3924 	ld	a, #0x03
   1459 12            [ 7] 3925 	ld	(de), a
   145A 18 09         [12] 3926 	jr	00164$
   145C                    3927 00163$:
                           3928 ;src/main.c:1236: pSpr->x--;
   145C DD 7E F7      [19] 3929 	ld	a, -9 (ix)
   145F C6 FF         [ 7] 3930 	add	a, #0xff
   1461 02            [ 7] 3931 	ld	(bc), a
                           3932 ;src/main.c:1237: pSpr->dir = D_left;
   1462 3E 02         [ 7] 3933 	ld	a, #0x02
   1464 12            [ 7] 3934 	ld	(de), a
   1465                    3935 00164$:
                           3936 ;src/main.c:1194: if (pSpr->y < pSpr->yMax && !OnPlatform(pSpr)) pSpr->y++;
   1465 DD 6E FA      [19] 3937 	ld	l,-6 (ix)
   1468 DD 66 FB      [19] 3938 	ld	h,-5 (ix)
   146B 5E            [ 7] 3939 	ld	e, (hl)
                           3940 ;src/main.c:1240: if (pSpr->y <= spr[0].y && !OnPlatform(pSpr)) pSpr->y++;
   146C 3Ar19r00      [13] 3941 	ld	a, (#_spr+1)
   146F 93            [ 4] 3942 	sub	a, e
   1470 38 1A         [12] 3943 	jr	C,00166$
   1472 69            [ 4] 3944 	ld	l, c
   1473 60            [ 4] 3945 	ld	h, b
   1474 CDr45r04      [17] 3946 	call	_OnPlatform
   1477 7D            [ 4] 3947 	ld	a, l
                           3948 ;src/main.c:1194: if (pSpr->y < pSpr->yMax && !OnPlatform(pSpr)) pSpr->y++;
   1478 DD 6E FA      [19] 3949 	ld	l,-6 (ix)
   147B DD 66 FB      [19] 3950 	ld	h,-5 (ix)
   147E 5E            [ 7] 3951 	ld	e, (hl)
                           3952 ;src/main.c:1240: if (pSpr->y <= spr[0].y && !OnPlatform(pSpr)) pSpr->y++;
   147F B7            [ 4] 3953 	or	a, a
   1480 20 0A         [12] 3954 	jr	NZ,00166$
   1482 1C            [ 4] 3955 	inc	e
   1483 DD 6E FA      [19] 3956 	ld	l,-6 (ix)
   1486 DD 66 FB      [19] 3957 	ld	h,-5 (ix)
   1489 73            [ 7] 3958 	ld	(hl), e
   148A 18 08         [12] 3959 	jr	00172$
   148C                    3960 00166$:
                           3961 ;src/main.c:1241: else pSpr->y--; // is below the main sprite
   148C 1D            [ 4] 3962 	dec	e
   148D DD 6E FA      [19] 3963 	ld	l,-6 (ix)
   1490 DD 66 FB      [19] 3964 	ld	h,-5 (ix)
   1493 73            [ 7] 3965 	ld	(hl), e
                           3966 ;src/main.c:1244: }
   1494                    3967 00172$:
   1494 DD F9         [10] 3968 	ld	sp, ix
   1496 DD E1         [14] 3969 	pop	ix
   1498 C9            [10] 3970 	ret
                           3971 ;src/main.c:1249: void SetEnemyParams(u8 i, u8 ident, u8 mov, u8 lives, u8 dir, u8 x, u8 y, u8 xMin, u8 yMin, u8 xMax, u8 yMax) {
                           3972 ;	---------------------------------
                           3973 ; Function SetEnemyParams
                           3974 ; ---------------------------------
   1499                    3975 _SetEnemyParams::
   1499 DD E5         [15] 3976 	push	ix
   149B DD 21 00 00   [14] 3977 	ld	ix,#0
   149F DD 39         [15] 3978 	add	ix,sp
                           3979 ;src/main.c:1250: spr[i].status = S_walking;
   14A1 01r18r00      [10] 3980 	ld	bc, #_spr+0
   14A4 DD 5E 04      [19] 3981 	ld	e,4 (ix)
   14A7 16 00         [ 7] 3982 	ld	d,#0x00
   14A9 6B            [ 4] 3983 	ld	l, e
   14AA 62            [ 4] 3984 	ld	h, d
   14AB 29            [11] 3985 	add	hl, hl
   14AC 29            [11] 3986 	add	hl, hl
   14AD 29            [11] 3987 	add	hl, hl
   14AE 19            [11] 3988 	add	hl, de
   14AF 29            [11] 3989 	add	hl, hl
   14B0 19            [11] 3990 	add	hl, de
   14B1 09            [11] 3991 	add	hl,bc
   14B2 4D            [ 4] 3992 	ld	c, l
   14B3 44            [ 4] 3993 	ld	b, h
   14B4 21 04 00      [10] 3994 	ld	hl, #0x0004
   14B7 09            [11] 3995 	add	hl, bc
   14B8 36 01         [10] 3996 	ld	(hl), #0x01
                           3997 ;src/main.c:1251: spr[i].ident = ident; 
   14BA 21 12 00      [10] 3998 	ld	hl, #0x0012
   14BD 09            [11] 3999 	add	hl, bc
   14BE DD 7E 05      [19] 4000 	ld	a, 5 (ix)
   14C1 77            [ 7] 4001 	ld	(hl), a
                           4002 ;src/main.c:1252: spr[i].movType = mov;
   14C2 21 11 00      [10] 4003 	ld	hl, #0x0011
   14C5 09            [11] 4004 	add	hl, bc
   14C6 DD 7E 06      [19] 4005 	ld	a, 6 (ix)
   14C9 77            [ 7] 4006 	ld	(hl), a
                           4007 ;src/main.c:1253: spr[i].lives = lives; 
   14CA 21 09 00      [10] 4008 	ld	hl, #0x0009
   14CD 09            [11] 4009 	add	hl, bc
   14CE DD 7E 07      [19] 4010 	ld	a, 7 (ix)
   14D1 77            [ 7] 4011 	ld	(hl), a
                           4012 ;src/main.c:1254: spr[i].dir = dir; 
   14D2 21 08 00      [10] 4013 	ld	hl, #0x0008
   14D5 09            [11] 4014 	add	hl, bc
   14D6 DD 7E 08      [19] 4015 	ld	a, 8 (ix)
   14D9 77            [ 7] 4016 	ld	(hl), a
                           4017 ;src/main.c:1255: spr[i].x = spr[i].px = x;
   14DA 59            [ 4] 4018 	ld	e, c
   14DB 50            [ 4] 4019 	ld	d, b
   14DC 13            [ 6] 4020 	inc	de
   14DD 13            [ 6] 4021 	inc	de
   14DE DD 7E 09      [19] 4022 	ld	a, 9 (ix)
   14E1 12            [ 7] 4023 	ld	(de), a
   14E2 DD 7E 09      [19] 4024 	ld	a, 9 (ix)
   14E5 02            [ 7] 4025 	ld	(bc), a
                           4026 ;src/main.c:1256: spr[i].y = spr[i].py = y;
   14E6 59            [ 4] 4027 	ld	e, c
   14E7 50            [ 4] 4028 	ld	d, b
   14E8 13            [ 6] 4029 	inc	de
   14E9 69            [ 4] 4030 	ld	l, c
   14EA 60            [ 4] 4031 	ld	h, b
   14EB 23            [ 6] 4032 	inc	hl
   14EC 23            [ 6] 4033 	inc	hl
   14ED 23            [ 6] 4034 	inc	hl
   14EE DD 7E 0A      [19] 4035 	ld	a, 10 (ix)
   14F1 77            [ 7] 4036 	ld	(hl), a
   14F2 DD 7E 0A      [19] 4037 	ld	a, 10 (ix)
   14F5 12            [ 7] 4038 	ld	(de), a
                           4039 ;src/main.c:1257: spr[i].xMin = xMin;
   14F6 21 0D 00      [10] 4040 	ld	hl, #0x000d
   14F9 09            [11] 4041 	add	hl, bc
   14FA DD 7E 0B      [19] 4042 	ld	a, 11 (ix)
   14FD 77            [ 7] 4043 	ld	(hl), a
                           4044 ;src/main.c:1258: spr[i].yMin = yMin;
   14FE 21 0F 00      [10] 4045 	ld	hl, #0x000f
   1501 09            [11] 4046 	add	hl, bc
   1502 DD 7E 0C      [19] 4047 	ld	a, 12 (ix)
   1505 77            [ 7] 4048 	ld	(hl), a
                           4049 ;src/main.c:1259: spr[i].xMax = xMax;
   1506 21 0E 00      [10] 4050 	ld	hl, #0x000e
   1509 09            [11] 4051 	add	hl, bc
   150A DD 7E 0D      [19] 4052 	ld	a, 13 (ix)
   150D 77            [ 7] 4053 	ld	(hl), a
                           4054 ;src/main.c:1260: spr[i].yMax = yMax; 
   150E 21 10 00      [10] 4055 	ld	hl, #0x0010
   1511 09            [11] 4056 	add	hl, bc
   1512 DD 7E 0E      [19] 4057 	ld	a, 14 (ix)
   1515 77            [ 7] 4058 	ld	(hl), a
                           4059 ;src/main.c:1261: spr[i].touched = 0;
   1516 21 0A 00      [10] 4060 	ld	hl, #0x000a
   1519 09            [11] 4061 	add	hl, bc
   151A 36 00         [10] 4062 	ld	(hl), #0x00
   151C DD E1         [14] 4063 	pop	ix
   151E C9            [10] 4064 	ret
                           4065 ;src/main.c:1271: void SetEnemies() {
                           4066 ;	---------------------------------
                           4067 ; Function SetEnemies
                           4068 ; ---------------------------------
   151F                    4069 _SetEnemies::
                           4070 ;src/main.c:1272: switch(mapNumber) {
   151F FD 21r00r00   [14] 4071 	ld	iy, #_mapNumber
   1523 FD 7E 00      [19] 4072 	ld	a, 0 (iy)
   1526 B7            [ 4] 4073 	or	a, a
   1527 28 0F         [12] 4074 	jr	Z,00101$
   1529 FD 7E 00      [19] 4075 	ld	a, 0 (iy)
   152C 3D            [ 4] 4076 	dec	a
   152D 28 6C         [12] 4077 	jr	Z,00102$
   152F FD 7E 00      [19] 4078 	ld	a, 0 (iy)
   1532 D6 02         [ 7] 4079 	sub	a, #0x02
   1534 CAr01r16      [10] 4080 	jp	Z,00103$
   1537 C9            [10] 4081 	ret
                           4082 ;src/main.c:1273: case 0: { // upper left deck upper floor #3
   1538                    4083 00101$:
                           4084 ;src/main.c:1275: SetEnemyParams(1, ARACNOVIRUS, 	M_linear_Y, 	2,  D_right, 48,  64,   48,   64,   48,  160);
   1538 21 30 A0      [10] 4085 	ld	hl, #0xa030
   153B E5            [11] 4086 	push	hl
   153C 26 40         [ 7] 4087 	ld	h, #0x40
   153E E5            [11] 4088 	push	hl
   153F 2E 30         [ 7] 4089 	ld	l, #0x30
   1541 E5            [11] 4090 	push	hl
   1542 21 02 03      [10] 4091 	ld	hl, #0x0302
   1545 E5            [11] 4092 	push	hl
   1546 26 01         [ 7] 4093 	ld	h, #0x01
   1548 E5            [11] 4094 	push	hl
   1549 3E 01         [ 7] 4095 	ld	a, #0x01
   154B F5            [11] 4096 	push	af
   154C 33            [ 6] 4097 	inc	sp
   154D CDr99r14      [17] 4098 	call	_SetEnemyParams
   1550 21 0B 00      [10] 4099 	ld	hl, #11
   1553 39            [11] 4100 	add	hl, sp
   1554 F9            [ 6] 4101 	ld	sp, hl
                           4102 ;src/main.c:1276: SetEnemyParams(2, INFECTED, 	M_linear_X, 	3,  D_right, 16, 160,    8,  160,   64,  160);
   1555 21 40 A0      [10] 4103 	ld	hl, #0xa040
   1558 E5            [11] 4104 	push	hl
   1559 2E 08         [ 7] 4105 	ld	l, #0x08
   155B E5            [11] 4106 	push	hl
   155C 2E 10         [ 7] 4107 	ld	l, #0x10
   155E E5            [11] 4108 	push	hl
   155F 21 03 03      [10] 4109 	ld	hl, #0x0303
   1562 E5            [11] 4110 	push	hl
   1563 26 00         [ 7] 4111 	ld	h, #0x00
   1565 E5            [11] 4112 	push	hl
   1566 3E 02         [ 7] 4113 	ld	a, #0x02
   1568 F5            [11] 4114 	push	af
   1569 33            [ 6] 4115 	inc	sp
   156A CDr99r14      [17] 4116 	call	_SetEnemyParams
   156D 21 0B 00      [10] 4117 	ld	hl, #11
   1570 39            [11] 4118 	add	hl, sp
   1571 F9            [ 6] 4119 	ld	sp, hl
                           4120 ;src/main.c:1277: SetEnemyParams(3, ARACNOVIRUS,	M_linear_X,		0,  D_right,  0,   0,    0,    0,    0,    0);
   1572 21 00 00      [10] 4121 	ld	hl, #0x0000
   1575 E5            [11] 4122 	push	hl
   1576 2E 00         [ 7] 4123 	ld	l, #0x00
   1578 E5            [11] 4124 	push	hl
   1579 2E 00         [ 7] 4125 	ld	l, #0x00
   157B E5            [11] 4126 	push	hl
   157C 26 03         [ 7] 4127 	ld	h, #0x03
   157E E5            [11] 4128 	push	hl
   157F 21 02 00      [10] 4129 	ld	hl, #0x0002
   1582 E5            [11] 4130 	push	hl
   1583 3E 03         [ 7] 4131 	ld	a, #0x03
   1585 F5            [11] 4132 	push	af
   1586 33            [ 6] 4133 	inc	sp
   1587 CDr99r14      [17] 4134 	call	_SetEnemyParams
   158A 21 0B 00      [10] 4135 	ld	hl, #11
   158D 39            [11] 4136 	add	hl, sp
   158E F9            [ 6] 4137 	ld	sp, hl
                           4138 ;src/main.c:1279: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk0_end);
   158F 21rE5r00      [10] 4139 	ld	hl, #(_mappk0 + 0x00e5)
   1592 E5            [11] 4140 	push	hl
   1593 21 20 16      [10] 4141 	ld	hl, #0x1620
   1596 E5            [11] 4142 	push	hl
   1597 CDr00r00      [17] 4143 	call	_cpct_zx7b_decrunch_s
                           4144 ;src/main.c:1280: break;
   159A C9            [10] 4145 	ret
                           4146 ;src/main.c:1282: case 1: { // upper left deck upper floor #2
   159B                    4147 00102$:
                           4148 ;src/main.c:1284: SetEnemyParams(1, PELUSOID,		M_diagonal, 	3,	D_right,  8,  52,    8,   52,   64,  160);
   159B 21 40 A0      [10] 4149 	ld	hl, #0xa040
   159E E5            [11] 4150 	push	hl
   159F 21 08 34      [10] 4151 	ld	hl, #0x3408
   15A2 E5            [11] 4152 	push	hl
   15A3 2E 08         [ 7] 4153 	ld	l, #0x08
   15A5 E5            [11] 4154 	push	hl
   15A6 21 03 03      [10] 4155 	ld	hl, #0x0303
   15A9 E5            [11] 4156 	push	hl
   15AA 21 01 02      [10] 4157 	ld	hl, #0x0201
   15AD E5            [11] 4158 	push	hl
   15AE 3E 01         [ 7] 4159 	ld	a, #0x01
   15B0 F5            [11] 4160 	push	af
   15B1 33            [ 6] 4161 	inc	sp
   15B2 CDr99r14      [17] 4162 	call	_SetEnemyParams
   15B5 21 0B 00      [10] 4163 	ld	hl, #11
   15B8 39            [11] 4164 	add	hl, sp
   15B9 F9            [ 6] 4165 	ld	sp, hl
                           4166 ;src/main.c:1285: SetEnemyParams(2, PELUSOID, 	M_linear_Y, 	3,	D_right, 32,  52,   32,   52,   32,  160);		
   15BA 21 20 A0      [10] 4167 	ld	hl, #0xa020
   15BD E5            [11] 4168 	push	hl
   15BE 26 34         [ 7] 4169 	ld	h, #0x34
   15C0 E5            [11] 4170 	push	hl
   15C1 2E 20         [ 7] 4171 	ld	l, #0x20
   15C3 E5            [11] 4172 	push	hl
   15C4 21 03 03      [10] 4173 	ld	hl, #0x0303
   15C7 E5            [11] 4174 	push	hl
   15C8 21 01 01      [10] 4175 	ld	hl, #0x0101
   15CB E5            [11] 4176 	push	hl
   15CC 3E 02         [ 7] 4177 	ld	a, #0x02
   15CE F5            [11] 4178 	push	af
   15CF 33            [ 6] 4179 	inc	sp
   15D0 CDr99r14      [17] 4180 	call	_SetEnemyParams
   15D3 21 0B 00      [10] 4181 	ld	hl, #11
   15D6 39            [11] 4182 	add	hl, sp
   15D7 F9            [ 6] 4183 	ld	sp, hl
                           4184 ;src/main.c:1286: SetEnemyParams(3, PELUSOID, 	M_linear_X,		0,	D_right,  0,   0,    0,    0,    0,    0);
   15D8 21 00 00      [10] 4185 	ld	hl, #0x0000
   15DB E5            [11] 4186 	push	hl
   15DC 2E 00         [ 7] 4187 	ld	l, #0x00
   15DE E5            [11] 4188 	push	hl
   15DF 2E 00         [ 7] 4189 	ld	l, #0x00
   15E1 E5            [11] 4190 	push	hl
   15E2 26 03         [ 7] 4191 	ld	h, #0x03
   15E4 E5            [11] 4192 	push	hl
   15E5 21 01 00      [10] 4193 	ld	hl, #0x0001
   15E8 E5            [11] 4194 	push	hl
   15E9 3E 03         [ 7] 4195 	ld	a, #0x03
   15EB F5            [11] 4196 	push	af
   15EC 33            [ 6] 4197 	inc	sp
   15ED CDr99r14      [17] 4198 	call	_SetEnemyParams
   15F0 21 0B 00      [10] 4199 	ld	hl, #11
   15F3 39            [11] 4200 	add	hl, sp
   15F4 F9            [ 6] 4201 	ld	sp, hl
                           4202 ;src/main.c:1288: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk1_end);
   15F5 21rD3r00      [10] 4203 	ld	hl, #(_mappk1 + 0x00d3)
   15F8 E5            [11] 4204 	push	hl
   15F9 21 20 16      [10] 4205 	ld	hl, #0x1620
   15FC E5            [11] 4206 	push	hl
   15FD CDr00r00      [17] 4207 	call	_cpct_zx7b_decrunch_s
                           4208 ;src/main.c:1289: break;		
   1600 C9            [10] 4209 	ret
                           4210 ;src/main.c:1291: case 2: { // upper left deck upper floor #1
   1601                    4211 00103$:
                           4212 ;src/main.c:1293: SetEnemyParams(1, INFECTED,		M_linear_X,		2,	D_left, 32,  96,    8,   96,   64,   96);
   1601 21 40 60      [10] 4213 	ld	hl, #0x6040
   1604 E5            [11] 4214 	push	hl
   1605 2E 08         [ 7] 4215 	ld	l, #0x08
   1607 E5            [11] 4216 	push	hl
   1608 2E 20         [ 7] 4217 	ld	l, #0x20
   160A E5            [11] 4218 	push	hl
   160B 21 02 02      [10] 4219 	ld	hl, #0x0202
   160E E5            [11] 4220 	push	hl
   160F 21 03 00      [10] 4221 	ld	hl, #0x0003
   1612 E5            [11] 4222 	push	hl
   1613 3E 01         [ 7] 4223 	ld	a, #0x01
   1615 F5            [11] 4224 	push	af
   1616 33            [ 6] 4225 	inc	sp
   1617 CDr99r14      [17] 4226 	call	_SetEnemyParams
   161A 21 0B 00      [10] 4227 	ld	hl, #11
   161D 39            [11] 4228 	add	hl, sp
   161E F9            [ 6] 4229 	ld	sp, hl
                           4230 ;src/main.c:1294: SetEnemyParams(2, INFECTED, 	M_linear_X, 	2,	D_left, 64, 128,   16,  128,   64,  128);
   161F 21 40 80      [10] 4231 	ld	hl, #0x8040
   1622 E5            [11] 4232 	push	hl
   1623 2E 10         [ 7] 4233 	ld	l, #0x10
   1625 E5            [11] 4234 	push	hl
   1626 2E 40         [ 7] 4235 	ld	l, #0x40
   1628 E5            [11] 4236 	push	hl
   1629 21 02 02      [10] 4237 	ld	hl, #0x0202
   162C E5            [11] 4238 	push	hl
   162D 21 03 00      [10] 4239 	ld	hl, #0x0003
   1630 E5            [11] 4240 	push	hl
   1631 3E 02         [ 7] 4241 	ld	a, #0x02
   1633 F5            [11] 4242 	push	af
   1634 33            [ 6] 4243 	inc	sp
   1635 CDr99r14      [17] 4244 	call	_SetEnemyParams
   1638 21 0B 00      [10] 4245 	ld	hl, #11
   163B 39            [11] 4246 	add	hl, sp
   163C F9            [ 6] 4247 	ld	sp, hl
                           4248 ;src/main.c:1295: SetEnemyParams(3, INFECTED, 	M_linear_X,		2,	D_right, 24, 160,   8,  160,   48,  160);
   163D 21 30 A0      [10] 4249 	ld	hl, #0xa030
   1640 E5            [11] 4250 	push	hl
   1641 2E 08         [ 7] 4251 	ld	l, #0x08
   1643 E5            [11] 4252 	push	hl
   1644 2E 18         [ 7] 4253 	ld	l, #0x18
   1646 E5            [11] 4254 	push	hl
   1647 21 02 03      [10] 4255 	ld	hl, #0x0302
   164A E5            [11] 4256 	push	hl
   164B 21 03 00      [10] 4257 	ld	hl, #0x0003
   164E E5            [11] 4258 	push	hl
   164F 3E 03         [ 7] 4259 	ld	a, #0x03
   1651 F5            [11] 4260 	push	af
   1652 33            [ 6] 4261 	inc	sp
   1653 CDr99r14      [17] 4262 	call	_SetEnemyParams
   1656 21 0B 00      [10] 4263 	ld	hl, #11
   1659 39            [11] 4264 	add	hl, sp
   165A F9            [ 6] 4265 	ld	sp, hl
                           4266 ;src/main.c:1297: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk2_end);
   165B 21rE1r00      [10] 4267 	ld	hl, #(_mappk2 + 0x00e1)
   165E E5            [11] 4268 	push	hl
   165F 21 20 16      [10] 4269 	ld	hl, #0x1620
   1662 E5            [11] 4270 	push	hl
   1663 CDr00r00      [17] 4271 	call	_cpct_zx7b_decrunch_s
                           4272 ;src/main.c:1299: }
   1666 C9            [10] 4273 	ret
                           4274 ;src/main.c:1304: void ExplosionSecuence(TSpr *pSpr) __z88dk_fastcall {
                           4275 ;	---------------------------------
                           4276 ; Function ExplosionSecuence
                           4277 ; ---------------------------------
   1667                    4278 _ExplosionSecuence::
   1667 4D            [ 4] 4279 	ld	c, l
   1668 44            [ 4] 4280 	ld	b, h
                           4281 ;src/main.c:1305: if (pSpr->touched == 10) DeleteSprite(pSpr); 	
   1669 21 0A 00      [10] 4282 	ld	hl, #0x000a
   166C 09            [11] 4283 	add	hl,bc
   166D EB            [ 4] 4284 	ex	de,hl
   166E 1A            [ 7] 4285 	ld	a, (de)
   166F 6F            [ 4] 4286 	ld	l,a
   1670 D6 0A         [ 7] 4287 	sub	a, #0x0a
   1672 20 09         [12] 4288 	jr	NZ,00113$
   1674 D5            [11] 4289 	push	de
   1675 69            [ 4] 4290 	ld	l, c
   1676 60            [ 4] 4291 	ld	h, b
   1677 CDrE9r08      [17] 4292 	call	_DeleteSprite
   167A D1            [10] 4293 	pop	de
   167B 18 43         [12] 4294 	jr	00114$
   167D                    4295 00113$:
                           4296 ;src/main.c:1306: else if (pSpr->touched > 8) PrintExplosion(pSpr, 0);
   167D 3E 08         [ 7] 4297 	ld	a, #0x08
   167F 95            [ 4] 4298 	sub	a, l
   1680 30 0D         [12] 4299 	jr	NC,00110$
   1682 D5            [11] 4300 	push	de
   1683 AF            [ 4] 4301 	xor	a, a
   1684 F5            [11] 4302 	push	af
   1685 33            [ 6] 4303 	inc	sp
   1686 C5            [11] 4304 	push	bc
   1687 CDr48r09      [17] 4305 	call	_PrintExplosion
   168A F1            [10] 4306 	pop	af
   168B 33            [ 6] 4307 	inc	sp
   168C D1            [10] 4308 	pop	de
   168D 18 31         [12] 4309 	jr	00114$
   168F                    4310 00110$:
                           4311 ;src/main.c:1307: else if (pSpr->touched > 6) PrintExplosion(pSpr, 1);
   168F 3E 06         [ 7] 4312 	ld	a, #0x06
   1691 95            [ 4] 4313 	sub	a, l
   1692 30 0E         [12] 4314 	jr	NC,00107$
   1694 D5            [11] 4315 	push	de
   1695 3E 01         [ 7] 4316 	ld	a, #0x01
   1697 F5            [11] 4317 	push	af
   1698 33            [ 6] 4318 	inc	sp
   1699 C5            [11] 4319 	push	bc
   169A CDr48r09      [17] 4320 	call	_PrintExplosion
   169D F1            [10] 4321 	pop	af
   169E 33            [ 6] 4322 	inc	sp
   169F D1            [10] 4323 	pop	de
   16A0 18 1E         [12] 4324 	jr	00114$
   16A2                    4325 00107$:
                           4326 ;src/main.c:1308: else if (pSpr->touched > 4) PrintExplosion(pSpr, 0);
   16A2 3E 04         [ 7] 4327 	ld	a, #0x04
   16A4 95            [ 4] 4328 	sub	a, l
   16A5 30 0D         [12] 4329 	jr	NC,00104$
   16A7 D5            [11] 4330 	push	de
   16A8 AF            [ 4] 4331 	xor	a, a
   16A9 F5            [11] 4332 	push	af
   16AA 33            [ 6] 4333 	inc	sp
   16AB C5            [11] 4334 	push	bc
   16AC CDr48r09      [17] 4335 	call	_PrintExplosion
   16AF F1            [10] 4336 	pop	af
   16B0 33            [ 6] 4337 	inc	sp
   16B1 D1            [10] 4338 	pop	de
   16B2 18 0C         [12] 4339 	jr	00114$
   16B4                    4340 00104$:
                           4341 ;src/main.c:1309: else if (pSpr->touched > 2) DeleteSprite(pSpr); 
   16B4 3E 02         [ 7] 4342 	ld	a, #0x02
   16B6 95            [ 4] 4343 	sub	a, l
   16B7 30 07         [12] 4344 	jr	NC,00114$
   16B9 D5            [11] 4345 	push	de
   16BA 69            [ 4] 4346 	ld	l, c
   16BB 60            [ 4] 4347 	ld	h, b
   16BC CDrE9r08      [17] 4348 	call	_DeleteSprite
   16BF D1            [10] 4349 	pop	de
   16C0                    4350 00114$:
                           4351 ;src/main.c:1310: pSpr->touched--;
   16C0 1A            [ 7] 4352 	ld	a, (de)
   16C1 C6 FF         [ 7] 4353 	add	a, #0xff
   16C3 12            [ 7] 4354 	ld	(de), a
   16C4 C9            [10] 4355 	ret
                           4356 ;src/main.c:1315: void EnemyLoop(TSpr *pSpr) __z88dk_fastcall {
                           4357 ;	---------------------------------
                           4358 ; Function EnemyLoop
                           4359 ; ---------------------------------
   16C5                    4360 _EnemyLoop::
   16C5 DD E5         [15] 4361 	push	ix
   16C7 DD 21 00 00   [14] 4362 	ld	ix,#0
   16CB DD 39         [15] 4363 	add	ix,sp
   16CD F5            [11] 4364 	push	af
   16CE 4D            [ 4] 4365 	ld	c, l
   16CF 44            [ 4] 4366 	ld	b, h
                           4367 ;src/main.c:1316: if (pSpr->lives >= 1) // If the enemy sprite is alive
   16D0 C5            [11] 4368 	push	bc
   16D1 FD E1         [14] 4369 	pop	iy
   16D3 FD 56 09      [19] 4370 	ld	d, 9 (iy)
                           4371 ;src/main.c:1319: if (pSpr->touched == 0) 
   16D6 21 0A 00      [10] 4372 	ld	hl, #0x000a
   16D9 09            [11] 4373 	add	hl,bc
   16DA E3            [19] 4374 	ex	(sp), hl
   16DB E1            [10] 4375 	pop	hl
   16DC E5            [11] 4376 	push	hl
   16DD 5E            [ 7] 4377 	ld	e, (hl)
                           4378 ;src/main.c:1316: if (pSpr->lives >= 1) // If the enemy sprite is alive
   16DE 7A            [ 4] 4379 	ld	a, d
   16DF D6 01         [ 7] 4380 	sub	a, #0x01
   16E1 38 4B         [12] 4381 	jr	C,00111$
                           4382 ;src/main.c:1319: if (pSpr->touched == 0) 
   16E3 7B            [ 4] 4383 	ld	a, e
   16E4 B7            [ 4] 4384 	or	a, a
   16E5 20 07         [12] 4385 	jr	NZ,00102$
                           4386 ;src/main.c:1320: MoveEnemy(pSpr);
   16E7 C5            [11] 4387 	push	bc
   16E8 C5            [11] 4388 	push	bc
   16E9 CDr2Cr12      [17] 4389 	call	_MoveEnemy
   16EC F1            [10] 4390 	pop	af
   16ED C1            [10] 4391 	pop	bc
   16EE                    4392 00102$:
                           4393 ;src/main.c:1322: SelectSpriteFrame(pSpr); 
   16EE C5            [11] 4394 	push	bc
   16EF 69            [ 4] 4395 	ld	l, c
   16F0 60            [ 4] 4396 	ld	h, b
   16F1 CDr86r09      [17] 4397 	call	_SelectSpriteFrame
   16F4 C1            [10] 4398 	pop	bc
                           4399 ;src/main.c:1323: EnemyWalkAnim(pSpr);
   16F5 C5            [11] 4400 	push	bc
   16F6 69            [ 4] 4401 	ld	l, c
   16F7 60            [ 4] 4402 	ld	h, b
   16F8 CDrFFr09      [17] 4403 	call	_EnemyWalkAnim
   16FB C1            [10] 4404 	pop	bc
                           4405 ;src/main.c:1325: DeleteSprite(pSpr);
   16FC C5            [11] 4406 	push	bc
   16FD 69            [ 4] 4407 	ld	l, c
   16FE 60            [ 4] 4408 	ld	h, b
   16FF CDrE9r08      [17] 4409 	call	_DeleteSprite
   1702 C1            [10] 4410 	pop	bc
                           4411 ;src/main.c:1326: pSpr->px = pSpr->x; // save the current X coordinate
   1703 59            [ 4] 4412 	ld	e, c
   1704 50            [ 4] 4413 	ld	d, b
   1705 13            [ 6] 4414 	inc	de
   1706 13            [ 6] 4415 	inc	de
   1707 0A            [ 7] 4416 	ld	a, (bc)
   1708 12            [ 7] 4417 	ld	(de), a
                           4418 ;src/main.c:1327: pSpr->py = pSpr->y; // save the current Y coordinate
   1709 59            [ 4] 4419 	ld	e, c
   170A 50            [ 4] 4420 	ld	d, b
   170B 13            [ 6] 4421 	inc	de
   170C 13            [ 6] 4422 	inc	de
   170D 13            [ 6] 4423 	inc	de
   170E 69            [ 4] 4424 	ld	l, c
   170F 60            [ 4] 4425 	ld	h, b
   1710 23            [ 6] 4426 	inc	hl
   1711 7E            [ 7] 4427 	ld	a, (hl)
   1712 12            [ 7] 4428 	ld	(de), a
                           4429 ;src/main.c:1328: PrintSprite(pSpr);
   1713 C5            [11] 4430 	push	bc
   1714 69            [ 4] 4431 	ld	l, c
   1715 60            [ 4] 4432 	ld	h, b
   1716 CDrBFr08      [17] 4433 	call	_PrintSprite
   1719 C1            [10] 4434 	pop	bc
                           4435 ;src/main.c:1330: CheckEnemyCollision(pSpr);
   171A C5            [11] 4436 	push	bc
   171B C5            [11] 4437 	push	bc
   171C CDr0Br0A      [17] 4438 	call	_CheckEnemyCollision
   171F F1            [10] 4439 	pop	af
   1720 C1            [10] 4440 	pop	bc
                           4441 ;src/main.c:1332: if (pSpr->touched > 0) 
   1721 E1            [10] 4442 	pop	hl
   1722 E5            [11] 4443 	push	hl
   1723 7E            [ 7] 4444 	ld	a, (hl)
   1724 B7            [ 4] 4445 	or	a, a
   1725 28 22         [12] 4446 	jr	Z,00113$
                           4447 ;src/main.c:1333: ExplosionSecuence(pSpr);
   1727 69            [ 4] 4448 	ld	l, c
   1728 60            [ 4] 4449 	ld	h, b
   1729 CDr67r16      [17] 4450 	call	_ExplosionSecuence
   172C 18 1B         [12] 4451 	jr	00113$
   172E                    4452 00111$:
                           4453 ;src/main.c:1335: else if (pSpr->touched > 0) // enemy reached in his last life, will explode
   172E 7B            [ 4] 4454 	ld	a, e
   172F B7            [ 4] 4455 	or	a, a
   1730 28 07         [12] 4456 	jr	Z,00108$
                           4457 ;src/main.c:1337: ExplosionSecuence(pSpr);
   1732 69            [ 4] 4458 	ld	l, c
   1733 60            [ 4] 4459 	ld	h, b
   1734 CDr67r16      [17] 4460 	call	_ExplosionSecuence
   1737 18 10         [12] 4461 	jr	00113$
   1739                    4462 00108$:
                           4463 ;src/main.c:1339: else if (pSpr->status == S_touched) // at this point it has died and exploded
   1739 21 04 00      [10] 4464 	ld	hl, #0x0004
   173C 09            [11] 4465 	add	hl, bc
   173D 7E            [ 7] 4466 	ld	a, (hl)
   173E D6 08         [ 7] 4467 	sub	a, #0x08
   1740 20 07         [12] 4468 	jr	NZ,00113$
                           4469 ;src/main.c:1341: pSpr->status = S_walking;		
   1742 36 01         [10] 4470 	ld	(hl), #0x01
                           4471 ;src/main.c:1342: DeleteSprite(pSpr); 
   1744 69            [ 4] 4472 	ld	l, c
   1745 60            [ 4] 4473 	ld	h, b
   1746 CDrE9r08      [17] 4474 	call	_DeleteSprite
   1749                    4475 00113$:
   1749 DD F9         [10] 4476 	ld	sp, ix
   174B DD E1         [14] 4477 	pop	ix
   174D C9            [10] 4478 	ret
                           4479 ;src/main.c:1351: void ExplodeEnemies()
                           4480 ;	---------------------------------
                           4481 ; Function ExplodeEnemies
                           4482 ; ---------------------------------
   174E                    4483 _ExplodeEnemies::
                           4484 ;src/main.c:1353: for (ct = 1; ct < 4; ct++)
   174E 21r07r00      [10] 4485 	ld	hl,#_ct + 0
   1751 36 01         [10] 4486 	ld	(hl), #0x01
   1753 01r18r00      [10] 4487 	ld	bc, #_spr+0
   1756                    4488 00104$:
                           4489 ;src/main.c:1354: if (spr[ct].lives > 0)
   1756 ED 5Br07r00   [20] 4490 	ld	de, (_ct)
   175A 16 00         [ 7] 4491 	ld	d, #0x00
   175C 6B            [ 4] 4492 	ld	l, e
   175D 62            [ 4] 4493 	ld	h, d
   175E 29            [11] 4494 	add	hl, hl
   175F 29            [11] 4495 	add	hl, hl
   1760 29            [11] 4496 	add	hl, hl
   1761 19            [11] 4497 	add	hl, de
   1762 29            [11] 4498 	add	hl, hl
   1763 19            [11] 4499 	add	hl, de
   1764 09            [11] 4500 	add	hl, bc
   1765 11 09 00      [10] 4501 	ld	de, #0x0009
   1768 19            [11] 4502 	add	hl, de
   1769 7E            [ 7] 4503 	ld	a, (hl)
   176A B7            [ 4] 4504 	or	a, a
   176B CAr26r18      [10] 4505 	jp	Z, 00105$
                           4506 ;src/main.c:1356: cpct_akp_SFXPlay (4, 15, 40, 0, 0, AY_CHANNEL_A); // explosion
   176E C5            [11] 4507 	push	bc
   176F 3E 01         [ 7] 4508 	ld	a, #0x01
   1771 F5            [11] 4509 	push	af
   1772 33            [ 6] 4510 	inc	sp
   1773 21 00 00      [10] 4511 	ld	hl, #0x0000
   1776 E5            [11] 4512 	push	hl
   1777 2E 28         [ 7] 4513 	ld	l, #0x28
   1779 E5            [11] 4514 	push	hl
   177A 21 04 0F      [10] 4515 	ld	hl, #0x0f04
   177D E5            [11] 4516 	push	hl
   177E CDr00r00      [17] 4517 	call	_cpct_akp_SFXPlay
   1781 21 07 00      [10] 4518 	ld	hl, #7
   1784 39            [11] 4519 	add	hl, sp
   1785 F9            [ 6] 4520 	ld	sp, hl
   1786 C1            [10] 4521 	pop	bc
                           4522 ;src/main.c:1357: PrintExplosion(&spr[ct], 0); Pause(20);
   1787 ED 5Br07r00   [20] 4523 	ld	de, (_ct)
   178B 16 00         [ 7] 4524 	ld	d, #0x00
   178D 6B            [ 4] 4525 	ld	l, e
   178E 62            [ 4] 4526 	ld	h, d
   178F 29            [11] 4527 	add	hl, hl
   1790 29            [11] 4528 	add	hl, hl
   1791 29            [11] 4529 	add	hl, hl
   1792 19            [11] 4530 	add	hl, de
   1793 29            [11] 4531 	add	hl, hl
   1794 19            [11] 4532 	add	hl, de
   1795 09            [11] 4533 	add	hl, bc
   1796 C5            [11] 4534 	push	bc
   1797 AF            [ 4] 4535 	xor	a, a
   1798 F5            [11] 4536 	push	af
   1799 33            [ 6] 4537 	inc	sp
   179A E5            [11] 4538 	push	hl
   179B CDr48r09      [17] 4539 	call	_PrintExplosion
   179E F1            [10] 4540 	pop	af
   179F 33            [ 6] 4541 	inc	sp
   17A0 21 14 00      [10] 4542 	ld	hl, #0x0014
   17A3 CDrCCr01      [17] 4543 	call	_Pause
   17A6 C1            [10] 4544 	pop	bc
                           4545 ;src/main.c:1358: PrintExplosion(&spr[ct], 1); Pause(20);
   17A7 ED 5Br07r00   [20] 4546 	ld	de, (_ct)
   17AB 16 00         [ 7] 4547 	ld	d, #0x00
   17AD 6B            [ 4] 4548 	ld	l, e
   17AE 62            [ 4] 4549 	ld	h, d
   17AF 29            [11] 4550 	add	hl, hl
   17B0 29            [11] 4551 	add	hl, hl
   17B1 29            [11] 4552 	add	hl, hl
   17B2 19            [11] 4553 	add	hl, de
   17B3 29            [11] 4554 	add	hl, hl
   17B4 19            [11] 4555 	add	hl, de
   17B5 09            [11] 4556 	add	hl, bc
   17B6 C5            [11] 4557 	push	bc
   17B7 3E 01         [ 7] 4558 	ld	a, #0x01
   17B9 F5            [11] 4559 	push	af
   17BA 33            [ 6] 4560 	inc	sp
   17BB E5            [11] 4561 	push	hl
   17BC CDr48r09      [17] 4562 	call	_PrintExplosion
   17BF F1            [10] 4563 	pop	af
   17C0 33            [ 6] 4564 	inc	sp
   17C1 21 14 00      [10] 4565 	ld	hl, #0x0014
   17C4 CDrCCr01      [17] 4566 	call	_Pause
   17C7 C1            [10] 4567 	pop	bc
                           4568 ;src/main.c:1359: PrintExplosion(&spr[ct], 0); Pause(20);
   17C8 ED 5Br07r00   [20] 4569 	ld	de, (_ct)
   17CC 16 00         [ 7] 4570 	ld	d, #0x00
   17CE 6B            [ 4] 4571 	ld	l, e
   17CF 62            [ 4] 4572 	ld	h, d
   17D0 29            [11] 4573 	add	hl, hl
   17D1 29            [11] 4574 	add	hl, hl
   17D2 29            [11] 4575 	add	hl, hl
   17D3 19            [11] 4576 	add	hl, de
   17D4 29            [11] 4577 	add	hl, hl
   17D5 19            [11] 4578 	add	hl, de
   17D6 09            [11] 4579 	add	hl, bc
   17D7 C5            [11] 4580 	push	bc
   17D8 AF            [ 4] 4581 	xor	a, a
   17D9 F5            [11] 4582 	push	af
   17DA 33            [ 6] 4583 	inc	sp
   17DB E5            [11] 4584 	push	hl
   17DC CDr48r09      [17] 4585 	call	_PrintExplosion
   17DF F1            [10] 4586 	pop	af
   17E0 33            [ 6] 4587 	inc	sp
   17E1 21 14 00      [10] 4588 	ld	hl, #0x0014
   17E4 CDrCCr01      [17] 4589 	call	_Pause
   17E7 C1            [10] 4590 	pop	bc
                           4591 ;src/main.c:1360: spr[ct].lives = 0;
   17E8 ED 5Br07r00   [20] 4592 	ld	de, (_ct)
   17EC 16 00         [ 7] 4593 	ld	d, #0x00
   17EE 6B            [ 4] 4594 	ld	l, e
   17EF 62            [ 4] 4595 	ld	h, d
   17F0 29            [11] 4596 	add	hl, hl
   17F1 29            [11] 4597 	add	hl, hl
   17F2 29            [11] 4598 	add	hl, hl
   17F3 19            [11] 4599 	add	hl, de
   17F4 29            [11] 4600 	add	hl, hl
   17F5 19            [11] 4601 	add	hl, de
   17F6 09            [11] 4602 	add	hl, bc
   17F7 11 09 00      [10] 4603 	ld	de, #0x0009
   17FA 19            [11] 4604 	add	hl, de
   17FB 36 00         [10] 4605 	ld	(hl), #0x00
                           4606 ;src/main.c:1361: spr[ct].status = S_walking;
   17FD ED 5Br07r00   [20] 4607 	ld	de, (_ct)
   1801 16 00         [ 7] 4608 	ld	d, #0x00
   1803 6B            [ 4] 4609 	ld	l, e
   1804 62            [ 4] 4610 	ld	h, d
   1805 29            [11] 4611 	add	hl, hl
   1806 29            [11] 4612 	add	hl, hl
   1807 29            [11] 4613 	add	hl, hl
   1808 19            [11] 4614 	add	hl, de
   1809 29            [11] 4615 	add	hl, hl
   180A 19            [11] 4616 	add	hl, de
   180B 09            [11] 4617 	add	hl, bc
   180C 11 04 00      [10] 4618 	ld	de, #0x0004
   180F 19            [11] 4619 	add	hl, de
   1810 36 01         [10] 4620 	ld	(hl), #0x01
                           4621 ;src/main.c:1362: DeleteSprite(&spr[ct]);
   1812 ED 5Br07r00   [20] 4622 	ld	de, (_ct)
   1816 16 00         [ 7] 4623 	ld	d, #0x00
   1818 6B            [ 4] 4624 	ld	l, e
   1819 62            [ 4] 4625 	ld	h, d
   181A 29            [11] 4626 	add	hl, hl
   181B 29            [11] 4627 	add	hl, hl
   181C 29            [11] 4628 	add	hl, hl
   181D 19            [11] 4629 	add	hl, de
   181E 29            [11] 4630 	add	hl, hl
   181F 19            [11] 4631 	add	hl, de
   1820 09            [11] 4632 	add	hl, bc
   1821 C5            [11] 4633 	push	bc
   1822 CDrE9r08      [17] 4634 	call	_DeleteSprite
   1825 C1            [10] 4635 	pop	bc
   1826                    4636 00105$:
                           4637 ;src/main.c:1353: for (ct = 1; ct < 4; ct++)
   1826 FD 21r07r00   [14] 4638 	ld	iy, #_ct
   182A FD 34 00      [23] 4639 	inc	0 (iy)
   182D FD 7E 00      [19] 4640 	ld	a, 0 (iy)
   1830 D6 04         [ 7] 4641 	sub	a, #0x04
   1832 DAr56r17      [10] 4642 	jp	C, 00104$
   1835 C9            [10] 4643 	ret
                           4644 ;src/main.c:1385: void SetLC() 
                           4645 ;	---------------------------------
                           4646 ; Function SetLC
                           4647 ; ---------------------------------
   1836                    4648 _SetLC::
                           4649 ;src/main.c:1387: if (shotLC.active == FALSE) // if there is no laser shot on screen ...
   1836 21r6Fr00      [10] 4650 	ld	hl, #_shotLC + 5
   1839 7E            [ 7] 4651 	ld	a, (hl)
   183A B7            [ 4] 4652 	or	a, a
   183B C0            [11] 4653 	ret	NZ
                           4654 ;src/main.c:1389: cpct_akp_SFXPlay(1, 15, 40, 0, 0, AY_CHANNEL_A);
   183C E5            [11] 4655 	push	hl
   183D 3E 01         [ 7] 4656 	ld	a, #0x01
   183F F5            [11] 4657 	push	af
   1840 33            [ 6] 4658 	inc	sp
   1841 01 00 00      [10] 4659 	ld	bc, #0x0000
   1844 C5            [11] 4660 	push	bc
   1845 01 28 00      [10] 4661 	ld	bc, #0x0028
   1848 C5            [11] 4662 	push	bc
   1849 01 01 0F      [10] 4663 	ld	bc, #0x0f01
   184C C5            [11] 4664 	push	bc
   184D CDr00r00      [17] 4665 	call	_cpct_akp_SFXPlay
   1850 21 07 00      [10] 4666 	ld	hl, #7
   1853 39            [11] 4667 	add	hl, sp
   1854 F9            [ 6] 4668 	ld	sp, hl
   1855 E1            [10] 4669 	pop	hl
                           4670 ;src/main.c:1390: shotLC.active = TRUE;
   1856 36 01         [10] 4671 	ld	(hl), #0x01
                           4672 ;src/main.c:1392: shotLC.dir = lc[activeLC].dir;
   1858 01r71r00      [10] 4673 	ld	bc, #_lc+0
   185B ED 5Br70r00   [20] 4674 	ld	de, (_activeLC)
   185F 16 00         [ 7] 4675 	ld	d, #0x00
   1861 6B            [ 4] 4676 	ld	l, e
   1862 62            [ 4] 4677 	ld	h, d
   1863 29            [11] 4678 	add	hl, hl
   1864 29            [11] 4679 	add	hl, hl
   1865 19            [11] 4680 	add	hl, de
   1866 09            [11] 4681 	add	hl, bc
   1867 11 04 00      [10] 4682 	ld	de, #0x0004
   186A 19            [11] 4683 	add	hl, de
   186B 5E            [ 7] 4684 	ld	e, (hl)
   186C 21r6Dr00      [10] 4685 	ld	hl, #(_shotLC + 0x0003)
   186F 73            [ 7] 4686 	ld	(hl), e
                           4687 ;src/main.c:1394: shotLC.y = lc[activeLC].y + 4;
   1870 D5            [11] 4688 	push	de
   1871 ED 5Br70r00   [20] 4689 	ld	de, (_activeLC)
   1875 16 00         [ 7] 4690 	ld	d, #0x00
   1877 6B            [ 4] 4691 	ld	l, e
   1878 62            [ 4] 4692 	ld	h, d
   1879 29            [11] 4693 	add	hl, hl
   187A 29            [11] 4694 	add	hl, hl
   187B 19            [11] 4695 	add	hl, de
   187C D1            [10] 4696 	pop	de
   187D 09            [11] 4697 	add	hl, bc
   187E 23            [ 6] 4698 	inc	hl
   187F 7E            [ 7] 4699 	ld	a, (hl)
   1880 C6 04         [ 7] 4700 	add	a, #0x04
   1882 32r6Cr00      [13] 4701 	ld	(#(_shotLC + 0x0002)),a
                           4702 ;src/main.c:1392: shotLC.dir = lc[activeLC].dir;
   1885 D5            [11] 4703 	push	de
   1886 ED 5Br70r00   [20] 4704 	ld	de, (_activeLC)
   188A 16 00         [ 7] 4705 	ld	d, #0x00
   188C 6B            [ 4] 4706 	ld	l, e
   188D 62            [ 4] 4707 	ld	h, d
   188E 29            [11] 4708 	add	hl, hl
   188F 29            [11] 4709 	add	hl, hl
   1890 19            [11] 4710 	add	hl, de
   1891 D1            [10] 4711 	pop	de
                           4712 ;src/main.c:1397: shotLC.x = shotLC.px = lc[activeLC].x + SPR_W;
   1892 09            [11] 4713 	add	hl, bc
   1893 4E            [ 7] 4714 	ld	c, (hl)
                           4715 ;src/main.c:1396: if (shotLC.dir == D_right)
   1894 7B            [ 4] 4716 	ld	a, e
   1895 D6 03         [ 7] 4717 	sub	a, #0x03
   1897 20 0A         [12] 4718 	jr	NZ,00102$
                           4719 ;src/main.c:1397: shotLC.x = shotLC.px = lc[activeLC].x + SPR_W;
   1899 79            [ 4] 4720 	ld	a, c
   189A C6 08         [ 7] 4721 	add	a, #0x08
   189C 32r6Br00      [13] 4722 	ld	(#(_shotLC + 0x0001)),a
   189F 32r6Ar00      [13] 4723 	ld	(#_shotLC),a
   18A2 C9            [10] 4724 	ret
   18A3                    4725 00102$:
                           4726 ;src/main.c:1399: shotLC.x = shotLC.px = lc[activeLC].x - SPR_W;
   18A3 79            [ 4] 4727 	ld	a, c
   18A4 C6 F8         [ 7] 4728 	add	a, #0xf8
   18A6 32r6Br00      [13] 4729 	ld	(#(_shotLC + 0x0001)),a
   18A9 32r6Ar00      [13] 4730 	ld	(#_shotLC),a
   18AC C9            [10] 4731 	ret
                           4732 ;src/main.c:1405: void GetLC() {
                           4733 ;	---------------------------------
                           4734 ; Function GetLC
                           4735 ; ---------------------------------
   18AD                    4736 _GetLC::
                           4737 ;src/main.c:1406: ct = 0;
   18AD 21r07r00      [10] 4738 	ld	hl,#_ct + 0
   18B0 36 00         [10] 4739 	ld	(hl), #0x00
                           4740 ;src/main.c:1407: activeLC = 0;
   18B2 21r70r00      [10] 4741 	ld	hl,#_activeLC + 0
   18B5 36 00         [10] 4742 	ld	(hl), #0x00
                           4743 ;src/main.c:1409: while (ct < N_MAX_LC)	{
   18B7 01r71r00      [10] 4744 	ld	bc, #_lc+0
   18BA                    4745 00103$:
   18BA 3Ar07r00      [13] 4746 	ld	a,(#_ct + 0)
   18BD D6 03         [ 7] 4747 	sub	a, #0x03
   18BF D0            [11] 4748 	ret	NC
                           4749 ;src/main.c:1410: if (lc[ct].mapNumber == mapNumber)	{
   18C0 ED 5Br07r00   [20] 4750 	ld	de, (_ct)
   18C4 16 00         [ 7] 4751 	ld	d, #0x00
   18C6 6B            [ 4] 4752 	ld	l, e
   18C7 62            [ 4] 4753 	ld	h, d
   18C8 29            [11] 4754 	add	hl, hl
   18C9 29            [11] 4755 	add	hl, hl
   18CA 19            [11] 4756 	add	hl, de
   18CB 09            [11] 4757 	add	hl, bc
   18CC 23            [ 6] 4758 	inc	hl
   18CD 23            [ 6] 4759 	inc	hl
   18CE 5E            [ 7] 4760 	ld	e, (hl)
   18CF 3Ar00r00      [13] 4761 	ld	a,(#_mapNumber + 0)
   18D2 93            [ 4] 4762 	sub	a, e
   18D3 20 07         [12] 4763 	jr	NZ,00102$
                           4764 ;src/main.c:1411: activeLC = ct;
   18D5 3Ar07r00      [13] 4765 	ld	a,(#_ct + 0)
   18D8 32r70r00      [13] 4766 	ld	(#_activeLC + 0),a
                           4767 ;src/main.c:1412: break;
   18DB C9            [10] 4768 	ret
   18DC                    4769 00102$:
                           4770 ;src/main.c:1414: ct++;
   18DC 21r07r00      [10] 4771 	ld	hl, #_ct+0
   18DF 34            [11] 4772 	inc	(hl)
   18E0 18 D8         [12] 4773 	jr	00103$
                           4774 ;src/main.c:1431: void InitLC()
                           4775 ;	---------------------------------
                           4776 ; Function InitLC
                           4777 ; ---------------------------------
   18E2                    4778 _InitLC::
                           4779 ;src/main.c:1422: lc[LCNum].x = x; 
   18E2 21r71r00      [10] 4780 	ld	hl, #_lc
   18E5 36 00         [10] 4781 	ld	(hl), #0x00
                           4782 ;src/main.c:1423: lc[LCNum].y = y;
   18E7 21r72r00      [10] 4783 	ld	hl, #(_lc + 0x0001)
   18EA 36 00         [10] 4784 	ld	(hl), #0x00
                           4785 ;src/main.c:1424: lc[LCNum].mapNumber = mapNum;
   18EC 21r73r00      [10] 4786 	ld	hl, #(_lc + 0x0002)
   18EF 36 FF         [10] 4787 	ld	(hl), #0xff
                           4788 ;src/main.c:1425: lc[LCNum].dir = dir;
   18F1 21r75r00      [10] 4789 	ld	hl, #(_lc + 0x0004)
   18F4 36 03         [10] 4790 	ld	(hl), #0x03
                           4791 ;src/main.c:1422: lc[LCNum].x = x; 
   18F6 21r76r00      [10] 4792 	ld	hl, #(_lc + 0x0005)
   18F9 36 0C         [10] 4793 	ld	(hl), #0x0c
                           4794 ;src/main.c:1423: lc[LCNum].y = y;
   18FB 21r77r00      [10] 4795 	ld	hl, #(_lc + 0x0006)
   18FE 36 80         [10] 4796 	ld	(hl), #0x80
                           4797 ;src/main.c:1424: lc[LCNum].mapNumber = mapNum;
   1900 21r78r00      [10] 4798 	ld	hl, #(_lc + 0x0007)
   1903 36 00         [10] 4799 	ld	(hl), #0x00
                           4800 ;src/main.c:1425: lc[LCNum].dir = dir;
   1905 21r7Ar00      [10] 4801 	ld	hl, #(_lc + 0x0009)
   1908 36 03         [10] 4802 	ld	(hl), #0x03
                           4803 ;src/main.c:1422: lc[LCNum].x = x; 
   190A 21r7Br00      [10] 4804 	ld	hl, #(_lc + 0x000a)
   190D 36 36         [10] 4805 	ld	(hl), #0x36
                           4806 ;src/main.c:1423: lc[LCNum].y = y;
   190F 21r7Cr00      [10] 4807 	ld	hl, #(_lc + 0x000b)
   1912 36 3C         [10] 4808 	ld	(hl), #0x3c
                           4809 ;src/main.c:1424: lc[LCNum].mapNumber = mapNum;
   1914 21r7Dr00      [10] 4810 	ld	hl, #(_lc + 0x000c)
   1917 36 01         [10] 4811 	ld	(hl), #0x01
                           4812 ;src/main.c:1425: lc[LCNum].dir = dir;
   1919 21r7Fr00      [10] 4813 	ld	hl, #(_lc + 0x000e)
   191C 36 02         [10] 4814 	ld	(hl), #0x02
                           4815 ;src/main.c:1436: SetParamLC(2, 54,  60,   1, D_left);
   191E C9            [10] 4816 	ret
                           4817 ;src/main.c:1441: void CheckLCCollisions()
                           4818 ;	---------------------------------
                           4819 ; Function CheckLCCollisions
                           4820 ; ---------------------------------
   191F                    4821 _CheckLCCollisions::
   191F DD E5         [15] 4822 	push	ix
   1921 DD 21 00 00   [14] 4823 	ld	ix,#0
   1925 DD 39         [15] 4824 	add	ix,sp
   1927 F5            [11] 4825 	push	af
                           4826 ;src/main.c:1443: if ((shotLC.x + SPR_W) > (spr[0].x + 4) && shotLC.x < (spr[0].x + SPR_W))
   1928 21r6Ar00      [10] 4827 	ld	hl, #_shotLC+0
   192B 4E            [ 7] 4828 	ld	c, (hl)
   192C 06 00         [ 7] 4829 	ld	b, #0x00
   192E 21 08 00      [10] 4830 	ld	hl, #0x0008
   1931 09            [11] 4831 	add	hl,bc
   1932 E3            [19] 4832 	ex	(sp), hl
   1933 21r18r00      [10] 4833 	ld	hl, #_spr+0
   1936 5E            [ 7] 4834 	ld	e, (hl)
   1937 16 00         [ 7] 4835 	ld	d, #0x00
   1939 21 04 00      [10] 4836 	ld	hl, #0x0004
   193C 19            [11] 4837 	add	hl, de
   193D 7D            [ 4] 4838 	ld	a, l
   193E DD 96 FE      [19] 4839 	sub	a, -2 (ix)
   1941 7C            [ 4] 4840 	ld	a, h
   1942 DD 9E FF      [19] 4841 	sbc	a, -1 (ix)
   1945 E2r4Ar19      [10] 4842 	jp	PO, 00125$
   1948 EE 80         [ 7] 4843 	xor	a, #0x80
   194A                    4844 00125$:
   194A F2rA6r19      [10] 4845 	jp	P, 00107$
   194D 21 08 00      [10] 4846 	ld	hl, #0x0008
   1950 19            [11] 4847 	add	hl, de
   1951 79            [ 4] 4848 	ld	a, c
   1952 95            [ 4] 4849 	sub	a, l
   1953 78            [ 4] 4850 	ld	a, b
   1954 9C            [ 4] 4851 	sbc	a, h
   1955 E2r5Ar19      [10] 4852 	jp	PO, 00126$
   1958 EE 80         [ 7] 4853 	xor	a, #0x80
   195A                    4854 00126$:
   195A F2rA6r19      [10] 4855 	jp	P, 00107$
                           4856 ;src/main.c:1444: if ((shotLC.y + SPR_H) > (spr[0].y - 1) && (shotLC.y - 1) < (spr[0].y + SPR_H))
   195D 21r6Cr00      [10] 4857 	ld	hl, #_shotLC + 2
   1960 4E            [ 7] 4858 	ld	c, (hl)
   1961 06 00         [ 7] 4859 	ld	b, #0x00
   1963 21 10 00      [10] 4860 	ld	hl, #0x0010
   1966 09            [11] 4861 	add	hl,bc
   1967 E3            [19] 4862 	ex	(sp), hl
   1968 21r19r00      [10] 4863 	ld	hl, #_spr + 1
   196B 5E            [ 7] 4864 	ld	e, (hl)
   196C 16 00         [ 7] 4865 	ld	d, #0x00
   196E 6B            [ 4] 4866 	ld	l, e
   196F 62            [ 4] 4867 	ld	h, d
   1970 2B            [ 6] 4868 	dec	hl
   1971 7D            [ 4] 4869 	ld	a, l
   1972 DD 96 FE      [19] 4870 	sub	a, -2 (ix)
   1975 7C            [ 4] 4871 	ld	a, h
   1976 DD 9E FF      [19] 4872 	sbc	a, -1 (ix)
   1979 E2r7Er19      [10] 4873 	jp	PO, 00127$
   197C EE 80         [ 7] 4874 	xor	a, #0x80
   197E                    4875 00127$:
   197E F2rA6r19      [10] 4876 	jp	P, 00107$
   1981 0B            [ 6] 4877 	dec	bc
   1982 21 10 00      [10] 4878 	ld	hl, #0x0010
   1985 19            [11] 4879 	add	hl, de
   1986 79            [ 4] 4880 	ld	a, c
   1987 95            [ 4] 4881 	sub	a, l
   1988 78            [ 4] 4882 	ld	a, b
   1989 9C            [ 4] 4883 	sbc	a, h
   198A E2r8Fr19      [10] 4884 	jp	PO, 00128$
   198D EE 80         [ 7] 4885 	xor	a, #0x80
   198F                    4886 00128$:
   198F F2rA6r19      [10] 4887 	jp	P, 00107$
                           4888 ;src/main.c:1447: shotLC.active = FALSE;
   1992 21r6Fr00      [10] 4889 	ld	hl, #(_shotLC + 0x0005)
   1995 36 00         [10] 4890 	ld	(hl), #0x00
                           4891 ;src/main.c:1448: spr[0].lives--;
   1997 21r21r00      [10] 4892 	ld	hl, #_spr + 9
   199A 4E            [ 7] 4893 	ld	c, (hl)
   199B 0D            [ 4] 4894 	dec	c
   199C 71            [ 7] 4895 	ld	(hl), c
                           4896 ;src/main.c:1449: ExplodePlayer();
   199D CDrDEr10      [17] 4897 	call	_ExplodePlayer
                           4898 ;src/main.c:1450: ExplodeEnemies();
   19A0 CDr4Er17      [17] 4899 	call	_ExplodeEnemies
                           4900 ;src/main.c:1451: GameOver();
   19A3 CDrF5r1B      [17] 4901 	call	_GameOver
   19A6                    4902 00107$:
   19A6 DD F9         [10] 4903 	ld	sp, ix
   19A8 DD E1         [14] 4904 	pop	ix
   19AA C9            [10] 4905 	ret
                           4906 ;src/main.c:1472: void PrintStartMenu() {
                           4907 ;	---------------------------------
                           4908 ; Function PrintStartMenu
                           4909 ; ---------------------------------
   19AB                    4910 _PrintStartMenu::
                           4911 ;src/main.c:1473: cpct_drawSprite(g_logo, cpctm_screenPtr(CPCT_VMEM_START, 17, 0), G_LOGO_W, G_LOGO_H);
   19AB 21 2E 16      [10] 4912 	ld	hl, #0x162e
   19AE E5            [11] 4913 	push	hl
   19AF 21 11 C0      [10] 4914 	ld	hl, #0xc011
   19B2 E5            [11] 4915 	push	hl
   19B3 21r00r00      [10] 4916 	ld	hl, #_g_logo
   19B6 E5            [11] 4917 	push	hl
   19B7 CDr00r00      [17] 4918 	call	_cpct_drawSprite
                           4919 ;src/main.c:1475: PrintText("1@START@GAME", 2, 45);
   19BA 21 02 2D      [10] 4920 	ld	hl, #0x2d02
   19BD E5            [11] 4921 	push	hl
   19BE 21r04r1A      [10] 4922 	ld	hl, #___str_4
   19C1 E5            [11] 4923 	push	hl
   19C2 CDrA8r02      [17] 4924 	call	_PrintText
   19C5 F1            [10] 4925 	pop	af
                           4926 ;src/main.c:1476: PrintText("2@REDEFINE@CONTROLS", 2, 60);
   19C6 21 02 3C      [10] 4927 	ld	hl, #0x3c02
   19C9 E3            [19] 4928 	ex	(sp),hl
   19CA 21r11r1A      [10] 4929 	ld	hl, #___str_5
   19CD E5            [11] 4930 	push	hl
   19CE CDrA8r02      [17] 4931 	call	_PrintText
   19D1 F1            [10] 4932 	pop	af
                           4933 ;src/main.c:1478: PrintText("SALVAKANTERO", 16,140);
   19D2 21 10 8C      [10] 4934 	ld	hl, #0x8c10
   19D5 E3            [19] 4935 	ex	(sp),hl
   19D6 21r25r1A      [10] 4936 	ld	hl, #___str_6
   19D9 E5            [11] 4937 	push	hl
   19DA CDrA8r02      [17] 4938 	call	_PrintText
   19DD F1            [10] 4939 	pop	af
                           4940 ;src/main.c:1479: PrintText("FELIPE@VAKAPP", 14, 155);
   19DE 21 0E 9B      [10] 4941 	ld	hl, #0x9b0e
   19E1 E3            [19] 4942 	ex	(sp),hl
   19E2 21r32r1A      [10] 4943 	ld	hl, #___str_7
   19E5 E5            [11] 4944 	push	hl
   19E6 CDrA8r02      [17] 4945 	call	_PrintText
   19E9 F1            [10] 4946 	pop	af
                           4947 ;src/main.c:1480: PrintText("TACHA", 29,170);
   19EA 21 1D AA      [10] 4948 	ld	hl, #0xaa1d
   19ED E3            [19] 4949 	ex	(sp),hl
   19EE 21r40r1A      [10] 4950 	ld	hl, #___str_8
   19F1 E5            [11] 4951 	push	hl
   19F2 CDrA8r02      [17] 4952 	call	_PrintText
   19F5 F1            [10] 4953 	pop	af
                           4954 ;src/main.c:1482: PrintText("PLAY@ON@RETRO@2022", 4, 191);
   19F6 21 04 BF      [10] 4955 	ld	hl, #0xbf04
   19F9 E3            [19] 4956 	ex	(sp),hl
   19FA 21r46r1A      [10] 4957 	ld	hl, #___str_9
   19FD E5            [11] 4958 	push	hl
   19FE CDrA8r02      [17] 4959 	call	_PrintText
   1A01 F1            [10] 4960 	pop	af
   1A02 F1            [10] 4961 	pop	af
   1A03 C9            [10] 4962 	ret
   1A04                    4963 ___str_4:
   1A04 31 40 53 54 41 52  4964 	.ascii "1@START@GAME"
        54 40 47 41 4D 45
   1A10 00                 4965 	.db 0x00
   1A11                    4966 ___str_5:
   1A11 32 40 52 45 44 45  4967 	.ascii "2@REDEFINE@CONTROLS"
        46 49 4E 45 40 43
        4F 4E 54 52 4F 4C
        53
   1A24 00                 4968 	.db 0x00
   1A25                    4969 ___str_6:
   1A25 53 41 4C 56 41 4B  4970 	.ascii "SALVAKANTERO"
        41 4E 54 45 52 4F
   1A31 00                 4971 	.db 0x00
   1A32                    4972 ___str_7:
   1A32 46 45 4C 49 50 45  4973 	.ascii "FELIPE@VAKAPP"
        40 56 41 4B 41 50
        50
   1A3F 00                 4974 	.db 0x00
   1A40                    4975 ___str_8:
   1A40 54 41 43 48 41     4976 	.ascii "TACHA"
   1A45 00                 4977 	.db 0x00
   1A46                    4978 ___str_9:
   1A46 50 4C 41 59 40 4F  4979 	.ascii "PLAY@ON@RETRO@2022"
        4E 40 52 45 54 52
        4F 40 32 30 32 32
   1A58 00                 4980 	.db 0x00
                           4981 ;src/main.c:1486: void StartMenu() {
                           4982 ;	---------------------------------
                           4983 ; Function StartMenu
                           4984 ; ---------------------------------
   1A59                    4985 _StartMenu::
                           4986 ;src/main.c:1487: cpct_akp_musicInit(Menu); // initialize music. Main theme 
   1A59 21r00r00      [10] 4987 	ld	hl, #_Menu
   1A5C E5            [11] 4988 	push	hl
   1A5D CDr00r00      [17] 4989 	call	_cpct_akp_musicInit
   1A60 F1            [10] 4990 	pop	af
                           4991 ;src/main.c:1488: ClearScreen();
   1A61 CDr01r02      [17] 4992 	call	_ClearScreen
                           4993 ;src/main.c:1489: PrintStartMenu();
   1A64 CDrABr19      [17] 4994 	call	_PrintStartMenu
                           4995 ;src/main.c:1491: while(1) {
   1A67                    4996 00107$:
                           4997 ;src/main.c:1492: cpct_scanKeyboard_f();
   1A67 CDr00r00      [17] 4998 	call	_cpct_scanKeyboard_f
                           4999 ;src/main.c:1494: if(cpct_isKeyPressed(Key_1)) { // start game
   1A6A 21 08 01      [10] 5000 	ld	hl, #0x0108
   1A6D CDr00r00      [17] 5001 	call	_cpct_isKeyPressed
   1A70 7D            [ 4] 5002 	ld	a, l
   1A71 B7            [ 4] 5003 	or	a, a
   1A72 20 6D         [12] 5004 	jr	NZ,00108$
                           5005 ;src/main.c:1497: else if(cpct_isKeyPressed(Key_2)){ // redefine keys
   1A74 21 08 02      [10] 5006 	ld	hl, #0x0208
   1A77 CDr00r00      [17] 5007 	call	_cpct_isKeyPressed
   1A7A 7D            [ 4] 5008 	ld	a, l
   1A7B B7            [ 4] 5009 	or	a, a
   1A7C 28 5B         [12] 5010 	jr	Z,00105$
                           5011 ;src/main.c:1498: Wait4Key(Key_2);
   1A7E 21 08 02      [10] 5012 	ld	hl, #0x0208
   1A81 CDr43r05      [17] 5013 	call	_Wait4Key
                           5014 ;src/main.c:1499: ctlUp = 	RedefineKey("@@UP@");
   1A84 21r1Er1B      [10] 5015 	ld	hl, #___str_10
   1A87 CDr60r05      [17] 5016 	call	_RedefineKey
   1A8A 22r08r00      [16] 5017 	ld	(_ctlUp), hl
                           5018 ;src/main.c:1500: ctlDown = 	RedefineKey("@DOWN");
   1A8D 21r24r1B      [10] 5019 	ld	hl, #___str_11
   1A90 CDr60r05      [17] 5020 	call	_RedefineKey
   1A93 22r0Ar00      [16] 5021 	ld	(_ctlDown), hl
                           5022 ;src/main.c:1501: ctlLeft = 	RedefineKey("@LEFT");
   1A96 21r2Ar1B      [10] 5023 	ld	hl, #___str_12
   1A99 CDr60r05      [17] 5024 	call	_RedefineKey
   1A9C 22r0Cr00      [16] 5025 	ld	(_ctlLeft), hl
                           5026 ;src/main.c:1502: ctlRight = 	RedefineKey("RIGHT");
   1A9F 21r30r1B      [10] 5027 	ld	hl, #___str_13
   1AA2 CDr60r05      [17] 5028 	call	_RedefineKey
   1AA5 22r0Er00      [16] 5029 	ld	(_ctlRight), hl
                           5030 ;src/main.c:1503: ctlFire = 	RedefineKey("@FIRE");
   1AA8 21r36r1B      [10] 5031 	ld	hl, #___str_14
   1AAB CDr60r05      [17] 5032 	call	_RedefineKey
   1AAE 22r10r00      [16] 5033 	ld	(_ctlFire), hl
                           5034 ;src/main.c:1504: ctlAbort = 	RedefineKey("ABORT");
   1AB1 21r3Cr1B      [10] 5035 	ld	hl, #___str_15
   1AB4 CDr60r05      [17] 5036 	call	_RedefineKey
   1AB7 22r14r00      [16] 5037 	ld	(_ctlAbort), hl
                           5038 ;src/main.c:1505: ctlMusic = 	RedefineKey("MUSIC");
   1ABA 21r42r1B      [10] 5039 	ld	hl, #___str_16
   1ABD CDr60r05      [17] 5040 	call	_RedefineKey
   1AC0 22r12r00      [16] 5041 	ld	(_ctlMusic), hl
                           5042 ;src/main.c:1506: ctlPause =	RedefineKey("PAUSE");		
   1AC3 21r48r1B      [10] 5043 	ld	hl, #___str_17
   1AC6 CDr60r05      [17] 5044 	call	_RedefineKey
   1AC9 22r16r00      [16] 5045 	ld	(_ctlPause), hl
                           5046 ;src/main.c:1508: PrintText("@@@@@", 29, 100);
   1ACC 21 1D 64      [10] 5047 	ld	hl, #0x641d
   1ACF E5            [11] 5048 	push	hl
   1AD0 21r4Er1B      [10] 5049 	ld	hl, #___str_18
   1AD3 E5            [11] 5050 	push	hl
   1AD4 CDrA8r02      [17] 5051 	call	_PrintText
   1AD7 F1            [10] 5052 	pop	af
   1AD8 F1            [10] 5053 	pop	af
   1AD9                    5054 00105$:
                           5055 ;src/main.c:1510: Pause(3);
   1AD9 21 03 00      [10] 5056 	ld	hl, #0x0003
   1ADC CDrCCr01      [17] 5057 	call	_Pause
   1ADF 18 86         [12] 5058 	jr	00107$
   1AE1                    5059 00108$:
                           5060 ;src/main.c:1513: cpct_akp_musicInit(FX);
   1AE1 21r00r00      [10] 5061 	ld	hl, #_FX
   1AE4 E5            [11] 5062 	push	hl
   1AE5 CDr00r00      [17] 5063 	call	_cpct_akp_musicInit
                           5064 ;src/main.c:1514: cpct_akp_SFXPlay (6, 14, 41, 0, 0, AY_CHANNEL_B); // event sound
   1AE8 26 02         [ 7] 5065 	ld	h,#0x02
   1AEA E3            [19] 5066 	ex	(sp),hl
   1AEB 33            [ 6] 5067 	inc	sp
   1AEC 21 00 00      [10] 5068 	ld	hl, #0x0000
   1AEF E5            [11] 5069 	push	hl
   1AF0 2E 29         [ 7] 5070 	ld	l, #0x29
   1AF2 E5            [11] 5071 	push	hl
   1AF3 21 06 0E      [10] 5072 	ld	hl, #0x0e06
   1AF6 E5            [11] 5073 	push	hl
   1AF7 CDr00r00      [17] 5074 	call	_cpct_akp_SFXPlay
   1AFA 21 07 00      [10] 5075 	ld	hl, #7
   1AFD 39            [11] 5076 	add	hl, sp
   1AFE F9            [ 6] 5077 	ld	sp, hl
                           5078 ;src/main.c:1515: ClearScreen();
   1AFF CDr01r02      [17] 5079 	call	_ClearScreen
                           5080 ;src/main.c:1517: PrintText("SCAPE@FROM@MARS?", 9, 86);
   1B02 21 09 56      [10] 5081 	ld	hl, #0x5609
   1B05 E5            [11] 5082 	push	hl
   1B06 21r54r1B      [10] 5083 	ld	hl, #___str_19
   1B09 E5            [11] 5084 	push	hl
   1B0A CDrA8r02      [17] 5085 	call	_PrintText
   1B0D F1            [10] 5086 	pop	af
   1B0E F1            [10] 5087 	pop	af
                           5088 ;src/main.c:1518: Pause(300);
   1B0F 21 2C 01      [10] 5089 	ld	hl, #0x012c
   1B12 CDrCCr01      [17] 5090 	call	_Pause
                           5091 ;src/main.c:1520: cpct_akp_musicInit(Ingame1);
   1B15 21r00r00      [10] 5092 	ld	hl, #_Ingame1
   1B18 E5            [11] 5093 	push	hl
   1B19 CDr00r00      [17] 5094 	call	_cpct_akp_musicInit
   1B1C F1            [10] 5095 	pop	af
   1B1D C9            [10] 5096 	ret
   1B1E                    5097 ___str_10:
   1B1E 40 40 55 50 40     5098 	.ascii "@@UP@"
   1B23 00                 5099 	.db 0x00
   1B24                    5100 ___str_11:
   1B24 40 44 4F 57 4E     5101 	.ascii "@DOWN"
   1B29 00                 5102 	.db 0x00
   1B2A                    5103 ___str_12:
   1B2A 40 4C 45 46 54     5104 	.ascii "@LEFT"
   1B2F 00                 5105 	.db 0x00
   1B30                    5106 ___str_13:
   1B30 52 49 47 48 54     5107 	.ascii "RIGHT"
   1B35 00                 5108 	.db 0x00
   1B36                    5109 ___str_14:
   1B36 40 46 49 52 45     5110 	.ascii "@FIRE"
   1B3B 00                 5111 	.db 0x00
   1B3C                    5112 ___str_15:
   1B3C 41 42 4F 52 54     5113 	.ascii "ABORT"
   1B41 00                 5114 	.db 0x00
   1B42                    5115 ___str_16:
   1B42 4D 55 53 49 43     5116 	.ascii "MUSIC"
   1B47 00                 5117 	.db 0x00
   1B48                    5118 ___str_17:
   1B48 50 41 55 53 45     5119 	.ascii "PAUSE"
   1B4D 00                 5120 	.db 0x00
   1B4E                    5121 ___str_18:
   1B4E 40 40 40 40 40     5122 	.ascii "@@@@@"
   1B53 00                 5123 	.db 0x00
   1B54                    5124 ___str_19:
   1B54 53 43 41 50 45 40  5125 	.ascii "SCAPE@FROM@MARS?"
        46 52 4F 4D 40 4D
        41 52 53 3F
   1B64 00                 5126 	.db 0x00
                           5127 ;src/main.c:1541: void InitValues() {	
                           5128 ;	---------------------------------
                           5129 ; Function InitValues
                           5130 ; ---------------------------------
   1B65                    5131 _InitValues::
                           5132 ;src/main.c:1543: ctlUp = Key_Q;
   1B65 21 08 08      [10] 5133 	ld	hl, #0x0808
   1B68 22r08r00      [16] 5134 	ld	(_ctlUp), hl
                           5135 ;src/main.c:1544: ctlDown = Key_A;
   1B6B 26 20         [ 7] 5136 	ld	h, #0x20
   1B6D 22r0Ar00      [16] 5137 	ld	(_ctlDown), hl
                           5138 ;src/main.c:1545: ctlLeft = Key_O;
   1B70 21 04 04      [10] 5139 	ld	hl, #0x0404
   1B73 22r0Cr00      [16] 5140 	ld	(_ctlLeft), hl
                           5141 ;src/main.c:1546: ctlRight = Key_P;
   1B76 21 03 08      [10] 5142 	ld	hl, #0x0803
   1B79 22r0Er00      [16] 5143 	ld	(_ctlRight), hl
                           5144 ;src/main.c:1547: ctlFire = Key_Space;
   1B7C 21 05 80      [10] 5145 	ld	hl, #0x8005
   1B7F 22r10r00      [16] 5146 	ld	(_ctlFire), hl
                           5147 ;src/main.c:1548: ctlAbort = Key_X;
   1B82 2E 07         [ 7] 5148 	ld	l, #0x07
   1B84 22r14r00      [16] 5149 	ld	(_ctlAbort), hl
                           5150 ;src/main.c:1549: ctlMusic = Key_M;
   1B87 21 04 40      [10] 5151 	ld	hl, #0x4004
   1B8A 22r12r00      [16] 5152 	ld	(_ctlMusic), hl
                           5153 ;src/main.c:1550: ctlPause = Key_H;	
   1B8D 21 05 10      [10] 5154 	ld	hl, #0x1005
   1B90 22r16r00      [16] 5155 	ld	(_ctlPause), hl
   1B93 C9            [10] 5156 	ret
                           5157 ;src/main.c:1555: void ResetData() {
                           5158 ;	---------------------------------
                           5159 ; Function ResetData
                           5160 ; ---------------------------------
   1B94                    5161 _ResetData::
                           5162 ;src/main.c:1557: shot.active = FALSE; 
   1B94 21r69r00      [10] 5163 	ld	hl, #(_shot + 0x0005)
   1B97 36 00         [10] 5164 	ld	(hl), #0x00
                           5165 ;src/main.c:1558: shotLC.active = FALSE;
   1B99 21r6Fr00      [10] 5166 	ld	hl, #(_shotLC + 0x0005)
   1B9C 36 00         [10] 5167 	ld	(hl), #0x00
                           5168 ;src/main.c:1560: spr[0].x = spr[0].px = 0;
   1B9E 21r1Ar00      [10] 5169 	ld	hl, #(_spr + 0x0002)
   1BA1 36 00         [10] 5170 	ld	(hl), #0x00
   1BA3 21r18r00      [10] 5171 	ld	hl, #_spr
   1BA6 36 00         [10] 5172 	ld	(hl), #0x00
                           5173 ;src/main.c:1561: spr[0].y = spr[0].py = 159;
   1BA8 21r1Br00      [10] 5174 	ld	hl, #(_spr + 0x0003)
   1BAB 36 9F         [10] 5175 	ld	(hl), #0x9f
   1BAD 21r19r00      [10] 5176 	ld	hl, #(_spr + 0x0001)
   1BB0 36 9F         [10] 5177 	ld	(hl), #0x9f
                           5178 ;src/main.c:1562: spr[0].dir = D_right; 
   1BB2 21r20r00      [10] 5179 	ld	hl, #(_spr + 0x0008)
   1BB5 36 03         [10] 5180 	ld	(hl), #0x03
                           5181 ;src/main.c:1563: spr[0].status = S_stopped;
   1BB7 21r1Cr00      [10] 5182 	ld	hl, #(_spr + 0x0004)
   1BBA 36 00         [10] 5183 	ld	(hl), #0x00
                           5184 ;src/main.c:1565: InitMap();
   1BBC CDrC4r03      [17] 5185 	call	_InitMap
                           5186 ;src/main.c:1566: RefreshScoreboard();
   1BBF C3r2Cr03      [10] 5187 	jp  _RefreshScoreboard
                           5188 ;src/main.c:1571: void InitGame() {
                           5189 ;	---------------------------------
                           5190 ; Function InitGame
                           5191 ; ---------------------------------
   1BC2                    5192 _InitGame::
                           5193 ;src/main.c:1572: StartMenu(); // start menu;
   1BC2 CDr59r1A      [17] 5194 	call	_StartMenu
                           5195 ;src/main.c:1573: music = TRUE;
   1BC5 21r05r00      [10] 5196 	ld	hl,#_music + 0
   1BC8 36 01         [10] 5197 	ld	(hl), #0x01
                           5198 ;src/main.c:1574: mapNumber = 0;
   1BCA 21r00r00      [10] 5199 	ld	hl,#_mapNumber + 0
   1BCD 36 00         [10] 5200 	ld	(hl), #0x00
                           5201 ;src/main.c:1575: score = 0;
   1BCF 21 00 00      [10] 5202 	ld	hl, #0x0000
   1BD2 22r00r00      [16] 5203 	ld	(_score), hl
                           5204 ;src/main.c:1576: ammo= 99;
   1BD5 21r04r00      [10] 5205 	ld	hl,#_ammo + 0
   1BD8 36 63         [10] 5206 	ld	(hl), #0x63
                           5207 ;src/main.c:1577: activeLC = 1; // temp fix
   1BDA 21r70r00      [10] 5208 	ld	hl,#_activeLC + 0
   1BDD 36 01         [10] 5209 	ld	(hl), #0x01
                           5210 ;src/main.c:1580: spr[0].object = 255; // no object
   1BDF 21r24r00      [10] 5211 	ld	hl, #(_spr + 0x000c)
   1BE2 36 FF         [10] 5212 	ld	(hl), #0xff
                           5213 ;src/main.c:1581: spr[0].lives = 9; // 10 lives
   1BE4 21r21r00      [10] 5214 	ld	hl, #(_spr + 0x0009)
   1BE7 36 09         [10] 5215 	ld	(hl), #0x09
                           5216 ;src/main.c:1584: InitScoreboard();
   1BE9 CDr0Er03      [17] 5217 	call	_InitScoreboard
                           5218 ;src/main.c:1587: InitObjects();
   1BEC CDr46r08      [17] 5219 	call	_InitObjects
                           5220 ;src/main.c:1589: InitLC();
   1BEF CDrE2r18      [17] 5221 	call	_InitLC
                           5222 ;src/main.c:1591: ResetData();
   1BF2 C3r94r1B      [10] 5223 	jp  _ResetData
                           5224 ;src/main.c:1596: void GameOver() {
                           5225 ;	---------------------------------
                           5226 ; Function GameOver
                           5227 ; ---------------------------------
   1BF5                    5228 _GameOver::
                           5229 ;src/main.c:1598: if (spr[0].lives > 0) 
   1BF5 3Ar21r00      [13] 5230 	ld	a, (#(_spr + 0x0009) + 0)
   1BF8 B7            [ 4] 5231 	or	a, a
                           5232 ;src/main.c:1599: ResetData(); // reassign data to some variables
   1BF9 C2r94r1B      [10] 5233 	jp	NZ,_ResetData
                           5234 ;src/main.c:1601: cpct_akp_musicInit(FX); // stop the music
   1BFC 21r00r00      [10] 5235 	ld	hl, #_FX
   1BFF E5            [11] 5236 	push	hl
   1C00 CDr00r00      [17] 5237 	call	_cpct_akp_musicInit
   1C03 F1            [10] 5238 	pop	af
                           5239 ;src/main.c:1602: RefreshScoreboard();
   1C04 CDr2Cr03      [17] 5240 	call	_RefreshScoreboard
                           5241 ;src/main.c:1604: PrintText("@@@@@@@@@@@", 18, 102);
   1C07 21 12 66      [10] 5242 	ld	hl, #0x6612
   1C0A E5            [11] 5243 	push	hl
   1C0B 21r3Cr1C      [10] 5244 	ld	hl, #___str_20
   1C0E E5            [11] 5245 	push	hl
   1C0F CDrA8r02      [17] 5246 	call	_PrintText
   1C12 F1            [10] 5247 	pop	af
                           5248 ;src/main.c:1605: PrintText("@GAME@OVER@", 18, 110);
   1C13 21 12 6E      [10] 5249 	ld	hl, #0x6e12
   1C16 E3            [19] 5250 	ex	(sp),hl
   1C17 21r48r1C      [10] 5251 	ld	hl, #___str_21
   1C1A E5            [11] 5252 	push	hl
   1C1B CDrA8r02      [17] 5253 	call	_PrintText
   1C1E F1            [10] 5254 	pop	af
                           5255 ;src/main.c:1606: PrintText("@@@@@@@@@@@", 18, 118);
   1C1F 21 12 76      [10] 5256 	ld	hl, #0x7612
   1C22 E3            [19] 5257 	ex	(sp),hl
   1C23 21r3Cr1C      [10] 5258 	ld	hl, #___str_20
   1C26 E5            [11] 5259 	push	hl
   1C27 CDrA8r02      [17] 5260 	call	_PrintText
   1C2A F1            [10] 5261 	pop	af
   1C2B F1            [10] 5262 	pop	af
                           5263 ;src/main.c:1607: Pause(500);
   1C2C 21 F4 01      [10] 5264 	ld	hl, #0x01f4
   1C2F CDrCCr01      [17] 5265 	call	_Pause
                           5266 ;src/main.c:1609: while (!cpct_isAnyKeyPressed());
   1C32                    5267 00101$:
   1C32 CDr00r00      [17] 5268 	call	_cpct_isAnyKeyPressed
   1C35 7D            [ 4] 5269 	ld	a, l
   1C36 B7            [ 4] 5270 	or	a, a
   1C37 28 F9         [12] 5271 	jr	Z,00101$
                           5272 ;src/main.c:1610: InitGame();
   1C39 C3rC2r1B      [10] 5273 	jp  _InitGame
   1C3C                    5274 ___str_20:
   1C3C 40 40 40 40 40 40  5275 	.ascii "@@@@@@@@@@@"
        40 40 40 40 40
   1C47 00                 5276 	.db 0x00
   1C48                    5277 ___str_21:
   1C48 40 47 41 4D 45 40  5278 	.ascii "@GAME@OVER@"
        4F 56 45 52 40
   1C53 00                 5279 	.db 0x00
                           5280 ;src/main.c:1615: void MainLoop() {
                           5281 ;	---------------------------------
                           5282 ; Function MainLoop
                           5283 ; ---------------------------------
   1C54                    5284 _MainLoop::
                           5285 ;src/main.c:1616: cpct_disableFirmware(); // disable firmware control
   1C54 CDr00r00      [17] 5286 	call	_cpct_disableFirmware
                           5287 ;src/main.c:1617: cpct_akp_SFXInit(FX); //initialize sound effects
   1C57 21r00r00      [10] 5288 	ld	hl, #_FX
   1C5A E5            [11] 5289 	push	hl
   1C5B CDr00r00      [17] 5290 	call	_cpct_akp_SFXInit
   1C5E F1            [10] 5291 	pop	af
                           5292 ;src/main.c:1618: cpct_setInterruptHandler(Interrupt); // initialize the interrupt manager (keyboard and sound)
   1C5F 21rE8r01      [10] 5293 	ld	hl, #_Interrupt
   1C62 CDr00r00      [17] 5294 	call	_cpct_setInterruptHandler
                           5295 ;src/main.c:1619: cpct_setVideoMode(0); // activate mode 0; 160*200 16 colors
   1C65 2E 00         [ 7] 5296 	ld	l, #0x00
   1C67 CDr00r00      [17] 5297 	call	_cpct_setVideoMode
                           5298 ;src/main.c:1620: cpct_setPalette(g_palette, 16); // assign palette
   1C6A 21 10 00      [10] 5299 	ld	hl, #0x0010
   1C6D E5            [11] 5300 	push	hl
   1C6E 21r00r00      [10] 5301 	ld	hl, #_g_palette
   1C71 E5            [11] 5302 	push	hl
   1C72 CDr00r00      [17] 5303 	call	_cpct_setPalette
                           5304 ;src/main.c:1621: cpct_setBorder(g_palette[1]); // print border (black)
   1C75 21r01r00      [10] 5305 	ld	hl, #_g_palette + 1
   1C78 46            [ 7] 5306 	ld	b, (hl)
   1C79 C5            [11] 5307 	push	bc
   1C7A 33            [ 6] 5308 	inc	sp
   1C7B 3E 10         [ 7] 5309 	ld	a, #0x10
   1C7D F5            [11] 5310 	push	af
   1C7E 33            [ 6] 5311 	inc	sp
   1C7F CDr00r00      [17] 5312 	call	_cpct_setPALColour
                           5313 ;src/main.c:1622: cpct_etm_setTileset2x4(g_tileset); // keep in memory the tiles for the maps (4 * 4)		
   1C82 21r00r00      [10] 5314 	ld	hl, #_g_tileset
   1C85 CDr00r00      [17] 5315 	call	_cpct_etm_setTileset2x4
                           5316 ;src/main.c:1623: InitValues(); // assigns default values ​​that do not vary between games
   1C88 CDr65r1B      [17] 5317 	call	_InitValues
                           5318 ;src/main.c:1624: InitGame(); // initialization of some variables
   1C8B CDrC2r1B      [17] 5319 	call	_InitGame
                           5320 ;src/main.c:1626: while (1) { // main loop		
   1C8E                    5321 00116$:
                           5322 ;src/main.c:1628: ReprintObjects();
   1C8E CDr34r06      [17] 5323 	call	_ReprintObjects
                           5324 ;src/main.c:1630: RunStatus(); // call the appropriate function according to the player status  
   1C91 CDr9Ar10      [17] 5325 	call	_RunStatus
                           5326 ;src/main.c:1631: SelectFrame(); // we assign the next frame of the animation to the player
   1C94 CDrDEr0B      [17] 5327 	call	_SelectFrame
                           5328 ;src/main.c:1632: DeleteSprite(&spr[0]);
   1C97 21r18r00      [10] 5329 	ld	hl, #_spr
   1C9A CDrE9r08      [17] 5330 	call	_DeleteSprite
                           5331 ;src/main.c:1633: spr[0].px = spr[0].x; // save the current X coordinate
   1C9D 01r1Ar00      [10] 5332 	ld	bc, #_spr + 2
   1CA0 3Ar18r00      [13] 5333 	ld	a, (#_spr + 0)
   1CA3 02            [ 7] 5334 	ld	(bc), a
                           5335 ;src/main.c:1634: spr[0].py = spr[0].y; // save the current Y coordinate
   1CA4 01r1Br00      [10] 5336 	ld	bc, #_spr + 3
   1CA7 3Ar19r00      [13] 5337 	ld	a, (#(_spr + 0x0001) + 0)
   1CAA 02            [ 7] 5338 	ld	(bc), a
                           5339 ;src/main.c:1635: PrintSprite(&spr[0]); // prints the player in the new XY position
   1CAB 21r18r00      [10] 5340 	ld	hl, #_spr
   1CAE CDrBFr08      [17] 5341 	call	_PrintSprite
                           5342 ;src/main.c:1637: if (OverMines()) { // the player is stepping on mines?
   1CB1 CDr83r04      [17] 5343 	call	_OverMines
   1CB4 7D            [ 4] 5344 	ld	a, l
   1CB5 B7            [ 4] 5345 	or	a, a
   1CB6 28 0F         [12] 5346 	jr	Z,00102$
                           5347 ;src/main.c:1638: spr[0].lives--;
   1CB8 21r21r00      [10] 5348 	ld	hl, #_spr + 9
   1CBB 4E            [ 7] 5349 	ld	c, (hl)
   1CBC 0D            [ 4] 5350 	dec	c
   1CBD 71            [ 7] 5351 	ld	(hl), c
                           5352 ;src/main.c:1639: ExplodePlayer();
   1CBE CDrDEr10      [17] 5353 	call	_ExplodePlayer
                           5354 ;src/main.c:1640: ExplodeEnemies();
   1CC1 CDr4Er17      [17] 5355 	call	_ExplodeEnemies
                           5356 ;src/main.c:1641: GameOver();
   1CC4 CDrF5r1B      [17] 5357 	call	_GameOver
   1CC7                    5358 00102$:
                           5359 ;src/main.c:1645: if (activeLC > 0 && spr[0].y >= lc[activeLC].y - 5 && spr[0].y <= lc[activeLC].y + 5)
   1CC7 3Ar70r00      [13] 5360 	ld	a,(#_activeLC + 0)
   1CCA B7            [ 4] 5361 	or	a, a
   1CCB 28 40         [12] 5362 	jr	Z,00104$
   1CCD 21r19r00      [10] 5363 	ld	hl, #(_spr + 0x0001) + 0
   1CD0 4E            [ 7] 5364 	ld	c, (hl)
   1CD1 ED 5Br70r00   [20] 5365 	ld	de, (_activeLC)
   1CD5 16 00         [ 7] 5366 	ld	d, #0x00
   1CD7 6B            [ 4] 5367 	ld	l, e
   1CD8 62            [ 4] 5368 	ld	h, d
   1CD9 29            [11] 5369 	add	hl, hl
   1CDA 29            [11] 5370 	add	hl, hl
   1CDB 19            [11] 5371 	add	hl, de
   1CDC 11r71r00      [10] 5372 	ld	de, #_lc
   1CDF 19            [11] 5373 	add	hl, de
   1CE0 23            [ 6] 5374 	inc	hl
   1CE1 5E            [ 7] 5375 	ld	e, (hl)
   1CE2 16 00         [ 7] 5376 	ld	d, #0x00
   1CE4 7B            [ 4] 5377 	ld	a, e
   1CE5 C6 FB         [ 7] 5378 	add	a, #0xfb
   1CE7 6F            [ 4] 5379 	ld	l, a
   1CE8 7A            [ 4] 5380 	ld	a, d
   1CE9 CE FF         [ 7] 5381 	adc	a, #0xff
   1CEB 67            [ 4] 5382 	ld	h, a
   1CEC 06 00         [ 7] 5383 	ld	b, #0x00
   1CEE 79            [ 4] 5384 	ld	a, c
   1CEF 95            [ 4] 5385 	sub	a, l
   1CF0 78            [ 4] 5386 	ld	a, b
   1CF1 9C            [ 4] 5387 	sbc	a, h
   1CF2 E2rF7r1C      [10] 5388 	jp	PO, 00156$
   1CF5 EE 80         [ 7] 5389 	xor	a, #0x80
   1CF7                    5390 00156$:
   1CF7 FAr0Dr1D      [10] 5391 	jp	M, 00104$
   1CFA 21 05 00      [10] 5392 	ld	hl, #0x0005
   1CFD 19            [11] 5393 	add	hl, de
   1CFE 7D            [ 4] 5394 	ld	a, l
   1CFF 91            [ 4] 5395 	sub	a, c
   1D00 7C            [ 4] 5396 	ld	a, h
   1D01 98            [ 4] 5397 	sbc	a, b
   1D02 E2r07r1D      [10] 5398 	jp	PO, 00157$
   1D05 EE 80         [ 7] 5399 	xor	a, #0x80
   1D07                    5400 00157$:
   1D07 FAr0Dr1D      [10] 5401 	jp	M, 00104$
                           5402 ;src/main.c:1646: SetLC();
   1D0A CDr36r18      [17] 5403 	call	_SetLC
   1D0D                    5404 00104$:
                           5405 ;src/main.c:1648: EnemyLoop(&spr[1]);
   1D0D 21r2Br00      [10] 5406 	ld	hl, #(_spr + 0x0013)
   1D10 CDrC5r16      [17] 5407 	call	_EnemyLoop
                           5408 ;src/main.c:1649: EnemyLoop(&spr[2]);
   1D13 21r3Er00      [10] 5409 	ld	hl, #(_spr + 0x0026)
   1D16 CDrC5r16      [17] 5410 	call	_EnemyLoop
                           5411 ;src/main.c:1650: EnemyLoop(&spr[3]);
   1D19 21r51r00      [10] 5412 	ld	hl, #(_spr + 0x0039)
   1D1C CDrC5r16      [17] 5413 	call	_EnemyLoop
                           5414 ;src/main.c:1653: if (shot.active == TRUE)
   1D1F 3Ar69r00      [13] 5415 	ld	a, (#_shot + 5)
   1D22 3D            [ 4] 5416 	dec	a
   1D23 20 1E         [12] 5417 	jr	NZ,00108$
                           5418 ;src/main.c:1655: MoveShot(&shot, 2); // update XY coordinates of bullet if fired
   1D25 3E 02         [ 7] 5419 	ld	a, #0x02
   1D27 F5            [11] 5420 	push	af
   1D28 33            [ 6] 5421 	inc	sp
   1D29 21r64r00      [10] 5422 	ld	hl, #_shot
   1D2C E5            [11] 5423 	push	hl
   1D2D CDrDAr11      [17] 5424 	call	_MoveShot
   1D30 F1            [10] 5425 	pop	af
   1D31 33            [ 6] 5426 	inc	sp
                           5427 ;src/main.c:1656: PrintShot(&shot, spr[0].dir - 2); // delete the shot and prints it in the new XY position
   1D32 21r20r00      [10] 5428 	ld	hl, #_spr + 8
   1D35 46            [ 7] 5429 	ld	b, (hl)
   1D36 05            [ 4] 5430 	dec	b
   1D37 05            [ 4] 5431 	dec	b
   1D38 C5            [11] 5432 	push	bc
   1D39 33            [ 6] 5433 	inc	sp
   1D3A 21r64r00      [10] 5434 	ld	hl, #_shot
   1D3D E5            [11] 5435 	push	hl
   1D3E CDr8Dr11      [17] 5436 	call	_PrintShot
   1D41 F1            [10] 5437 	pop	af
   1D42 33            [ 6] 5438 	inc	sp
   1D43                    5439 00108$:
                           5440 ;src/main.c:1660: if (shotLC.active == TRUE)
   1D43 3Ar6Fr00      [13] 5441 	ld	a, (#_shotLC + 5)
   1D46 3D            [ 4] 5442 	dec	a
   1D47 20 1D         [12] 5443 	jr	NZ,00110$
                           5444 ;src/main.c:1662: MoveShot(&shotLC, 1); // update XY coordinates of of laser if fired
   1D49 3E 01         [ 7] 5445 	ld	a, #0x01
   1D4B F5            [11] 5446 	push	af
   1D4C 33            [ 6] 5447 	inc	sp
   1D4D 21r6Ar00      [10] 5448 	ld	hl, #_shotLC
   1D50 E5            [11] 5449 	push	hl
   1D51 CDrDAr11      [17] 5450 	call	_MoveShot
   1D54 F1            [10] 5451 	pop	af
   1D55 33            [ 6] 5452 	inc	sp
                           5453 ;src/main.c:1663: PrintShot(&shotLC, 2); // delete the laser and prints it in the new XY position
   1D56 3E 02         [ 7] 5454 	ld	a, #0x02
   1D58 F5            [11] 5455 	push	af
   1D59 33            [ 6] 5456 	inc	sp
   1D5A 21r6Ar00      [10] 5457 	ld	hl, #_shotLC
   1D5D E5            [11] 5458 	push	hl
   1D5E CDr8Dr11      [17] 5459 	call	_PrintShot
   1D61 F1            [10] 5460 	pop	af
   1D62 33            [ 6] 5461 	inc	sp
                           5462 ;src/main.c:1664: CheckLCCollisions();
   1D63 CDr1Fr19      [17] 5463 	call	_CheckLCCollisions
   1D66                    5464 00110$:
                           5465 ;src/main.c:1667: if (ctMainLoop % 15 == 0) // reprint scoreboard data
   1D66 3E 0F         [ 7] 5466 	ld	a, #0x0f
   1D68 F5            [11] 5467 	push	af
   1D69 33            [ 6] 5468 	inc	sp
   1D6A 3Ar06r00      [13] 5469 	ld	a, (_ctMainLoop)
   1D6D F5            [11] 5470 	push	af
   1D6E 33            [ 6] 5471 	inc	sp
   1D6F CDr00r00      [17] 5472 	call	__moduchar
   1D72 F1            [10] 5473 	pop	af
   1D73 7D            [ 4] 5474 	ld	a, l
   1D74 B7            [ 4] 5475 	or	a, a
   1D75 20 03         [12] 5476 	jr	NZ,00112$
                           5477 ;src/main.c:1668: RefreshScoreboard();	
   1D77 CDr2Cr03      [17] 5478 	call	_RefreshScoreboard
   1D7A                    5479 00112$:
                           5480 ;src/main.c:1670: cpct_waitVSYNC(); // wait for vertical retrace
   1D7A CDr00r00      [17] 5481 	call	_cpct_waitVSYNC
                           5482 ;src/main.c:1672: if (++ctMainLoop == 255) ctMainLoop = 0;
   1D7D FD 21r06r00   [14] 5483 	ld	iy, #_ctMainLoop
   1D81 FD 34 00      [23] 5484 	inc	0 (iy)
   1D84 FD 7E 00      [19] 5485 	ld	a, 0 (iy)
   1D87 3C            [ 4] 5486 	inc	a
   1D88 C2r8Er1C      [10] 5487 	jp	NZ,00116$
   1D8B FD 36 00 00   [19] 5488 	ld	0 (iy), #0x00
   1D8F C3r8Er1C      [10] 5489 	jp	00116$
                           5490 ;src/main.c:1682: void main(void) 
                           5491 ;	---------------------------------
                           5492 ; Function main
                           5493 ; ---------------------------------
   1D92                    5494 _main::
                           5495 ;src/main.c:1686: MainLoop();   
   1D92 C3r54r1C      [10] 5496 	jp  _MainLoop
                           5497 	.area _CODE
                           5498 	.area _INITIALIZER
   0000                    5499 __xinit__mapNumber:
   0000 00                 5500 	.db #0x00	; 0
                           5501 	.area _CABS (ABS)
